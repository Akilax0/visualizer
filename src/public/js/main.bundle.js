/*! For license information please see main.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpera_swarm_visualizer=self.webpackChunkpera_swarm_visualizer||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{r.r(t);var n=r("./src/js/data/config.js"),o=r("./src/js/utils/detector.js"),a=r("./src/js/app/main.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),n.default.isDev=!0,function(){if(o.default.webgl){var e=document.getElementById("appContainer");new a.default(e)}else o.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.domElement.width,i=t.domElement.height;this.threeCamera=new n.PerspectiveCamera(o.default.camera.fov,a/i,o.default.camera.near,o.default.camera.far),this.threeCamera.position.set(o.default.camera.posX,o.default.camera.posY,o.default.camera.posZ),this.threeCamera.up.set(0,0,1),this.updateSize(t),window.addEventListener("resize",(function(){return r.updateSize(t)}),!1)}var t,r,a;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/controls.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/examples/jsm/controls/OrbitControls.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.threeControls=new n.OrbitControls(t,r),this.init()}var t,r,a;return t=e,(r=[{key:"init",value:function(){this.threeControls.target.set(o.default.controls.target.x,o.default.controls.target.y,o.default.controls.target.z),this.threeControls.autoRotate=o.default.controls.autoRotate,this.threeControls.autoRotateSpeed=o.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=o.default.controls.rotateSpeed,this.threeControls.zoomSpeed=o.default.controls.zoomSpeed,this.threeControls.minDistance=o.default.controls.minDistance,this.threeControls.maxDistance=o.default.controls.maxDistance,this.threeControls.minPolarAngle=o.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=o.default.controls.maxPolarAngle,this.threeControls.enableDamping=o.default.controls.enableDamping,this.threeControls.enableZoom=o.default.controls.enableZoom,this.threeControls.dampingFactor=o.default.controls.dampingFactor,this.threeControls.enableRotate=!0,null==o.default.controls.minAzimuthAngle?this.threeControls.minAzimuthAngle=-1/0:this.threeControls.minAzimuthAngle=o.default.controls.minAzimuthAngle,null==o.default.controls.maxAzimuthAngle?this.threeControls.maxAzimuthAngle=1/0:this.threeControls.maxAzimuthAngle=o.default.controls.maxAzimuthAngle}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/environment.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}function s(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var l=s((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),console.log("Environment: Scale: ".concat(scene_scale,", arenaSize:").concat(o.default.arena.size));var t=new n.PlaneBufferGeometry(o.default.arena.size,o.default.arena.size),r=new n.MeshPhongMaterial({color:10066329,depthWrite:!1});r.userData.originalColor=new n.Color(10066329);var a=new n.Mesh(t,r);a.scale.set(scene_scale,scene_scale,scene_scale),a.position.set(0,0,0),a.receiveShadow=!0,scene.add(a);var i=new n.GridHelper(o.default.arena.size,Math.round(o.default.arena.size/10),0,5987163);i.rotation.x=-Math.PI/2,i.scale.set(scene_scale,scene_scale,scene_scale),i.position.set(0,0,0),i.material.opacity=.35,i.material.transparent=!0,scene.add(i)}))},"./src/js/app/components/geometry.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/components/material.js"),a=r("./src/js/data/config.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return l(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,r,i;return t=e,r=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new n.PlaneGeometry(e,r,o,a)}:"sphere"===e?function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new n.SphereGeometry(e,r,o)}:void 0}},{key:"place",value:function(e,t){var r,i,l=new o.default(15658734).standard,u=new n.Mesh(this.geo,l);(r=u.position).set.apply(r,s(e)),(i=u.rotation).set.apply(i,s(t)),a.default.shadow.enabled&&(u.receiveShadow=!0),this.scene.add(u)}}],r&&u(t.prototype,r),i&&u(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/label.js":(e,t,r)=>{r.r(t),r.d(t,{addLabel:()=>i,default:()=>a,removeLabel:()=>s});var n=r("./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js"),o=r("./src/js/data/config.js");function a(){var e=new n.CSS2DRenderer;return e.setSize(window.innerWidth,window.innerHeight),e.domElement.style.position="absolute",e.domElement.style.top="0px",e.isShowingLables=o.default.isShowingLables,e.isShowingObstacleLables=o.default.labelsVisibility.obstacles,e.isShowingRobotLables=o.default.labelsVisibility.robots,e.updateSize=function(){e.setSize(window.innerWidth,window.innerHeight)},document.addEventListener("DOMContentLoaded",(function(){return e.updateSize()}),!1),window.addEventListener("resize",(function(){return e.updateSize()}),!1),e}var i=function(e,t,r,o){if(void 0!==r){var a=document.createElement("div");a.className="label",a.textContent=t.name+" ["+r.reality+"]",a.style.marginTop="-1.2em";var i=new n.CSS2DObject(a);i.name="Label[".concat(t.id,"]"),i.position.set(0,1,0),i.visible=o,r.add(i),r.removeLabel=function(){r.remove(i)}}},s=function(e){void 0!==e&&void 0!==e.removeLabel&&e.removeLabel()}},"./src/js/app/components/light.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,a;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new n.AmbientLight(o.default.ambientLight.color),this.ambientLight.visible=o.default.ambientLight.enabled,this.pointLight=new n.PointLight(o.default.pointLight.color,o.default.pointLight.intensity,o.default.pointLight.distance),this.pointLight.position.set(o.default.pointLight.x,o.default.pointLight.y,o.default.pointLight.z),this.pointLight.visible=o.default.pointLight.enabled,this.directionalLight=new n.DirectionalLight(o.default.directionalLight.color,o.default.directionalLight.intensity),this.directionalLight.position.set(o.default.directionalLight.x,o.default.directionalLight.y,o.default.directionalLight.z),this.directionalLight.visible=o.default.directionalLight.enabled,this.directionalLight.castShadow=o.default.shadow.enabled,this.directionalLight.shadow.bias=o.default.shadow.bias,this.directionalLight.shadow.camera.near=o.default.shadow.near,this.directionalLight.shadow.camera.far=o.default.shadow.far,this.directionalLight.shadow.camera.left=o.default.shadow.left,this.directionalLight.shadow.camera.right=o.default.shadow.right,this.directionalLight.shadow.camera.top=o.default.shadow.top,this.directionalLight.shadow.camera.bottom=o.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=o.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=o.default.shadow.mapHeight,this.directionalLightHelper=new n.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=o.default.shadow.helperEnabled,this.hemiLight=new n.HemisphereLight(o.default.hemiLight.color,o.default.hemiLight.groundColor,o.default.hemiLight.intensity),this.hemiLight.position.set(o.default.hemiLight.x,o.default.hemiLight.y,o.default.hemiLight.z),this.hemiLight.visible=o.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/material.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(a=n.key,i=void 0,i=function(e,t){if("object"!==o(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===o(i)?i:String(i)),n)}var a,i}function i(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var s=i((function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new n.MeshBasicMaterial({color:t,side:n.DoubleSide}),this.standard=new n.MeshStandardMaterial({color:t,shading:n.FlatShading,roughness:1,metalness:0,side:n.DoubleSide}),this.wire=new n.MeshBasicMaterial({wireframe:!0})}))},"./src/js/app/components/obstacle.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js"),a=r("./src/js/app/components/label.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var l="Obstacle_",u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,console.log("Obstacle Reality:",o.default.mixedReality.obstacles),void 0!==r&&r()}var t,r,i;return t=e,(r=[{key:"createList",value:function(e){var t=this;Object.entries(e).forEach((function(e){void 0!==e&&t.create(e[1])}))}},{key:"create",value:function(e){var t=this.createGeometry(e.geometry),r=this.createMaterial(e.material);r.userData.originalColor=new n.Color(6710886),r.userData.labelVisibility=o.default.isShowingLables&&o.default.labelsVisibility.obstacles,r.userData.originalEmmisive=r.emissive.getHex(),r.selected=!1,r.transparent=!0;var i=e.id||1e3+Math.floor(900*Math.random()),s=null==e.reality?"V":e.reality,u=new n.Mesh(t,r),c="Obs_"+i.toString().substring(0,8)+"...";if(u.name=l+i,u.reality=s,"V"===u.reality?r.opacity=o.default.selectedRealities.virtual?1:o.default.hiddenOpacity:"R"===u.reality&&(r.opacity=o.default.selectedRealities.real?1:o.default.hiddenOpacity),this.deleteIfExists(i),this.scene.add(u),void 0!==e.position){var d=e.position,f=d.x,p=d.y,m=this.calculateZ(e);u.scale.set(scene_scale,scene_scale,scene_scale),u.position.set(scene_scale*f,scene_scale*p,scene_scale*m)}if(void 0!==e.rotation){var h=e.rotation,y=h.x,g=h.y,v=h.z,b=(90+y)/360*2*Math.PI,w=g/360*2*Math.PI,S=v/360*2*Math.PI;u.rotation.set(b,w,S)}o.default.shadow.enabled&&(u.receiveShadow=!0),(0,a.addLabel)(l,{id:e.id,name:c},u,o.default.labelsVisibility.obstacles),console.log("Created>",u.name)}},{key:"createGeometry",value:function(e){if(null==e.type)throw new TypeError("type unspecified");if("BoxGeometry"==e.type)return this.createBoxGeometry(e.width,e.height,e.depth);if("CylinderGeometry"==e.type)return this.createCylinderGeometry(e.radiusTop,e.radiusBottom,e.height);if("SphereGeometry"==e.type)return this.createSphereGeometry(e.radius);throw new TypeError("unsupported geometry type")}},{key:"createBoxGeometry",value:function(e,t,r){if(null==e)throw new TypeError("width unspecified");if(null==t)throw new TypeError("height unspecified");if(null==r)throw new TypeError("depth unspecified");return new n.BoxGeometry(e,t,r)}},{key:"createCylinderGeometry",value:function(e,t,r){if(null==e)throw new TypeError("radiusTop unspecified");if(null==t)throw new TypeError("radiusBottom unspecified");if(null==r)throw new TypeError("height unspecified");var o=o||2,a=a||16;return new n.CylinderGeometry(e,t,r,a,o)}},{key:"createSphereGeometry",value:function(e){if(null==e)throw new TypeError("radius unspecified");var t=t||16,r=r||16;return new n.SphereGeometry(e,t,r)}},{key:"createMaterial",value:function(e){return"MeshBasicMaterial"==e.type?new n.MeshBasicMaterial(e.properties):"MeshNormalMaterial"==e.type?new n.MeshNormalMaterial(e.properties):"MeshPhongMaterial"==e.type?new n.MeshPhongMaterial(e.properties):"MeshPhysicalMaterial"==e.type?new n.MeshPhysicalMaterial(e.properties):(e.type,new n.MeshStandardMaterial(e.properties))}},{key:"calculateZ",value:function(e){return null==e.position.z?void 0!==e.geometry.height?e.geometry.height/2:void 0!==e.geometry.radius?e.geometry.radius:0:e.position.z}},{key:"deleteIfExists",value:function(e){var t=l+e,r=this.scene.getObjectByName(t);void 0!==r&&(this.scene.remove(r),console.log("Deleted>",t))}},{key:"deleteAll",value:function(){var e=this,t=this.scene.children;Object.entries(t).forEach((function(t){var r=t[1].name;r.startsWith(l)&&(console.log("Deleted>",r),(0,a.removeLabel)(t[1]),e.scene.remove(t[1]))}))}}])&&s(t.prototype,r),i&&s(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/renderer.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new n.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=n.PCFSoftShadowMap,o.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return a.updateSize()}),!1),window.addEventListener("resize",(function(){return a.updateSize()}),!1)}var t,r,a;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/robot.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=r("./src/js/data/config.js"),i=r("./src/js/app/components/label.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==s(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===s(a)?a:String(a)),n)}var o,a}var u=r("./node_modules/three-stl-loader/index.js")(n),c="Robot_",d=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,console.log("Robot Reality:",a.default.mixedReality.robots);var n=this;this.created=!0,setInterval((function(){!0===r.created&&(n.prune(),r.created=!1)}),2500)}var t,r,s;return t=e,r=[{key:"changeColor",value:function(e,t,r,n,o,a){var i=this.scene.getObjectByName(c+e);return null!=i?(i.material.color.setRGB(t/256,r/256,n/265),null!=a&&a("success")):null!=a&&a("undefined"),i}},{key:"create",value:function(e,t,r,o){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"V",l=arguments.length>5?arguments[5]:void 0,d=this.scene.getObjectByName(c+e),f=a.default.mixedReality.robots;return null==d?s===f||"M"===f?(t=scene_scale*Math.min(Math.max(t,a.default.arena.minX),a.default.arena.maxX),r=scene_scale*Math.min(Math.max(r,a.default.arena.minY),a.default.arena.maxY),(new u).load("./assets/models/model.stl",(function(u,d){var f=new n.MeshStandardMaterial({color:6710886,opacity:1,transparent:!0});f.userData.originalColor=new n.Color(6710886),f.userData.labelVisibility=a.default.isShowingLables&&a.default.labelsVisibility.robots,f.selected=!1;var p=new n.Mesh(u,f);p.receiveShadow=!0,p.robotId=e,p.name=c+e,p.scale.set(scene_scale,scene_scale,scene_scale),p.position.set(t,r,0),p.rotation.x=90*n.Math.DEG2RAD,p.rotation.y=(o-90)*n.Math.DEG2RAD,p.reality=s,"V"===s?f.opacity=a.default.selectedRealities.virtual?1:a.default.hiddenOpacity:"R"===s&&(f.opacity=a.default.selectedRealities.real?1:a.default.hiddenOpacity),window.scene.add(p),p.clickEvent=function(e){window.robot.alert(e)},(0,i.addLabel)(c,{id:e,name:p.name},p,a.default.labelsVisibility.robots),console.log("Created> Robot: id:".concat(e," | x:").concat(t," y: ").concat(r," heading: ").concat(o," | reality: ").concat(s)),null!=l&&l("success")}))):console.error("Creation Failed> Robot: id:".concat(e,"  reality: ").concat(s,"!=").concat(f)):s===f||"M"===f?(this.setReality(e,s),this.move(e,t,r,o,(function(){null!=l&&l("already defined, so moved")}))):this.delete(e),this.created=!0,d}},{key:"delete",value:function(e,t){if(null!=e){var r=this.scene.getObjectByName(c+e);null!=r?((0,i.removeLabel)(r),scene.remove(r),console.log("Deleted> id:",e),null!=t&&t("success")):null!=t&&t("not found")}else null!=t&&t("id not specified")}},{key:"deleteAll",value:function(){var e=this,t=this.scene.children;Object.entries(t).forEach((function(t){var r=t[1].name;r.startsWith(c)&&(console.log("Deleted>",r),(0,i.removeLabel)(t[1]),e.scene.remove(t[1]))}))}},{key:"setReality",value:function(e,t){var r=this.scene.getObjectByName(c+e);null!=r&&(r.reality=t)}},{key:"exists",value:function(e){return this.scene.getObjectByName(c+e)}},{key:"move",value:function(e,t,r,i,s){var l=this.scene.getObjectByName(c+e);if(null!=l){var u=l.rotation.y,d=(i-90)*n.Math.DEG2RAD,f={x:l.position.x,y:l.position.y,heading:l.rotation.y},p=u*d>=0;return t=scene_scale*Math.min(Math.max(Math.round(10*t)/10,a.default.arena.minX),a.default.arena.maxX),r=scene_scale*Math.min(Math.max(Math.round(10*r)/10,a.default.arena.minY),a.default.arena.maxY),i=Math.round(10*i)/10,0!=Math.sqrt(Math.pow(t-f.x,2)+Math.pow(r-f.y,2))?new o.default.Tween(f).to({x:t,y:r,heading:d},1e3).onUpdate((function(){l.position.x=f.x,l.position.y=f.y,p&&(l.rotation.y=f.heading)})).onComplete((function(){l.rotation.y=f.heading,null!=s&&s("success")})).delay(50).start():l.rotation.y=d,l}null!=s&&s("undefined")}},{key:"get_coordinates",value:function(e){var t=this.scene.getObjectByName(c+e);return null!=t?(console.log("".concat(t.position.x,",").concat(t.position.y,",").concat(t.position.z)),t):null}},{key:"update",value:function(){o.default.update()}},{key:"requestSnapshot",value:function(e){return new Promise((function(t,r){t(!window.mqtt.publish(window.channel+"/mgt/robots/snapshot",JSON.stringify({id:e.robotId})))}))}},{key:"alert",value:function(e){var t,r=document.querySelector("#msg-box"),n=document.getElementById("msg-content"),o=document.createElement("div");o.setAttribute("id","msg-content"),a.default.isShowingRobotSnapshots?(t=document.createTextNode("".concat(e.name," Snapshot Loading...")),this.requestSnapshot(e)):t=document.createTextNode("".concat(e.name)),o.appendChild(t),r.replaceChild(o,n),r.style.display="block",setTimeout((function(){r.style.opacity="1.0",r.style.display="none"}),1e4)}},{key:"prune",value:function(){var e=this,t=this.scene.children,r=[];Object.entries(t).forEach((function(t){var n=t[1].name;n.startsWith(c)&&(void 0===r[n]?r[n]="valid":((0,i.removeLabel)(t[1]),e.scene.remove(t[1]),console.log(n,": duplicate")))}))}}],r&&l(t.prototype,r),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/helpers/vertexNormalsHelper.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=r,this.scene=t;var a=new n.WireframeGeometry(this.mesh.geometry);this.wireLine=new n.LineSegments(a),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new n.EdgesGeometry(this.mesh.geometry);this.edgesLine=new n.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new o.VertexNormalsHelper(this.mesh,2),this.boxHelper=new n.BoxHelper(this.mesh)}var t,r,a;return t=e,(r=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/urlHelper.js":(e,t,r)=>{function n(e,t){var r,n=t;return window.location.href.indexOf(e)>-1&&(n=(r={},window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(e,t,n){r[t]=n})),r)[e]),n}function o(){var e,t,r,o=localStorage.getItem("pera-swarm-credentials"),a=n("key",!1),i=n("username",!1),s=n("password",!1),l=n("channel",!1),u=n("port",!1),c=n("server",!1);if(e=window.location.origin+window.location.pathname,window.history.pushState({},document.title,e),setTimeout((function(){!1!==c&&localStorage.setItem("pera-swarm-server",c),!1!==l&&localStorage.setItem("pera-swarm-channel",l),!1!==u&&localStorage.setItem("pera-swarm-port",u),!1!==a&&localStorage.setItem("pera-swarm-key",a)}),2e3),!1!==a){console.log("Credentails: Loaded from JWT");var d=(t=a.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=decodeURIComponent(atob(t).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join("")),JSON.parse(r)),f=d.user,p=d.pass,m=d.channel;return void 0!==d.host&&localStorage.setItem("pera-swarm-server",d.host),void 0!==d.port&&localStorage.setItem("pera-swarm-port",parseInt(d.port)),void 0!==d.path&&localStorage.setItem("pera-swarm-path",d.path),void 0!==d.channel&&localStorage.setItem("pera-swarm-channel",d.channel),localStorage.setItem("pera-swarm-credentials",JSON.stringify({username:f,password:p,channel:m})),{username:f,password:p,channel:m}}return!1!==i&&!1!==s?(console.log("Credentails: Loaded from URL parameters"),localStorage.setItem("pera-swarm-credentials",JSON.stringify({username:i,password:s,channel:l})),{username:i,password:s,channel:l}):!1===i&&!1===s&&null!==o?(console.log("Credentails: Loaded from local storage"),JSON.parse(o)):-1}r.r(t),r.d(t,{getCredentials:()=>o})},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,r)=>{r.r(t),r.d(t,{VertexNormalsHelper:()=>l});var n=r("./node_modules/three/build/three.module.js"),o=new n.Vector3,a=new n.Vector3,i=new n.Matrix3,s=["a","b","c"];function l(e,t,r){this.object=e,this.size=void 0!==t?t:.1;var o=void 0!==r?r:16711680,a=0,i=this.object.geometry;i&&i.isGeometry?a=3*i.faces.length:i&&i.isBufferGeometry&&(a=i.attributes.normal.count);var s=new n.BufferGeometry,l=new n.Float32BufferAttribute(2*a*3,3);s.setAttribute("position",l),n.LineSegments.call(this,s,new n.LineBasicMaterial({color:o,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(n.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,r=this.geometry.attributes.position,n=this.object.geometry;if(n&&n.isGeometry){var l=n.vertices,u=n.faces;e=0;for(var c=0,d=u.length;c<d;c++)for(var f=u[c],p=0,m=f.vertexNormals.length;p<m;p++){var h=l[f[s[p]]],y=f.vertexNormals[p];o.copy(h).applyMatrix4(t),a.copy(y).applyMatrix3(i).normalize().multiplyScalar(this.size).add(o),r.setXYZ(e,o.x,o.y,o.z),e+=1,r.setXYZ(e,a.x,a.y,a.z),e+=1}}else if(n&&n.isBufferGeometry){var g=n.attributes.position,v=n.attributes.normal;e=0;for(var b=0,w=g.count;b<w;b++)o.set(g.getX(b),g.getY(b),g.getZ(b)).applyMatrix4(t),a.set(v.getX(b),v.getY(b),v.getZ(b)),a.applyMatrix3(i).normalize().multiplyScalar(this.size).add(o),r.setXYZ(e,o.x,o.y,o.z),e+=1,r.setXYZ(e,a.x,a.y,a.z),e+=1}r.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{r.r(t),r.d(t,{GLTFLoader:()=>a});var n=r("./node_modules/three/build/three.module.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var a=function(){function e(e){n.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:e,load:function(e,t,r,o){var a,i=this;a=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:n.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){o?o(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new n.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{i.parse(r,a,(function(r){t(r),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),r,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,o,c){var d,h={};if("string"==typeof e)d=e;else if(n.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{h[r.KHR_BINARY_GLTF]=new f(e)}catch(e){return void(c&&c(e))}d=h[r.KHR_BINARY_GLTF].content}else d=n.LoaderUtils.decodeText(new Uint8Array(e));var v=JSON.parse(d);if(void 0===v.asset||v.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(v.extensionsUsed)for(var b=0;b<v.extensionsUsed.length;++b){var w=v.extensionsUsed[b],S=v.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:h[w]=new i(v);break;case r.KHR_MATERIALS_CLEARCOAT:h[w]=new l;break;case r.KHR_MATERIALS_UNLIT:h[w]=new s;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:h[w]=new y;break;case r.KHR_DRACO_MESH_COMPRESSION:h[w]=new p(v,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:h[w]=new a(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:h[w]=new m;break;case r.KHR_MESH_QUANTIZATION:h[w]=new g;break;default:S.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new F(v,h,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(o,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function a(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],o=new n.Color(16777215);void 0!==r.color&&o.fromArray(r.color);var a=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new n.DirectionalLight(o)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new n.PointLight(o)).distance=a;break;case"spot":(t=new n.SpotLight(o)).distance=a,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return n.MeshBasicMaterial},s.prototype.extendParams=function(e,t,r){var o=[];e.color=new n.Color(1,1,1),e.opacity=1;var a=t.pbrMetallicRoughness;if(a){if(Array.isArray(a.baseColorFactor)){var i=a.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==a.baseColorTexture&&o.push(r.assignTexture(e,"map",a.baseColorTexture))}return Promise.all(o)},l.prototype.getMaterialType=function(){return n.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var o=[],a=t.extensions[this.name];if(void 0!==a.clearcoatFactor&&(e.clearcoat=a.clearcoatFactor),void 0!==a.clearcoatTexture&&o.push(r.assignTexture(e,"clearcoatMap",a.clearcoatTexture)),void 0!==a.clearcoatRoughnessFactor&&(e.clearcoatRoughness=a.clearcoatRoughnessFactor),void 0!==a.clearcoatRoughnessTexture&&o.push(r.assignTexture(e,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),void 0!==a.clearcoatNormalTexture&&(o.push(r.assignTexture(e,"clearcoatNormalMap",a.clearcoatNormalTexture)),void 0!==a.clearcoatNormalTexture.scale)){var i=a.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new n.Vector2(i,i)}return Promise.all(o)};var u="glTF",c=12,d={JSON:1313821514,BIN:5130562};function f(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,c);if(this.header={magic:n.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var o=new DataView(e,c),a=0;a<o.byteLength;){var i=o.getUint32(a,!0);a+=4;var s=o.getUint32(a,!0);if(a+=4,s===d.JSON){var l=new Uint8Array(e,c+a,i);this.content=n.LoaderUtils.decodeText(l)}else if(s===d.BIN){var f=c+a;this.body=e.slice(f,f+i)}a+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=r.KHR_TEXTURE_TRANSFORM}function h(e){n.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),o=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),a=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new n.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var n in s)e.uniforms[n]=s[n];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function y(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return h},extendParams:function(e,t,r){var o=t.extensions[this.name];e.color=new n.Color(1,1,1),e.opacity=1;var a=[];if(Array.isArray(o.diffuseFactor)){var i=o.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==o.diffuseTexture&&a.push(r.assignTexture(e,"map",o.diffuseTexture)),e.emissive=new n.Color(0,0,0),e.glossiness=void 0!==o.glossinessFactor?o.glossinessFactor:1,e.specular=new n.Color(1,1,1),Array.isArray(o.specularFactor)&&e.specular.fromArray(o.specularFactor),void 0!==o.specularGlossinessTexture){var s=o.specularGlossinessTexture;a.push(r.assignTexture(e,"glossinessMap",s)),a.push(r.assignTexture(e,"specularMap",s))}return Promise.all(a)},createMaterial:function(e){var t=new h(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=n.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function g(){this.name=r.KHR_MESH_QUANTIZATION}function v(e,t,r,o){n.Interpolant.call(this,e,t,r,o)}p.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,o=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,i={},s={},l={};for(var u in a){var c=C[u]||u.toLowerCase();i[c]=a[u]}for(u in e.attributes){c=C[u]||u.toLowerCase();if(void 0!==a[u]){var d=r.accessors[e.attributes[u]],f=L[d.componentType];l[c]=f,s[c]=!0===d.normalized}}return t.getDependency("bufferView",o).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],o=s[r];void 0!==o&&(n.normalized=o)}t(e)}),i,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},h.prototype=Object.create(n.MeshStandardMaterial.prototype),h.prototype.constructor=h,h.prototype.copy=function(e){return n.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},v.prototype=Object.create(n.Interpolant.prototype),v.prototype.constructor=v,v.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,o=e*n*3+n,a=0;a!==n;a++)t[a]=r[o+a];return t},v.prototype.beforeStart_=v.prototype.copySampleValue_,v.prototype.afterEnd_=v.prototype.copySampleValue_,v.prototype.interpolate_=function(e,t,r,n){for(var o=this.resultBuffer,a=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,u=n-t,c=(r-t)/u,d=c*c,f=d*c,p=e*l,m=p-l,h=-2*f+3*d,y=f-d,g=1-h,v=y-d+c,b=0;b!==i;b++){var w=a[m+b+i],S=a[m+b+s]*u,T=a[p+b+i],M=a[p+b]*u;o[b]=g*w+v*S+h*T+y*M}return o};var b=0,w=1,S=2,T=3,M=4,x=5,j=6,L={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},E={9728:n.NearestFilter,9729:n.LinearFilter,9984:n.NearestMipmapNearestFilter,9985:n.LinearMipmapNearestFilter,9986:n.NearestMipmapLinearFilter,9987:n.LinearMipmapLinearFilter},R={33071:n.ClampToEdgeWrapping,33648:n.MirroredRepeatWrapping,10497:n.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},C={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},O={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},_={CUBICSPLINE:void 0,LINEAR:n.InterpolateLinear,STEP:n.InterpolateDiscrete},P="OPAQUE",k="MASK",I="BLEND",N={"image/png":n.RGBAFormat,"image/jpeg":n.RGBFormat};function G(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function D(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function U(e,t){void 0!==t.extras&&("object"===o(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function H(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var o=t.extras.targetNames;if(e.morphTargetInfluences.length===o.length){e.morphTargetDictionary={};for(r=0,n=o.length;r<n;r++)e.morphTargetDictionary[o[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",r=Object.keys(e).sort(),n=0,o=r.length;n<o;n++)t+=r[n]+":"+e[r[n]]+";";return t}function F(e,r,o){this.json=e||{},this.extensions=r||{},this.options=o||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new n.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new n.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,r){var o=t.attributes,a=[];function i(t,n){return r.getDependency("accessor",t).then((function(t){e.setAttribute(n,t)}))}for(var s in o){var l=C[s]||s.toLowerCase();l in e.attributes||a.push(i(o[s],l))}if(void 0!==t.indices&&!e.index){var u=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));a.push(u)}return U(e,t),function(e,t,r){var o=t.attributes,a=new n.Box3;if(void 0!==o.POSITION){var i=(p=r.json.accessors[o.POSITION]).min,s=p.max;if(void 0!==i&&void 0!==s){a.set(new n.Vector3(i[0],i[1],i[2]),new n.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var u=new n.Vector3,c=new n.Vector3,d=0,f=l.length;d<f;d++){var p,m=l[d];if(void 0!==m.POSITION)i=(p=r.json.accessors[m.POSITION]).min,s=p.max,void 0!==i&&void 0!==s?(c.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),c.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),c.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}a.expandByVector(u)}e.boundingBox=a;var h=new n.Sphere;a.getCenter(h.center),h.radius=a.min.distanceTo(a.max)/2,e.boundingSphere=h}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(a).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,o=!1,a=0,i=t.length;a<i&&(void 0!==(u=t[a]).POSITION&&(n=!0),void 0!==u.NORMAL&&(o=!0),!n||!o);a++);if(!n&&!o)return Promise.resolve(e);var s=[],l=[];for(a=0,i=t.length;a<i;a++){var u=t[a];if(n){var c=void 0!==u.POSITION?r.getDependency("accessor",u.POSITION):e.attributes.position;s.push(c)}o&&(c=void 0!==u.NORMAL?r.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var r=t[0],a=t[1];return n&&(e.morphAttributes.position=r),o&&(e.morphAttributes.normal=a),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function V(e,t){var r=e.getIndex();if(null===r){var o=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)o.push(i);e.setIndex(o),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return F.prototype.parse=function(e,t){var r=this,n=this.json,o=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var a={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};D(o,a,n),U(a,n),e(a)})).catch(t)},F.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},o={},a=0,i=t.length;a<i;a++)for(var s=t[a].joints,l=0,u=s.length;l<u;l++)e[s[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var f=e[c];void 0!==f.mesh&&(void 0===n[f.mesh]&&(n[f.mesh]=o[f.mesh]=0),n[f.mesh]++,void 0!==f.skin&&(r[f.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=o},F.prototype.getDependency=function(e,t){var n=e+":"+t,o=this.cache.get(n);if(!o){switch(e){case"scene":o=this.loadScene(t);break;case"node":o=this.loadNode(t);break;case"mesh":o=this.loadMesh(t);break;case"accessor":o=this.loadAccessor(t);break;case"bufferView":o=this.loadBufferView(t);break;case"buffer":o=this.loadBuffer(t);break;case"material":o=this.loadMaterial(t);break;case"texture":o=this.loadTexture(t);break;case"skin":o=this.loadSkin(t);break;case"animation":o=this.loadAnimation(t);break;case"camera":o=this.loadCamera(t);break;case"light":o=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,o)}return o},F.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},F.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var o=this.options;return new Promise((function(e,r){n.load(G(t.uri,o.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},F.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},F.prototype.loadAccessor=function(e){var t=this,r=this.json,o=this.json.accessors[e];if(void 0===o.bufferView&&void 0===o.sparse)return Promise.resolve(null);var a=[];return void 0!==o.bufferView?a.push(this.getDependency("bufferView",o.bufferView)):a.push(null),void 0!==o.sparse&&(a.push(this.getDependency("bufferView",o.sparse.indices.bufferView)),a.push(this.getDependency("bufferView",o.sparse.values.bufferView))),Promise.all(a).then((function(e){var a,i,s=e[0],l=A[o.type],u=L[o.componentType],c=u.BYTES_PER_ELEMENT,d=c*l,f=o.byteOffset||0,p=void 0!==o.bufferView?r.bufferViews[o.bufferView].byteStride:void 0,m=!0===o.normalized;if(p&&p!==d){var h=Math.floor(f/p),y="InterleavedBuffer:"+o.bufferView+":"+o.componentType+":"+h+":"+o.count,g=t.cache.get(y);g||(a=new u(s,h*p,o.count*p/c),g=new n.InterleavedBuffer(a,p/c),t.cache.add(y,g)),i=new n.InterleavedBufferAttribute(g,l,f%p/c,m)}else a=null===s?new u(o.count*l):new u(s,f,o.count*l),i=new n.BufferAttribute(a,l,m);if(void 0!==o.sparse){var v=A.SCALAR,b=L[o.sparse.indices.componentType],w=o.sparse.indices.byteOffset||0,S=o.sparse.values.byteOffset||0,T=new b(e[1],w,o.sparse.count*v),M=new u(e[2],S,o.sparse.count*l);null!==s&&(i=new n.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var x=0,j=T.length;x<j;x++){var E=T[x];if(i.setX(E,M[x*l]),l>=2&&i.setY(E,M[x*l+1]),l>=3&&i.setZ(E,M[x*l+2]),l>=4&&i.setW(E,M[x*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},F.prototype.loadTexture=function(e){var t,o=this,a=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,u=a.textures[e],c=u.extensions||{},d=(t=c[r.MSFT_TEXTURE_DDS]?a.images[c[r.MSFT_TEXTURE_DDS].source]:a.images[u.source]).uri,f=!1;return void 0!==t.bufferView&&(d=o.getDependency("bufferView",t.bufferView).then((function(e){f=!0;var r=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(r)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=c[r.MSFT_TEXTURE_DDS]?o.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(r,n){t.load(G(e,i.path),r,void 0,n)}))})).then((function(e){!0===f&&l.revokeObjectURL(d),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in N&&(e.format=N[t.mimeType]);var r=(a.samplers||{})[u.sampler]||{};return e.magFilter=E[r.magFilter]||n.LinearFilter,e.minFilter=E[r.minFilter]||n.LinearMipmapLinearFilter,e.wrapS=R[r.wrapS]||n.RepeatWrapping,e.wrapT=R[r.wrapT]||n.RepeatWrapping,e}))},F.prototype.assignTexture=function(e,t,o){var a=this;return this.getDependency("texture",o.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=n.RGBFormat}if(void 0===o.texCoord||0==o.texCoord||"aoMap"===t&&1==o.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+o.texCoord+" for texture "+t+" not yet supported."),a.extensions[r.KHR_TEXTURE_TRANSFORM]){var s=void 0!==o.extensions?o.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=a.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},F.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,o=void 0!==t.attributes.tangent,a=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+r.uuid,d=this.cache.get(c);d||(d=new n.PointsMaterial,n.Material.prototype.copy.call(d,r),d.color.copy(r.color),d.map=r.map,d.sizeAttenuation=!1,this.cache.add(c,d)),r=d}else if(e.isLine){c="LineBasicMaterial:"+r.uuid;var f=this.cache.get(c);f||(f=new n.LineBasicMaterial,n.Material.prototype.copy.call(f,r),f.color.copy(r.color),this.cache.add(c,f)),r=f}if(o||a||i||s||l){c="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),s&&(c+="skinning:"),o&&(c+="vertex-tangents:"),a&&(c+="vertex-colors:"),i&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var p=this.cache.get(c);p||(p=r.clone(),s&&(p.skinning=!0),o&&(p.vertexTangents=!0),a&&(p.vertexColors=!0),i&&(p.flatShading=!0),l&&(p.morphTargets=!0),u&&(p.morphNormals=!0),this.cache.add(c,p)),r=p}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!o&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!o&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},F.prototype.loadMaterial=function(e){var t,o=this,a=this.json,i=this.extensions,s=a.materials[e],l={},u=s.extensions||{},c=[];if(u[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,s,o))}else if(u[r.KHR_MATERIALS_UNLIT]){var f=i[r.KHR_MATERIALS_UNLIT];t=f.getMaterialType(),c.push(f.extendParams(l,s,o))}else{t=n.MeshStandardMaterial;var p=s.pbrMetallicRoughness||{};if(l.color=new n.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var m=p.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==p.baseColorTexture&&c.push(o.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(c.push(o.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),c.push(o.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=n.DoubleSide);var y=s.alphaMode||P;if(y===I?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,y===k&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==n.MeshBasicMaterial&&(c.push(o.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new n.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==n.MeshBasicMaterial&&(c.push(o.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==n.MeshBasicMaterial&&(l.emissive=(new n.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==n.MeshBasicMaterial&&c.push(o.assignTexture(l,"emissiveMap",s.emissiveTexture)),u[r.KHR_MATERIALS_CLEARCOAT]){var g=i[r.KHR_MATERIALS_CLEARCOAT];t=g.getMaterialType(),c.push(g.extendParams(l,{extensions:u},o))}return Promise.all(c).then((function(){var e;return e=t===h?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=n.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=n.sRGBEncoding),U(e,s),s.extensions&&D(i,e,s),e}))},F.prototype.loadGeometries=function(e){var t=this,o=this.extensions,a=this.primitiveCache;function i(e){return o[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return z(r,e,t)}))}for(var s,l,u=[],c=0,d=e.length;c<d;c++){var f,p=e[c],m=(l=void 0,(l=(s=p).extensions&&s.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):s.indices+":"+B(s.attributes)+":"+s.mode),h=a[m];if(h)u.push(h.promise);else f=p.extensions&&p.extensions[r.KHR_DRACO_MESH_COMPRESSION]?i(p):z(new n.BufferGeometry,p,t),a[m]={primitive:p,promise:f},u.push(f)}return Promise.all(u)},F.prototype.loadMesh=function(e){for(var t,r=this,o=this.json.meshes[e],a=o.primitives,i=[],s=0,l=a.length;s<l;s++){var u=void 0===a[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new n.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:n.FrontSide})),t.DefaultMaterial):this.getDependency("material",a[s].material);i.push(u)}return i.push(r.loadGeometries(a)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],u=0,c=s.length;u<c;u++){var d,f=s[u],p=a[u],m=i[u];if(p.mode===M||p.mode===x||p.mode===j||void 0===p.mode)!0!==(d=!0===o.isSkinnedMesh?new n.SkinnedMesh(f,m):new n.Mesh(f,m)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),p.mode===x?d.geometry=V(d.geometry,n.TriangleStripDrawMode):p.mode===j&&(d.geometry=V(d.geometry,n.TriangleFanDrawMode));else if(p.mode===w)d=new n.LineSegments(f,m);else if(p.mode===T)d=new n.Line(f,m);else if(p.mode===S)d=new n.LineLoop(f,m);else{if(p.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);d=new n.Points(f,m)}Object.keys(d.geometry.morphAttributes).length>0&&H(d,o),d.name=o.name||"mesh_"+e,s.length>1&&(d.name+="_"+u),U(d,o),r.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var h=new n.Group;for(u=0,c=l.length;u<c;u++)h.add(l[u]);return h}))},F.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],o=r[r.type];if(o)return"perspective"===r.type?t=new n.PerspectiveCamera(n.MathUtils.radToDeg(o.yfov),o.aspectRatio||1,o.znear||1,o.zfar||2e6):"orthographic"===r.type&&(t=new n.OrthographicCamera(-o.xmag,o.xmag,o.ymag,-o.ymag,o.znear,o.zfar)),r.name&&(t.name=r.name),U(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},F.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},F.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],o=[],a=[],i=[],s=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],d=t.samplers[c.sampler],f=c.target,p=void 0!==f.node?f.node:f.id,m=void 0!==t.parameters?t.parameters[d.input]:d.input,h=void 0!==t.parameters?t.parameters[d.output]:d.output;r.push(this.getDependency("node",p)),o.push(this.getDependency("accessor",m)),a.push(this.getDependency("accessor",h)),i.push(d),s.push(f)}return Promise.all([Promise.all(r),Promise.all(o),Promise.all(a),Promise.all(i),Promise.all(s)]).then((function(r){for(var o=r[0],a=r[1],i=r[2],s=r[3],l=r[4],u=[],c=0,d=o.length;c<d;c++){var f=o[c],p=a[c],m=i[c],h=s[c],y=l[c];if(void 0!==f){var g;switch(f.updateMatrix(),f.matrixAutoUpdate=!0,O[y.path]){case O.weights:g=n.NumberKeyframeTrack;break;case O.rotation:g=n.QuaternionKeyframeTrack;break;default:g=n.VectorKeyframeTrack}var b=f.name?f.name:f.uuid,w=void 0!==h.interpolation?_[h.interpolation]:n.InterpolateLinear,S=[];O[y.path]===O.weights?f.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&S.push(e.name?e.name:e.uuid)})):S.push(b);var T=m.array;if(m.normalized){var M;if(T.constructor===Int8Array)M=1/127;else if(T.constructor===Uint8Array)M=1/255;else if(T.constructor==Int16Array)M=1/32767;else{if(T.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");M=1/65535}for(var x=new Float32Array(T.length),j=0,L=T.length;j<L;j++)x[j]=T[j]*M;T=x}for(j=0,L=S.length;j<L;j++){var E=new g(S[j]+"."+O[y.path],p.array,T,w);"CUBICSPLINE"===h.interpolation&&(E.createInterpolant=function(e){return new v(this.times,this.values,this.getValueSize()/3,e)},E.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(E)}}}var R=t.name?t.name:"animation_"+e;return new n.AnimationClip(R,void 0,u)}))},F.prototype.loadNode=function(e){var t,o=this.json,a=this.extensions,i=this,s=o.meshReferences,l=o.meshUses,u=o.nodes[e];return(t=[],void 0!==u.mesh&&t.push(i.getDependency("mesh",u.mesh).then((function(e){var t;if(s[u.mesh]>1){var r=l[u.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=u.weights.length;t<r;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(i.getDependency("camera",u.camera)),u.extensions&&u.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",u.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new n.Bone:e.length>1?new n.Group:1===e.length?e[0]:new n.Object3D)!==e[0])for(var r=0,o=e.length;r<o;r++)t.add(e[r]);if(u.name&&(t.userData.name=u.name,t.name=n.PropertyBinding.sanitizeNodeName(u.name)),U(t,u),u.extensions&&D(a,t,u),void 0!==u.matrix){var i=new n.Matrix4;i.fromArray(u.matrix),t.applyMatrix4(i)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},F.prototype.loadScene=function(){function e(t,r,o,a){var i=o.nodes[t];return a.getDependency("node",t).then((function(e){return void 0===i.skin?e:a.getDependency("skin",i.skin).then((function(e){for(var r=[],n=0,o=(t=e).joints.length;n<o;n++)r.push(a.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var o=[],a=[],i=0,s=r.length;i<s;i++){var l=r[i];if(l){o.push(l);var u=new n.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*i),a.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new n.Skeleton(o,a),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var n=[];if(i.children)for(var s=i.children,l=0,u=s.length;l<u;l++){var c=s[l];n.push(e(c,t,o,a))}return Promise.all(n)}))}return function(t){var r=this.json,o=this.extensions,a=this.json.scenes[t],i=new n.Group;a.name&&(i.name=a.name),U(i,a),a.extensions&&D(o,i,a);for(var s=a.nodes||[],l=[],u=0,c=s.length;u<c;u++)l.push(e(s[u],i,r,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>x});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=r("./src/js/app/components/renderer.js"),i=r("./src/js/app/components/label.js"),s=r("./src/js/app/components/camera.js"),l=r("./src/js/app/components/light.js"),u=r("./src/js/app/components/controls.js"),c=(r("./src/js/app/components/geometry.js"),r("./src/js/app/components/environment.js")),d=r("./src/js/app/helpers/meshHelper.js"),f=r("./src/js/app/model/texture.js"),p=(r("./src/js/app/model/model.js"),r("./src/js/app/managers/interaction.js")),m=r("./src/js/app/managers/datGUI.js"),h=r("./src/js/app/managers/mqttClient.js"),y=r("./src/js/data/config.js");function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==g(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===g(a)?a:String(a)),n)}var o,a}r("./node_modules/three-stl-loader/index.js")(n);var b,w,S,T=new n.Raycaster,M=new n.Vector2,x=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new n.Clock,this.scene=new n.Scene,window.scene=this.scene,window.scene_scale=y.default.scale,window.selectedReality=y.default.selectedReality,this.scene.fog=new n.FogExp2(y.default.fog.color,y.default.fog.near),this.mqtt=new h.default(this.scene),window.devicePixelRatio&&(y.default.dpr=window.devicePixelRatio),this.renderer=new a.default(this.scene,t),b=new s.default(this.renderer.threeRenderer),this.controls=new u.default(b.threeCamera,t),this.light=new l.default(this.scene),this.camera=b;["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),y.default.isDev&&y.default.isShowingStats&&(this.stats=new Stats,this.container.appendChild(this.stats.dom)),y.default.isShowingLables&&(this.labelRenderer=(0,i.default)(),this.container.appendChild(this.labelRenderer.domElement)),y.default.isDev&&(this.gui=new m.default(this)),this.texture=new f.default,this.texture.load().then((function(){r.manager=new n.LoadingManager,r.environment=new c.default,y.default.isDev&&(r.gui.load(r),r.gui.show()),r.manager.onProgress=function(e,t,r){console.log("".concat(e,": ").concat(t," ").concat(r))},r.manager.onLoad=function(){console.log("Loading complete!"),new p.default(r.renderer.threeRenderer,r.scene,b.threeCamera,r.controls.threeControls),y.default.isDev&&(r.meshHelper=new d.default(r.scene,r.model.obj),y.default.mesh.enableHelper&&r.meshHelper.enable()),y.default.isLoaded=!0,r.container.querySelector("#loading").style.display="none"}})),this.render(),this.container.querySelector("#loading").style.display="none",window.addEventListener("click",this.onDocumentMouseDown,!1)}var t,r,g;return t=e,(r=[{key:"onDocumentMouseDown",value:function(e){e.preventDefault(),M.x=e.clientX/window.innerWidth*2-1,M.y=-e.clientY/window.innerHeight*2+1,T.setFromCamera(M,b.threeCamera);var t=T.intersectObjects(scene.children);if(t.length>0){var r=t[0].object;w&&w.material.setValues({opacity:w.currentOpacity}),S=(w=r).children[0],w.currentOpacity=w.material.opacity,w.labelsVisibility=w.material.labelVisibility,void 0!==S&&void 0!==S.visible&&y.default.isShowingLables&&(S.visible=!S.visible),w.material.selected=!w.material.selected,w.name.startsWith("Obstacle")||w.name.startsWith("Robot")&&(w.material.selected?w.material.setValues({opacity:.5}):w.material.setValues({opacity:1}),void 0!==w.clickEvent&&w.clickEvent(w))}else w&&w.material.setValues({opacity:w.currentOpacity}),w=null}},{key:"onDocumentMouseMove",value:function(e){e.preventDefault(),M.x=e.clientX/window.innerWidth*2-1,M.y=-e.clientY/window.innerHeight*2+1,T.setFromCamera(M,b.threeCamera);var t=T.intersectObjects(scene.children,!0);if(t.length>0){var r=t[0].object;w!==r&&(w&&w.material.setValues({opacity:w.currentOpacity}),S=(w=r).children[0],w.currentOpacity=w.material.opacity,w.currentColor=w.material.opacity,w.material.setValues({color:253948,opacity:.75}))}else w&&w.material.setValues({opacity:1,color:w.material.userData.originalColor}),w=null}},{key:"render",value:function(){this.renderer.render(this.scene,b.threeCamera),y.default.isShowingLables?this.labelRenderer.domElement.hidden=!1:this.labelRenderer.domElement.hidden=!0,this.labelRenderer.render(this.scene,b.threeCamera),o.default.update(),this.controls.threeControls.update(),b.threeCamera.updateMatrixWorld(),y.default.isDev&&y.default.isShowingStats&&this.stats.update(),requestAnimationFrame(this.render.bind(this))}}])&&v(t.prototype,r),g&&v(t,g),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/datGUI.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./src/js/data/config.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw a}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(a=n.key,i=void 0,i=function(e,t){if("object"!==o(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===o(i)?i:String(i)),n)}var a,i}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.gui.useLocalStorage=!0,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,r,o;return t=e,(r=[{key:"load",value:function(e,t){var r=this;this.gui.add(n.default,"isShowingRobotSnapshots").name("Robot Snapshots").onChange((function(e){n.default.isShowingRobotSnapshots=e,(0,n.saveConfig)(n.default)}));var o=this.gui.addFolder("Labels");o.add(n.default.labelsVisibility,"obstacles").name("Obstacle Labels").onChange((function(e){r.toggleLabels(r.scene.children,"Obstacle",e)})),o.add(n.default.labelsVisibility,"robots").name("Robot Labels").onChange((function(e){r.toggleLabels(r.scene.children,"Robot",e)}));var a=this.gui.addFolder("Reality");a.add(n.default.selectedRealities,"real").name("Physical Reality").listen().onChange((function(e){r.toggleReality("real","R")})),a.add(n.default.selectedRealities,"virtual").name("Virtual Reality").listen().onChange((function(e){r.toggleReality("virtual","V")}));var i=this.gui.addFolder("Other");i.add(n.default.controls,"autoRotate").name("Auto Rotate").listen().onChange((function(e){n.default.controls.autoRotate=e,(0,n.saveConfig)(n.default),location.reload()})),i.add(n.default.controls,"autoRotateSpeed").min(-5).max(5).name("Auto Rotate Speed").listen().onChange((function(e){n.default.controls.autoRotateSpeed=e,(0,n.saveConfig)(n.default)})),this.gui.close()}},{key:"toggleLabels",value:function(e,t,r){if((0,n.saveConfig)(n.default),Array.isArray(e)&&void 0!==t&&""!==t){var o,i=a(e);try{for(i.s();!(o=i.n()).done;){var s=o.value;s.name.startsWith(t)&&(s.children[0].visible=r)}}catch(e){i.e(e)}finally{i.f()}}}},{key:"toggleReality",value:function(e,t){var r=scene.children;(0,n.saveConfig)(n.default),Object.entries(r).forEach((function(e){e[1].name;var t=e[1].reality;void 0!==t&&"R"===t?e[1].material.opacity=n.default.selectedRealities.real?1:n.default.hiddenOpacity:void 0!==t&&"V"===t&&(e[1].material.opacity=n.default.selectedRealities.virtual?1:n.default.hiddenOpacity)}))}},{key:"show",value:function(){this.gui.show()}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&s(t.prototype,r),o&&s(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./src/js/utils/keyboard.js"),o=r("./src/js/utils/helpers.js"),a=r("./src/js/data/config.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var l=function(){function e(t,r,a,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.camera=a,this.controls=i,this.timeout=null,this.keyboard=new n.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return o.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,r,i;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),a.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),a.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){a.default.isMouseMoving=!1}),200),a.default.isMouseMoving=!0}}])&&s(t.prototype,r),i&&s(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/mqttClient.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>L});r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js");var n=r("./node_modules/paho-mqtt/paho-mqtt.js"),o=r.n(n),a=r("./src/js/data/config.js"),i=r("./src/js/app/components/obstacle.js"),s=r("./src/js/app/components/robot.js"),l=r("./src/js/app/helpers/urlHelper.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,s=[],l=!0,u=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){u=!0,o=e}finally{try{if(!l&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(u)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==u(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===u(a)?a:String(a)),n)}var o,a}var p="robot/create",m="robot/delete",h="robot/msg/broadcast",y="localization/data",g="localization/update",v="localization/data/?",b="obstacles/?",w="obstacles",S="obstacles/delete",T="obstacles/delete/all",M="output/neopixel",x="mgt/visualizer",j="mgt/robots/?",L=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.robot=new s.default(t),this.obstacles=new i.default(t);var n=(0,l.getCredentials)();if(this.updateChannel(),-1===n)alert("Unauthorized access! The Visualizer will not work properly.");else{var u=n.username,c=n.password,d="client_"+Math.random().toString(36).substring(2,15);this.client=new(o().Client)(a.default.mqtt.server,a.default.mqtt.port,a.default.mqtt.path,d),window.mqtt=this.client,window.channel=void 0===n.channel?"v1":n.channel,this.client.connect({userName:u,password:c,reconnect:!0,useSSL:!0,cleanSession:!1,onSuccess:function(){console.log("MQTT: connected"),r.subscribe(y),r.subscribe(g),r.subscribe(p),r.subscribe(m),r.subscribe(h),r.subscribe(M),r.subscribe(w),r.subscribe(S),r.subscribe(T),r.subscribe(x),r.subscribe(j),r.publish(b,"M"),r.publish(v,a.default.mixedReality.robots),window.robot=r.robot,window.obstacles=r.obstacles,r.client.onMessageArrived=r.onMessageArrived,r.client.onConnectionLost=r.onConnectionLost},onFailure:function(){console.log("MQTT: connection failed"),alert("MQTT: connection failed!")}})}}var t,r,n;return t=e,(r=[{key:"updateChannel",value:function(){}},{key:"onConnectionLost",value:function(e){0!==e.errorCode&&(console.log("MQTT: onConnectionLost:"+e.errorMessage),console.log("MQTT: reconnecting"))}},{key:"onMessageArrived",value:function(e){var t=e.payloadString.trim(),r=e.destinationName,n=r.substring(r.indexOf("/")+1);if(n==p)try{var o=JSON.parse(t);window.robot.create(o.id,o.x,o.y,o.heading,o.reality)}catch(e){console.error(e)}else if(n==m)try{var i=JSON.parse(t);window.robot.delete(i.id)}catch(e){console.error(e)}else if(n==g||n==y)try{var s=JSON.parse(t),l=a.default.mixedReality.robots;if(null!=s)for(var u in s){var d=s[u],f=d.id,v=d.x,b=d.y,L=d.heading,E=null==s[u].reality?"V":s[u].reality;E===l||"M"===l?null==window.robot.exists(f)?window.robot.create(f,v,b,L,E):(window.robot.move(f,v,b,L),window.robot.setReality(f,E)):robot.delete(f)}}catch(e){console.error(e)}else if(n==w)try{var R=JSON.parse(t);window.obstacles.createList(R)}catch(e){console.error(e)}else if(n==S){var A=JSON.parse(t);console.log(A),window.obstacles.deleteIfExists(A.id)}else if(n==T)window.obstacles.deleteAll();else if(n==M)try{var C=JSON.parse(t);window.robot.changeColor(C.id,C.R,C.G,C.B,C.ambient)}catch(e){console.error(e)}else if(n==h){if("ID? -1"!=t){var O="Broadcast Message: "+t.split(" ")[0],_=1e3+95*t.length,P=document.querySelector("#msg-box");P.innerHTML=O,P.style.display="block",setTimeout((function(){document.querySelector("#msg-box").style.display="none"}),_)}}else if(n==x)if("REFRESH"===t)console.log("page refresh request"),location.reload();else if(t.startsWith("MSG")){var k="Notice: "+t.substring(4),I=2e3+95*k.length,N=document.querySelector("#msg-box");N.innerHTML=k,N.style.display="block",setTimeout((function(){document.querySelector("#msg-box").style.display="none"}),I)}else console.log(">Management:",t);else if(n==j){var G=JSON.parse(t);if(console.log("Robot:Snapshot",G),-1!==G){var D,U=0,H=document.querySelector("#msg-box"),B=document.getElementById("msg-content"),F=document.createElement("div");F.setAttribute("id","msg-content");var z=document.createElement("h3");for(var V in z.textContent="Robot [".concat(G.id,"] Snapshot"),F.appendChild(z),G)if(Object.prototype.hasOwnProperty.call(G,V)){if(D=0===U?document.createElement("h4"):document.createElement("p"),"data"===V)for(var K=0,X=Object.entries(G.data);K<X.length;K++){var W=c(X[K],2),Y=W[0],q=W[1];D.textContent="".concat(Y,": ").concat(q)}else D.textContent="".concat(V,": ").concat(JSON.stringify(G[V]));F.appendChild(D),U+=1}H.replaceChild(F,B),H.style.display="block",H.style.opacity="0.5",setTimeout((function(){H.style.opacity="1.0",H.style.display="none"}),6e3)}}}},{key:"subscribe",value:function(e,t){var r=window.channel+"/"+e;this.client.subscribe(r),console.log("MQTT: subscribed",r),null!=t&&t()}},{key:"publish",value:function(e,t,r){var n=new(o().Message)(t),a=window.channel+"/"+e;n.destinationName=a,this.client.send(n),console.log("MQTT: published",a),null!=r&&r()}}])&&f(t.prototype,r),n&&f(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/model/model.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/components/material.js"),a=r("./src/js/utils/helpers.js"),i=r("./src/js/utils/bufferGeometryUtils.js"),s=r("./src/js/app/loaders/GLTFLoader.js"),l=r("./src/js/data/config.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==u(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===u(a)?a:String(a)),n)}var o,a}var d=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=n,this.manager=r,this.obj=null,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;switch(e){case"gltf":new s.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){var r,o=e.scene;l.default.shadow.enabled&&o.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,r=e)})),t.obj=r,i.BufferGeometryUtils.computeTangents(r.geometry);var a=new n.Group;a.scale.multiplyScalar(.25),t.scene.add(a),t.ref=a,a.updateMatrixWorld(!0),a.add(r),t.scene.add(o)}),a.default.logProgress(),a.default.logError());break;case"object":new n.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){e.traverse((function(e){if(e instanceof n.Mesh){var r=new o.default(16777215).standard;r.map=t.textures.UV,e.material=r,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),t.obj=e,t.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),t.scene.add(e)}),a.default.logProgress(),a.default.logError())}}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&c(t.prototype,r),u&&c(t,u),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/es6-promise/dist/es6-promise.js"),a=r("./src/js/utils/helpers.js"),i=r("./src/js/data/config.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==s(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===s(a)?a:String(a)),n)}var o,a}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,s;return t=e,(r=[{key:"load",value:function(){var e=this,t=new n.TextureLoader,r=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new o.Promise((function(o,i){t.load(e.image,(function(t){t.anisotropy=r;var a={};a[e.name]=t,a[e.name]instanceof n.Texture&&o(a)}),a.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),o.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&l(t.prototype,r),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/data/config.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>f,saveConfig:()=>d});var n,o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===a(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u={scale:1,arena:{size:180,minX:-90,maxX:90,minY:-90,maxY:90},mqtt:{server:localStorage.getItem("pera-swarm-server")||"webservices.ceykod.com",port:parseInt(localStorage.getItem("pera-swarm-port"))||8883,path:localStorage.getItem("pera-swarm-path")||"/mqtt",channel:localStorage.getItem("pera-swarm-channel")||"v1"},mixedReality:{obstacles:"M",robots:"M"},selectedReality:"M",selectedRealities:{real:!0,virtual:!0},hiddenOpacity:.3,isDev:!0,isShowingStats:!0,isShowingLables:!0,labelsVisibility:{obstacles:!1,robots:!1},isShowingRobotSnapshots:!0,isLoaded:!1,isTweening:!1,isRotating:!1,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:o.default.Easing.Quadratic.InOut,duration:500,texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!1,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:25e-5},camera:{fov:50,near:50,far:1e3,aspect:1,posX:0,posY:0,posZ:0},controls:{autoRotate:!1,autoRotateSpeed:-1.5,rotateSpeed:1.5,zoomSpeed:.8,minDistance:100,maxDistance:800,minPolarAngle:0,maxPolarAngle:7/16*Math.PI,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!1,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}},c=localStorage.getItem(document.location.href+".config");n=null!=c?JSON.parse(c):u;var d=function(e){localStorage.setItem(document.location.href+".config",JSON.stringify(s(s({},u),e)))};const f=n},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{r.r(t),r.d(t,{BufferGeometryUtils:()=>o});var n=r("./node_modules/three/build/three.module.js"),o={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var o=t.array,a=r.position.array,i=r.normal.array,s=r.uv.array,l=a.length/3;void 0===r.tangent&&e.setAttribute("tangent",new n.BufferAttribute(new Float32Array(4*l),4));for(var u=r.tangent.array,c=[],d=[],f=0;f<l;f++)c[f]=new n.Vector3,d[f]=new n.Vector3;var p=new n.Vector3,m=new n.Vector3,h=new n.Vector3,y=new n.Vector2,g=new n.Vector2,v=new n.Vector2,b=new n.Vector3,w=new n.Vector3,S=e.groups;0===S.length&&(S=[{start:0,count:o.length}]);f=0;for(var T=S.length;f<T;++f)for(var M=P=(_=S[f]).start,x=P+_.count;M<x;M+=3)k(o[M+0],o[M+1],o[M+2]);var j,L,E,R=new n.Vector3,A=new n.Vector3,C=new n.Vector3,O=new n.Vector3;for(f=0,T=S.length;f<T;++f){var _,P;for(M=P=(_=S[f]).start,x=P+_.count;M<x;M+=3)I(o[M+0]),I(o[M+1]),I(o[M+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function k(e,t,r){p.fromArray(a,3*e),m.fromArray(a,3*t),h.fromArray(a,3*r),y.fromArray(s,2*e),g.fromArray(s,2*t),v.fromArray(s,2*r),m.sub(p),h.sub(p),g.sub(y),v.sub(y);var n=1/(g.x*v.y-v.x*g.y);isFinite(n)&&(b.copy(m).multiplyScalar(v.y).addScaledVector(h,-g.y).multiplyScalar(n),w.copy(h).multiplyScalar(g.x).addScaledVector(m,-v.x).multiplyScalar(n),c[e].add(b),c[t].add(b),c[r].add(b),d[e].add(w),d[t].add(w),d[r].add(w))}function I(e){C.fromArray(i,3*e),O.copy(C),L=c[e],R.copy(L),R.sub(C.multiplyScalar(C.dot(L))).normalize(),A.crossVectors(O,L),E=A.dot(d[e]),j=E<0?-1:1,u[4*e]=R.x,u[4*e+1]=R.y,u[4*e+2]=R.z,u[4*e+3]=j}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,o=new Set(Object.keys(e[0].attributes)),a=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,u=new n.BufferGeometry,c=0,d=0;d<e.length;++d){var f=e[d],p=0;if(r!==(null!==f.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var m in f.attributes){if(!o.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+m+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[m]&&(i[m]=[]),i[m].push(f.attributes[m]),p++}if(p!==o.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==f.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var m in f.morphAttributes){if(!a.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[m]&&(s[m]=[]),s[m].push(f.morphAttributes[m])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(f.userData),t){var h;if(r)h=f.index.count;else{if(void 0===f.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;h=f.attributes.position.count}u.addGroup(c,h,d),c+=h}}if(r){var y=0,g=[];for(d=0;d<e.length;++d){for(var v=e[d].index,b=0;b<v.count;++b)g.push(v.getX(b)+y);y+=e[d].attributes.position.count}u.setIndex(g)}for(var m in i){var w=this.mergeBufferAttributes(i[m]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" attribute."),null;u.setAttribute(m,w)}for(var m in s){var S=s[m][0].length;if(0===S)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[m]=[];for(d=0;d<S;++d){var T=[];for(b=0;b<s[m].length;++b)T.push(s[m][b][d]);var M=this.mergeBufferAttributes(T);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" morphAttribute."),null;u.morphAttributes[m].push(M)}}return u},mergeBufferAttributes:function(e){for(var t,r,o,a=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===o&&(o=s.normalized),o!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;a+=s.array.length}var l=new t(a),u=0;for(i=0;i<e.length;++i)l.set(e[i].array,u),u+=e[i].array.length;return new n.BufferAttribute(l,r,o)},interleaveAttributes:function(e){for(var t,r=0,o=0,a=0,i=e.length;a<i;++a){var s=e[a];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=s.array.length,o+=s.itemSize}var l=new n.InterleavedBuffer(new t(r),o),u=0,c=[],d=["getX","getY","getZ","getW"],f=["setX","setY","setZ","setW"],p=0;for(i=e.length;p<i;p++){var m=(s=e[p]).itemSize,h=s.count,y=new n.InterleavedBufferAttribute(l,m,u,s.normalized);c.push(y),u+=m;for(var g=0;g<h;g++)for(var v=0;v<m;v++)y[f[v]](g,s[d[v]](g))}return c},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var n=e.getAttribute(r);t+=n.count*n.itemSize*n.array.BYTES_PER_ELEMENT}var o=e.getIndex();return t+=o?o.count*o.itemSize*o.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},o=e.getIndex(),a=e.getAttribute("position"),i=o?o.count:a.count,s=0,l=Object.keys(e.attributes),u={},c={},d=[],f=["getX","getY","getZ","getW"],p=0,m=l.length;p<m;p++){u[w=l[p]]=[],(x=e.morphAttributes[w])&&(c[w]=new Array(x.length).fill().map((function(){return[]})))}var h=Math.log10(1/t),y=Math.pow(10,h);for(p=0;p<i;p++){var g=o?o.getX(p):p,v="",b=0;for(m=l.length;b<m;b++)for(var w=l[b],S=(M=e.getAttribute(w)).itemSize,T=0;T<S;T++)v+="".concat(~~(M[f[T]](g)*y),",");if(v in r)d.push(r[v]);else{for(b=0,m=l.length;b<m;b++){w=l[b];var M=e.getAttribute(w),x=e.morphAttributes[w],j=(S=M.itemSize,u[w]),L=c[w];for(T=0;T<S;T++){var E=f[T];if(j.push(M[E](g)),x)for(var R=0,A=x.length;R<A;R++)L[R].push(x[R][E](g))}}r[v]=s,d.push(s),s++}}var C=e.clone();for(p=0,m=l.length;p<m;p++){w=l[p];var O=e.getAttribute(w),_=new O.array.constructor(u[w]);M=new n.BufferAttribute(_,O.itemSize,O.normalized);if(C.setAttribute(w,M),w in c)for(b=0;b<c[w].length;b++){var P=e.morphAttributes[w][b],k=(_=new P.array.constructor(c[w][b]),new n.BufferAttribute(_,P.itemSize,P.normalized));C.morphAttributes[w][b]=k}}return C.setIndex(d),C},toTrianglesDrawMode:function(e,t){if(t===n.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===n.TriangleFanDrawMode||t===n.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var o=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)o.push(i);e.setIndex(o),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,n;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(n=this.getWebGLErrorMessage()).id=r,t.appendChild(n)}}},"./src/js/utils/helpers.js":(e,t,r)=>{function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(a=o.key,i=void 0,i=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===n(i)?i:String(i)),o)}var a,i}r.r(t),r.d(t,{default:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"throttle",value:function(e,t,r){var n,o;return t||(t=250),function(){var a=r||this,i=+new Date,s=arguments;n&&i<n+t?(clearTimeout(o),o=setTimeout((function(){n=i,e.apply(a,s)}),t)):(n=i,e.apply(a,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(n){e[t]=r[n],e.needsUpdate=!0}}}],(r=null)&&o(t.prototype,r),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(a=o.key,i=void 0,i=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===n(i)?i:String(i)),o)}var a,i}r.r(t),r.d(t,{default:()=>i});var a={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},i=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,n;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var n=t[r],o=!1;if(o=-1!=Object.keys(a).indexOf(n)?this.keyCodes[a[n]]:this.keyCodes[n.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=a,n=Object.keys(r),o=t.split("+"),i=0;i<o.length;i++){var s=o[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==n.indexOf(s)?l=e.keyCode===r[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&o(t.prototype,r),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/css/app.scss":(e,t,r)=>{r.r(t)}},e=>{e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJtYXBwaW5ncyI6Ijs2UUFRSUEsUUFBUUMsSUFBSSwyQ0FDWkMsRUFBQUEsUUFBQUEsT0FBZSxFQUduQixXQUVJLEdBQUtDLEVBQUFBLFFBQUFBLE1BRUUsQ0FDSCxJQUFNQyxFQUFZQyxTQUFTQyxlQUFlLGdCQUMxQyxJQUFJQyxFQUFBQSxRQUFLSCxFQUNiLE1BSklELEVBQUFBLFFBQUFBLG9CQUtSLENBRUFLLGszQkNsQkEsSUFDcUJDLEVBQU0sV0FDdkIsV0FBWUMsR0FBVSxpSEFDbEIsSUFBTUMsRUFBUUQsRUFBU0UsV0FBV0QsTUFDNUJFLEVBQVNILEVBQVNFLFdBQVdDLE9BR25DQyxLQUFLQyxZQUFjLElBQUlDLEVBQUFBLGtCQUNuQmQsRUFBQUEsUUFBQUEsT0FBQUEsSUFDQVMsRUFBUUUsRUFDUlgsRUFBQUEsUUFBQUEsT0FBQUEsS0FDQUEsRUFBQUEsUUFBQUEsT0FBQUEsS0FFSlksS0FBS0MsWUFBWUUsU0FBU0MsSUFBSWhCLEVBQUFBLFFBQUFBLE9BQUFBLEtBQW9CQSxFQUFBQSxRQUFBQSxPQUFBQSxLQUFvQkEsRUFBQUEsUUFBQUEsT0FBQUEsTUFDdEVZLEtBQUtDLFlBQVlJLEdBQUdELElBQUksRUFBRyxFQUFHLEdBRzlCSixLQUFLTSxXQUFXVixHQUdoQlcsT0FBT0MsaUJBQWlCLFVBQVUsa0JBQU0sRUFBS0YsV0FBV1YsRUFBUyxJQUFFLEVBQ3ZFLFdBUUMsU0FSQSw4QkFFRCxTQUFXQSxHQUVQSSxLQUFLQyxZQUFZUSxPQUFTYixFQUFTRSxXQUFXRCxNQUFRRCxFQUFTRSxXQUFXQyxPQUcxRUMsS0FBS0MsWUFBWVMsd0JBQ3JCLG9GQUFDLEVBNUJzQixxNEJDQTNCLElBQ3FCQyxFQUFRLFdBQ3pCLFdBQVlDLEVBQVF0QixnR0FBVyxTQUMzQlUsS0FBS2EsY0FBZ0IsSUFBSUMsRUFBQUEsY0FBY0YsRUFBUXRCLEdBRS9DVSxLQUFLTixNQUNULFdBcUNDLFNBckNBLHdCQUVELFdBQ0lNLEtBQUthLGNBQWNFLE9BQU9YLElBQUloQixFQUFBQSxRQUFBQSxTQUFBQSxPQUFBQSxFQUEwQkEsRUFBQUEsUUFBQUEsU0FBQUEsT0FBQUEsRUFBMEJBLEVBQUFBLFFBQUFBLFNBQUFBLE9BQUFBLEdBQ2xGWSxLQUFLYSxjQUFjRyxXQUFhNUIsRUFBQUEsUUFBQUEsU0FBQUEsV0FDaENZLEtBQUthLGNBQWNJLGdCQUFrQjdCLEVBQUFBLFFBQUFBLFNBQUFBLGdCQUNyQ1ksS0FBS2EsY0FBY0ssWUFBYzlCLEVBQUFBLFFBQUFBLFNBQUFBLFlBQ2pDWSxLQUFLYSxjQUFjTSxVQUFZL0IsRUFBQUEsUUFBQUEsU0FBQUEsVUFDL0JZLEtBQUthLGNBQWNPLFlBQWNoQyxFQUFBQSxRQUFBQSxTQUFBQSxZQUNqQ1ksS0FBS2EsY0FBY1EsWUFBY2pDLEVBQUFBLFFBQUFBLFNBQUFBLFlBQ2pDWSxLQUFLYSxjQUFjUyxjQUFnQmxDLEVBQUFBLFFBQUFBLFNBQUFBLGNBQ25DWSxLQUFLYSxjQUFjVSxjQUFnQm5DLEVBQUFBLFFBQUFBLFNBQUFBLGNBQ25DWSxLQUFLYSxjQUFjVyxjQUFnQnBDLEVBQUFBLFFBQUFBLFNBQUFBLGNBQ25DWSxLQUFLYSxjQUFjWSxXQUFhckMsRUFBQUEsUUFBQUEsU0FBQUEsV0FDaENZLEtBQUthLGNBQWNhLGNBQWdCdEMsRUFBQUEsUUFBQUEsU0FBQUEsY0FFbkNZLEtBQUthLGNBQWNjLGNBQWUsRUFHSyxNQUFuQ3ZDLEVBQUFBLFFBQUFBLFNBQUFBLGdCQUNBWSxLQUFLYSxjQUFjZSxpQkFBa0IsSUFFckM1QixLQUFLYSxjQUFjZSxnQkFBa0J4QyxFQUFBQSxRQUFBQSxTQUFBQSxnQkFJRixNQUFuQ0EsRUFBQUEsUUFBQUEsU0FBQUEsZ0JBQ0FZLEtBQUthLGNBQWNnQixnQkFBa0JDLElBRXJDOUIsS0FBS2EsY0FBY2dCLGdCQUFrQnpDLEVBQUFBLFFBQUFBLFNBQUFBLGVBUTdDLG9GQUFDLEVBMUN3QixtK0JDSlUsSUFFbEIyQyxFQUFXLEdBQzVCLDBHQUFjLFNBQ1Y3QyxRQUFRQyxJQUFJLHVCQUFELE9BQXdCNkMsWUFBVyx1QkFBZTVDLEVBQUFBLFFBQUFBLE1BQUFBLE9BRTdELElBQUk2QyxFQUFXLElBQUkvQixFQUFBQSxvQkFBMEJkLEVBQUFBLFFBQUFBLE1BQUFBLEtBQW1CQSxFQUFBQSxRQUFBQSxNQUFBQSxNQUM1RDhDLEVBQVcsSUFBSWhDLEVBQUFBLGtCQUF3QixDQUN2Q2lDLE1BQU8sU0FDUEMsWUFBWSxJQUVoQkYsRUFBU0csU0FBU0MsY0FBZ0IsSUFBSXBDLEVBQUFBLE1BQVksVUFHbEQsSUFBSXFDLEVBQVMsSUFBSXJDLEVBQUFBLEtBQVcrQixFQUFVQyxHQUN0Q0ssRUFBT0MsTUFBTXBDLElBQUk0QixZQUFhQSxZQUFhQSxhQUMzQ08sRUFBT3BDLFNBQVNDLElBQUksRUFBRyxFQUFHLEdBQzFCbUMsRUFBT0UsZUFBZ0IsRUFDdkJDLE1BQU1DLElBQUlKLEdBR1YsSUFBSUssRUFBTyxJQUFJMUMsRUFBQUEsV0FBaUJkLEVBQUFBLFFBQUFBLE1BQUFBLEtBQW1CeUQsS0FBS0MsTUFBTTFELEVBQUFBLFFBQUFBLE1BQUFBLEtBQW9CLElBQUssRUFBVSxTQUNqR3dELEVBQUtHLFNBQVNDLEdBQUtILEtBQUtJLEdBQUssRUFDN0JMLEVBQUtKLE1BQU1wQyxJQUFJNEIsWUFBYUEsWUFBYUEsYUFDekNZLEVBQUt6QyxTQUFTQyxJQUFJLEVBQUcsRUFBRyxHQUN4QndDLEVBQUtWLFNBQVNnQixRQUFVLElBQ3hCTixFQUFLVixTQUFTaUIsYUFBYyxFQUM1QlQsTUFBTUMsSUFBSUMsRUFDZCw2cERDekJKLElBQ3FCUSxFQUFRLFdBQ3pCLFdBQVlWLGdHQUFPLFNBQ2YxQyxLQUFLMEMsTUFBUUEsRUFDYjFDLEtBQUtxRCxJQUFNLElBQ2YsV0E2QkMsU0E3QkEsdUJBRUQsU0FBS0MsR0FBTSxXQUNQLE1BQWEsVUFBVEEsRUFDTyxTQUFDekQsRUFBT0UsR0FBa0QsSUFBMUN3RCxFQUFnQixVQUFILDZDQUFHLEVBQUdDLEVBQWlCLFVBQUgsNkNBQUcsRUFDdkQsRUFBS0gsSUFBTSxJQUFJbkQsRUFBQUEsY0FBb0JMLEVBQU9FLEVBQVF3RCxFQUFlQyxFQUNyRSxFQUdTLFdBQVRGLEVBQ08sU0FBQ0csR0FBb0QsSUFBNUNGLEVBQWdCLFVBQUgsNkNBQUcsR0FBSUMsRUFBaUIsVUFBSCw2Q0FBRyxHQUNqRCxFQUFLSCxJQUFNLElBQUluRCxFQUFBQSxlQUFxQnVELEVBQVFGLEVBQWVDLEVBQy9ELE9BSEosQ0FLSixHQUFDLG1CQUVELFNBQU1yRCxFQUFVNEMsR0FBVSxRQUNoQmIsRUFBVyxJQUFJd0IsRUFBQUEsUUFBUyxVQUFVQyxTQUNsQ0MsRUFBTyxJQUFJMUQsRUFBQUEsS0FBV0YsS0FBS3FELElBQUtuQixJQUd0QyxFQUFBMEIsRUFBS3pELFVBQVNDLElBQUcsVUFBSUQsS0FDckIsRUFBQXlELEVBQUtiLFVBQVMzQyxJQUFHLFVBQUkyQyxJQUVqQjNELEVBQUFBLFFBQUFBLE9BQUFBLFVBQ0F3RSxFQUFLbkIsZUFBZ0IsR0FHekJ6QyxLQUFLMEMsTUFBTUMsSUFBSWlCLEVBQ25CLHFGQUFDLEVBakN3Qix1TkNGZCxTQUFTLElBQ3BCLElBQU1oRSxFQUFXLElBQUlpRSxFQUFBQSxjQVlyQixPQVhBakUsRUFBU2tFLFFBQVF2RCxPQUFPd0QsV0FBWXhELE9BQU95RCxhQUMzQ3BFLEVBQVNFLFdBQVdtRSxNQUFNOUQsU0FBVyxXQUNyQ1AsRUFBU0UsV0FBV21FLE1BQU1DLElBQU0sTUFDaEN0RSxFQUFTdUUsZ0JBQWtCL0UsRUFBQUEsUUFBQUEsZ0JBQzNCUSxFQUFTd0Usd0JBQTBCaEYsRUFBQUEsUUFBQUEsaUJBQUFBLFVBQ25DUSxFQUFTeUUscUJBQXVCakYsRUFBQUEsUUFBQUEsaUJBQUFBLE9BQ2hDUSxFQUFTVSxXQUFhLFdBQ2xCVixFQUFTa0UsUUFBUXZELE9BQU93RCxXQUFZeEQsT0FBT3lELFlBQy9DLEVBQ0F6RSxTQUFTaUIsaUJBQWlCLG9CQUFvQixrQkFBTVosRUFBU1UsWUFBWSxJQUFFLEdBQzNFQyxPQUFPQyxpQkFBaUIsVUFBVSxrQkFBTVosRUFBU1UsWUFBWSxJQUFFLEdBQ3hEVixDQUNYLENBRU8sSUFBTTBFLEVBQVcsU0FBQ0MsRUFBUUMsRUFBUVosRUFBTWEsR0FDM0MsUUFBYUMsSUFBVGQsRUFBb0IsQ0FDcEIsSUFBTWUsRUFBVXBGLFNBQVNxRixjQUFjLE9BQ3ZDRCxFQUFRRSxVQUFZLFFBR3BCRixFQUFRRyxZQUFjTixFQUFPTyxLQUFPLEtBQU9uQixFQUFLb0IsUUFBVSxJQUUxREwsRUFBUVYsTUFBTWdCLFVBQVksU0FDMUIsSUFBTUMsRUFBZSxJQUFJQyxFQUFBQSxZQUFZUixHQUNyQ08sRUFBYUgsS0FBTyxTQUFILE9BQVlQLEVBQU9ZLEdBQUUsS0FDdENGLEVBQWEvRSxTQUFTQyxJQUFJLEVBQUcsRUFBRyxHQUNoQzhFLEVBQWFHLFFBQVVaLEVBQ3ZCYixFQUFLakIsSUFBSXVDLEdBQ1R0QixFQUFLMEIsWUFBYyxXQUNmMUIsRUFBSzJCLE9BQU9MLEVBQ2hCLENBQ0osQ0FDSixFQUVhSSxFQUFjLFNBQUMxQixRQUNYYyxJQUFUZCxRQUEyQ2MsSUFBckJkLEVBQUswQixhQUMzQjFCLEVBQUswQixhQUViLGczQkN4Q0EsSUFDcUJFLEVBQUssV0FDdEIsV0FBWTlDLGdHQUFPLFNBQ2YxQyxLQUFLMEMsTUFBUUEsRUFFYjFDLEtBQUtOLE1BQ1QsV0F5RUMsU0F6RUEsd0JBRUQsV0FFSU0sS0FBS3lGLGFBQWUsSUFBSXZGLEVBQUFBLGFBQW1CZCxFQUFBQSxRQUFBQSxhQUFBQSxPQUMzQ1ksS0FBS3lGLGFBQWFKLFFBQVVqRyxFQUFBQSxRQUFBQSxhQUFBQSxRQUc1QlksS0FBSzBGLFdBQWEsSUFBSXhGLEVBQUFBLFdBQ2xCZCxFQUFBQSxRQUFBQSxXQUFBQSxNQUNBQSxFQUFBQSxRQUFBQSxXQUFBQSxVQUNBQSxFQUFBQSxRQUFBQSxXQUFBQSxVQUVKWSxLQUFLMEYsV0FBV3ZGLFNBQVNDLElBQUloQixFQUFBQSxRQUFBQSxXQUFBQSxFQUFxQkEsRUFBQUEsUUFBQUEsV0FBQUEsRUFBcUJBLEVBQUFBLFFBQUFBLFdBQUFBLEdBQ3ZFWSxLQUFLMEYsV0FBV0wsUUFBVWpHLEVBQUFBLFFBQUFBLFdBQUFBLFFBRzFCWSxLQUFLMkYsaUJBQW1CLElBQUl6RixFQUFBQSxpQkFDeEJkLEVBQUFBLFFBQUFBLGlCQUFBQSxNQUNBQSxFQUFBQSxRQUFBQSxpQkFBQUEsV0FFSlksS0FBSzJGLGlCQUFpQnhGLFNBQVNDLElBQzNCaEIsRUFBQUEsUUFBQUEsaUJBQUFBLEVBQ0FBLEVBQUFBLFFBQUFBLGlCQUFBQSxFQUNBQSxFQUFBQSxRQUFBQSxpQkFBQUEsR0FFSlksS0FBSzJGLGlCQUFpQk4sUUFBVWpHLEVBQUFBLFFBQUFBLGlCQUFBQSxRQUdoQ1ksS0FBSzJGLGlCQUFpQkMsV0FBYXhHLEVBQUFBLFFBQUFBLE9BQUFBLFFBQ25DWSxLQUFLMkYsaUJBQWlCRSxPQUFPQyxLQUFPMUcsRUFBQUEsUUFBQUEsT0FBQUEsS0FDcENZLEtBQUsyRixpQkFBaUJFLE9BQU9qRixPQUFPbUYsS0FBTzNHLEVBQUFBLFFBQUFBLE9BQUFBLEtBQzNDWSxLQUFLMkYsaUJBQWlCRSxPQUFPakYsT0FBT29GLElBQU01RyxFQUFBQSxRQUFBQSxPQUFBQSxJQUMxQ1ksS0FBSzJGLGlCQUFpQkUsT0FBT2pGLE9BQU9xRixLQUFPN0csRUFBQUEsUUFBQUEsT0FBQUEsS0FDM0NZLEtBQUsyRixpQkFBaUJFLE9BQU9qRixPQUFPc0YsTUFBUTlHLEVBQUFBLFFBQUFBLE9BQUFBLE1BQzVDWSxLQUFLMkYsaUJBQWlCRSxPQUFPakYsT0FBT3NELElBQU05RSxFQUFBQSxRQUFBQSxPQUFBQSxJQUMxQ1ksS0FBSzJGLGlCQUFpQkUsT0FBT2pGLE9BQU91RixPQUFTL0csRUFBQUEsUUFBQUEsT0FBQUEsT0FDN0NZLEtBQUsyRixpQkFBaUJFLE9BQU9PLFFBQVF2RyxNQUFRVCxFQUFBQSxRQUFBQSxPQUFBQSxTQUM3Q1ksS0FBSzJGLGlCQUFpQkUsT0FBT08sUUFBUXJHLE9BQVNYLEVBQUFBLFFBQUFBLE9BQUFBLFVBRzlDWSxLQUFLcUcsdUJBQXlCLElBQUluRyxFQUFBQSxhQUFtQkYsS0FBSzJGLGlCQUFpQkUsT0FBT2pGLFFBQ2xGWixLQUFLcUcsdUJBQXVCaEIsUUFBVWpHLEVBQUFBLFFBQUFBLE9BQUFBLGNBR3RDWSxLQUFLc0csVUFBWSxJQUFJcEcsRUFBQUEsZ0JBQ2pCZCxFQUFBQSxRQUFBQSxVQUFBQSxNQUNBQSxFQUFBQSxRQUFBQSxVQUFBQSxZQUNBQSxFQUFBQSxRQUFBQSxVQUFBQSxXQUVKWSxLQUFLc0csVUFBVW5HLFNBQVNDLElBQUloQixFQUFBQSxRQUFBQSxVQUFBQSxFQUFvQkEsRUFBQUEsUUFBQUEsVUFBQUEsRUFBb0JBLEVBQUFBLFFBQUFBLFVBQUFBLEdBQ3BFWSxLQUFLc0csVUFBVWpCLFFBQVVqRyxFQUFBQSxRQUFBQSxVQUFBQSxPQUM3QixHQUFDLG1CQUVELFNBQU1tSCxHQUNGLE9BQVFBLEdBQ0osSUFBSyxVQUNEdkcsS0FBSzBDLE1BQU1DLElBQUkzQyxLQUFLeUYsY0FDcEIsTUFFSixJQUFLLGNBQ0R6RixLQUFLMEMsTUFBTUMsSUFBSTNDLEtBQUsyRixrQkFDcEIzRixLQUFLMEMsTUFBTUMsSUFBSTNDLEtBQUtxRyx3QkFDcEIsTUFFSixJQUFLLFFBQ0RyRyxLQUFLMEMsTUFBTUMsSUFBSTNDLEtBQUswRixZQUNwQixNQUVKLElBQUssT0FDRDFGLEtBQUswQyxNQUFNQyxJQUFJM0MsS0FBS3NHLFdBR2hDLG9GQUFDLEVBOUVxQixpOEJDSDFCLElBQ3FCNUMsRUFBUSxHQUN6QixXQUFZdkIsZ0dBQU8sU0FDZm5DLEtBQUt3RyxNQUFRLElBQUl0RyxFQUFBQSxrQkFBd0IsQ0FDckNpQyxNQUFBQSxFQUNBc0UsS0FBTXZHLEVBQUFBLGFBR1ZGLEtBQUsyRCxTQUFXLElBQUl6RCxFQUFBQSxxQkFBMkIsQ0FDM0NpQyxNQUFBQSxFQUNBdUUsUUFBU3hHLEVBQUFBLFlBQ1R5RyxVQUFXLEVBQ1hDLFVBQVcsRUFDWEgsS0FBTXZHLEVBQUFBLGFBR1ZGLEtBQUs2RyxLQUFPLElBQUkzRyxFQUFBQSxrQkFBd0IsQ0FBRTRHLFdBQVcsR0FDekQsNjVCQ2RKLElBQU1DLEVBQWtCLFlBRUhDLEVBQVEsV0FDekIsV0FBWXRFLEVBQU91RSxnR0FBVSxTQUN6QmpILEtBQUswQyxNQUFRQSxFQUNieEQsUUFBUUMsSUFBSSxvQkFBcUJDLEVBQUFBLFFBQUFBLGFBQUFBLGdCQUVoQnNGLElBQWJ1QyxHQUNBQSxHQUVSLFdBZ0xDLFNBOUtELDhCQUNBLFNBQVdDLEdBQVcsV0FDbEJDLE9BQU9DLFFBQVFGLEdBQVdHLFNBQVEsU0FBQ0MsUUFDbkI1QyxJQUFSNEMsR0FFQSxFQUFLQyxPQUFPRCxFQUFJLEdBRXhCLEdBQ0osR0FFQSxvQkFDQSxTQUFPRSxHQUNILElBQU12RixFQUFXakMsS0FBS3lILGVBQWVELEVBQVN2RixVQUN4Q0MsRUFBV2xDLEtBQUswSCxlQUFlRixFQUFTdEYsVUFDOUNBLEVBQVNHLFNBQVNDLGNBQWdCLElBQUlwQyxFQUFBQSxNQUFZLFNBQ2xEZ0MsRUFBU0csU0FBU3NGLGdCQUFrQnZJLEVBQUFBLFFBQUFBLGlCQUEwQkEsRUFBQUEsUUFBQUEsaUJBQUFBLFVBQzlEOEMsRUFBU0csU0FBU3VGLGlCQUFtQjFGLEVBQVMyRixTQUFTQyxTQUN2RDVGLEVBQVM2RixVQUFXLEVBQ3BCN0YsRUFBU2lCLGFBQWMsRUFDdkIsSUFBTWlDLEVBQUtvQyxFQUFTcEMsSUFBTSxJQUFPdkMsS0FBS21GLE1BQU0sSUFBTW5GLEtBQUtvRixVQUVqRGpELEVBQThCTixNQUFwQjhDLEVBQVN4QyxRQUF1QixJQUFNd0MsRUFBU3hDLFFBQ3pEcEIsRUFBTyxJQUFJMUQsRUFBQUEsS0FBVytCLEVBQVVDLEdBSWhDZ0csRUFBWSxPQUFTOUMsRUFBRytDLFdBQVdDLFVBQVUsRUFBRyxHQUFLLE1Bb0IzRCxHQWxCQXhFLEVBQUttQixLQUFPZ0MsRUFBa0IzQixFQUM5QnhCLEVBQUtvQixRQUFVQSxFQUVNLE1BQWpCcEIsRUFBS29CLFFBRUw5QyxFQUFTZ0IsUUFBVTlELEVBQUFBLFFBQUFBLGtCQUFBQSxRQUFtQyxFQUFNQSxFQUFBQSxRQUFBQSxjQUNwQyxNQUFqQndFLEVBQUtvQixVQUVaOUMsRUFBU2dCLFFBQVU5RCxFQUFBQSxRQUFBQSxrQkFBQUEsS0FBZ0MsRUFBTUEsRUFBQUEsUUFBQUEsZUFJN0RZLEtBQUtxSSxlQUFlakQsR0FHcEJwRixLQUFLMEMsTUFBTUMsSUFBSWlCLFFBR1djLElBQXRCOEMsRUFBU3JILFNBQXdCLENBQ2pDLE1BQWlCcUgsRUFBU3JILFNBQWxCNkMsRUFBQyxFQUFEQSxFQUFHc0YsRUFBQyxFQUFEQSxFQUNMQyxFQUFJdkksS0FBS3dJLFdBQVdoQixHQUUxQjVELEVBQUtwQixNQUFNcEMsSUFBSTRCLFlBQWFBLFlBQWFBLGFBQ3pDNEIsRUFBS3pELFNBQVNDLElBQUk0QixZQUFjZ0IsRUFBR2hCLFlBQWNzRyxFQUFHdEcsWUFBY3VHLEVBQ3RFLENBR0EsUUFBMEI3RCxJQUF0QjhDLEVBQVN6RSxTQUF3QixDQUNqQyxNQUFvQnlFLEVBQVN6RSxTQUFyQkMsRUFBQyxFQUFEQSxFQUFHc0YsRUFBQyxFQUFEQSxFQUFHQyxFQUFDLEVBQURBLEVBQ1JFLEdBQVMsR0FBS3pGLEdBQUssSUFBTyxFQUFJSCxLQUFLSSxHQUNuQ3lGLEVBQVFKLEVBQUksSUFBTyxFQUFJekYsS0FBS0ksR0FDNUIwRixFQUFRSixFQUFJLElBQU8sRUFBSTFGLEtBQUtJLEdBRWxDVyxFQUFLYixTQUFTM0MsSUFBSXFJLEVBQU1DLEVBQU1DLEVBQ2xDLENBR0l2SixFQUFBQSxRQUFBQSxPQUFBQSxVQUF1QndFLEVBQUtuQixlQUFnQixJQUdoRDZCLEVBQUFBLEVBQUFBLFVBQVN5QyxFQUFpQixDQUFFM0IsR0FBSW9DLEVBQVNwQyxHQUFJTCxLQUFNbUQsR0FBYXRFLEVBQU14RSxFQUFBQSxRQUFBQSxpQkFBQUEsV0FFdEVGLFFBQVFDLElBQUksV0FBWXlFLEVBQUttQixLQUNqQyxHQUFDLDRCQUVELFNBQWU2RCxHQUNYLEdBQWNsRSxNQUFWa0UsRUFBRXRGLEtBQW1CLE1BQU0sSUFBSXVGLFVBQVUsb0JBRTdDLEdBQWMsZUFBVkQsRUFBRXRGLEtBQ0YsT0FBT3RELEtBQUs4SSxrQkFBa0JGLEVBQUUvSSxNQUFPK0ksRUFBRTdJLE9BQVE2SSxFQUFFRyxPQUNoRCxHQUFjLG9CQUFWSCxFQUFFdEYsS0FDVCxPQUFPdEQsS0FBS2dKLHVCQUF1QkosRUFBRUssVUFBV0wsRUFBRU0sYUFBY04sRUFBRTdJLFFBQy9ELEdBQWMsa0JBQVY2SSxFQUFFdEYsS0FDVCxPQUFPdEQsS0FBS21KLHFCQUFxQlAsRUFBRW5GLFFBRXZDLE1BQU0sSUFBSW9GLFVBQVUsNEJBQ3hCLEdBQUMsK0JBRUQsU0FBa0JoSixFQUFPRSxFQUFRZ0osR0FDN0IsR0FBYXJFLE1BQVQ3RSxFQUFvQixNQUFNLElBQUlnSixVQUFVLHFCQUM1QyxHQUFjbkUsTUFBVjNFLEVBQXFCLE1BQU0sSUFBSThJLFVBQVUsc0JBQzdDLEdBQWFuRSxNQUFUcUUsRUFBb0IsTUFBTSxJQUFJRixVQUFVLHFCQUc1QyxPQUFPLElBQUkzSSxFQUFBQSxZQUFrQkwsRUFBT0UsRUFBUWdKLEVBQ2hELEdBQUMsb0NBRUQsU0FBdUJFLEVBQVdDLEVBQWNuSixHQUM1QyxHQUFpQjJFLE1BQWJ1RSxFQUF3QixNQUFNLElBQUlKLFVBQVUseUJBQ2hELEdBQW9CbkUsTUFBaEJ3RSxFQUEyQixNQUFNLElBQUlMLFVBQVUsNEJBQ25ELEdBQWNuRSxNQUFWM0UsRUFBcUIsTUFBTSxJQUFJOEksVUFBVSxzQkFHN0MsSUFBTXJGLEVBQWlCQSxHQUFrQixFQUNuQzRGLEVBQWlCQSxHQUFrQixHQUV6QyxPQUFPLElBQUlsSixFQUFBQSxpQkFBdUIrSSxFQUFXQyxFQUFjbkosRUFBUXFKLEVBQWdCNUYsRUFDdkYsR0FBQyxrQ0FFRCxTQUFxQkMsR0FDakIsR0FBY2lCLE1BQVZqQixFQUFxQixNQUFNLElBQUlvRixVQUFVLHNCQUc3QyxJQUFNdEYsRUFBZ0JBLEdBQWlCLEdBQ2pDQyxFQUFpQkEsR0FBa0IsR0FDekMsT0FBTyxJQUFJdEQsRUFBQUEsZUFBcUJ1RCxFQUFRRixFQUFlQyxFQUMzRCxHQUFDLDRCQUVELFNBQWU2RixHQUVYLE1BQWMscUJBQVZBLEVBQUUvRixLQUVLLElBQUlwRCxFQUFBQSxrQkFBd0JtSixFQUFFQyxZQUNwQixzQkFBVkQsRUFBRS9GLEtBRUYsSUFBSXBELEVBQUFBLG1CQUF5Qm1KLEVBQUVDLFlBQ3JCLHFCQUFWRCxFQUFFL0YsS0FFRixJQUFJcEQsRUFBQUEsa0JBQXdCbUosRUFBRUMsWUFDcEIsd0JBQVZELEVBQUUvRixLQUVGLElBQUlwRCxFQUFBQSxxQkFBMkJtSixFQUFFQyxhQUNqQ0QsRUFBRS9GLEtBRUYsSUFBSXBELEVBQUFBLHFCQUEyQm1KLEVBQUVDLFlBSWhELEdBQUMsd0JBRUQsU0FBVzlCLEdBRVAsT0FBMkI5QyxNQUF2QjhDLEVBQVNySCxTQUFTb0ksT0FDZTdELElBQTdCOEMsRUFBU3ZGLFNBQVNsQyxPQUVYeUgsRUFBU3ZGLFNBQVNsQyxPQUFTLE9BQ0UyRSxJQUE3QjhDLEVBQVN2RixTQUFTd0IsT0FFbEIrRCxFQUFTdkYsU0FBU3dCLE9BRXRCLEVBRUorRCxFQUFTckgsU0FBU29JLENBQzdCLEdBQUMsNEJBRUQsU0FBZW5ELEdBRVgsSUFBTUwsRUFBT2dDLEVBQWtCM0IsRUFDekJvQyxFQUFXeEgsS0FBSzBDLE1BQU02RyxnQkFBZ0J4RSxRQUMzQkwsSUFBYjhDLElBQ0F4SCxLQUFLMEMsTUFBTTZDLE9BQU9pQyxHQUNsQnRJLFFBQVFDLElBQUksV0FBWTRGLEdBRWhDLEdBQUMsdUJBRUQsV0FBWSxXQUVGeUUsRUFBVXhKLEtBQUswQyxNQUFNK0csU0FDM0J0QyxPQUFPQyxRQUFRb0MsR0FBU25DLFNBQVEsU0FBQ3FDLEdBQzdCLElBQU0zRSxFQUFPMkUsRUFBSSxHQUFTLEtBQ3RCM0UsRUFBSzRFLFdBQVc1QyxLQUNoQjdILFFBQVFDLElBQUksV0FBWTRGLElBQ3hCTyxFQUFBQSxFQUFBQSxhQUFZb0UsRUFBSSxJQUNoQixFQUFLaEgsTUFBTTZDLE9BQU9tRSxFQUFJLElBRTlCLEdBQ0osb0ZBQUMsRUF4THdCLG8zQkNIN0IsSUFDcUJFLEVBQVEsV0FDekIsV0FBWWxILEVBQU9wRCxHQUFXLGlIQUUxQlUsS0FBSzBDLE1BQVFBLEVBQ2IxQyxLQUFLVixVQUFZQSxFQUdqQlUsS0FBSzZKLGNBQWdCLElBQUkzSixFQUFBQSxjQUFvQixDQUFFNEosV0FBVyxJQUcxRDlKLEtBQUs2SixjQUFjRSxjQUFjckgsRUFBTXNILElBQUk3SCxPQUMzQ25DLEtBQUs2SixjQUFjSSxjQUFjMUosT0FBTzJKLGtCQUd4QzVLLEVBQVU2SyxZQUFZbkssS0FBSzZKLGNBQWMvSixZQUd6Q0UsS0FBSzZKLGNBQWNPLFVBQVVDLFNBQVUsRUFDdkNySyxLQUFLNkosY0FBY08sVUFBVTlHLEtBQU9wRCxFQUFBQSxpQkFHcENkLEVBQUFBLFFBQUFBLGNBQXVCWSxLQUFLNkosY0FBY1MsYUFBYUMsbUJBR3ZEdkssS0FBS00sYUFHTGYsU0FBU2lCLGlCQUFpQixvQkFBb0Isa0JBQU0sRUFBS0YsWUFBWSxJQUFFLEdBQ3ZFQyxPQUFPQyxpQkFBaUIsVUFBVSxrQkFBTSxFQUFLRixZQUFZLElBQUUsRUFDL0QsV0FTQyxTQVRBLDhCQUVELFdBQ0lOLEtBQUs2SixjQUFjL0YsUUFBUTlELEtBQUtWLFVBQVVrTCxZQUFheEssS0FBS1YsVUFBVW1MLGFBQzFFLEdBQUMsb0JBRUQsU0FBTy9ILEVBQU85QixHQUVWWixLQUFLNkosY0FBY2EsT0FBT2hJLEVBQU85QixFQUNyQyxvRkFBQyxFQXRDd0IsbTlCQ0M3QixJQUFJK0osRUFBWUMsRUFBUSwyQ0FBUkEsQ0FBNEIxSyxHQUV0QzJLLEVBQWUsU0FFQUMsRUFBSyxXQUN0QixXQUFZcEksR0FBTyxpSEFDZjFDLEtBQUswQyxNQUFRQSxFQUNieEQsUUFBUUMsSUFBSSxpQkFBa0JDLEVBQUFBLFFBQUFBLGFBQUFBLFFBRzlCLElBQU0yTCxFQUFPL0ssS0FDYkEsS0FBS2dMLFNBQVUsRUFDZkMsYUFBWSxZQUNhLElBQWpCLEVBQUtELFVBRUxELEVBQUtHLFFBQ0wsRUFBS0YsU0FBVSxFQUV2QixHQUFHLEtBQ1AsV0EwUEMsU0ExUEEsOEJBRUQsU0FBWTVGLEVBQUkrRixFQUFHQyxFQUFHQyxFQUFHQyxFQUFTckUsR0FDOUIsSUFBSXNFLEVBQUl2TCxLQUFLMEMsTUFBTTZHLGdCQUFnQnNCLEVBQWV6RixHQVFsRCxPQVBTVixNQUFMNkcsR0FDQUEsRUFBRXJKLFNBQVNDLE1BQU1xSixPQUFPTCxFQUFJLElBQUtDLEVBQUksSUFBS0MsRUFBSSxLQUc5QixNQUFacEUsR0FBa0JBLEVBQVMsWUFDWixNQUFaQSxHQUFrQkEsRUFBUyxhQUUvQnNFLENBQ1gsR0FBQyxvQkFFRCxTQUFPbkcsRUFBSXBDLEVBQUdzRixFQUFHbUQsR0FBa0MsSUFBekJ6RyxFQUFVLFVBQUgsNkNBQUcsSUFBS2lDLEVBQVEsdUNBQ3pDc0UsRUFBSXZMLEtBQUswQyxNQUFNNkcsZ0JBQWdCc0IsRUFBZXpGLEdBQzVDc0csRUFBVXRNLEVBQUFBLFFBQUFBLGFBQUFBLE9BMEVoQixPQXhFU3NGLE1BQUw2RyxFQUdJdkcsSUFBWTBHLEdBQXVCLE1BQVpBLEdBR3ZCMUksRUFBSWhCLFlBQWNhLEtBQUs4SSxJQUFJOUksS0FBSytJLElBQUk1SSxFQUFHNUQsRUFBQUEsUUFBQUEsTUFBQUEsTUFBb0JBLEVBQUFBLFFBQUFBLE1BQUFBLE1BQzNEa0osRUFBSXRHLFlBQWNhLEtBQUs4SSxJQUFJOUksS0FBSytJLElBQUl0RCxFQUFHbEosRUFBQUEsUUFBQUEsTUFBQUEsTUFBb0JBLEVBQUFBLFFBQUFBLE1BQUFBLE9BRTlDLElBQUl1TCxHQUNWa0IsS0FBSyw2QkFBNkIsU0FBVTVKLEVBQVVTLEdBRXpELElBRU1SLEVBQVcsSUFBSWhDLEVBQUFBLHFCQUEyQixDQUM1Q2lDLE1BQU8sUUFDUGUsUUFKWSxFQUtaQyxhQUFhLElBRWpCakIsRUFBU0csU0FBU0MsY0FBZ0IsSUFBSXBDLEVBQUFBLE1BQVksU0FDbERnQyxFQUFTRyxTQUFTc0YsZ0JBQWtCdkksRUFBQUEsUUFBQUEsaUJBQTBCQSxFQUFBQSxRQUFBQSxpQkFBQUEsT0FDOUQ4QyxFQUFTNkYsVUFBVyxFQUVwQixJQUFJd0QsRUFBSSxJQUFJckwsRUFBQUEsS0FBVytCLEVBQVVDLEdBQ2pDcUosRUFBRTlJLGVBQWdCLEVBQ2xCOEksRUFBRU8sUUFBVTFHLEVBQ1ptRyxFQUFFeEcsS0FBTzhGLEVBQWV6RixFQUN4Qm1HLEVBQUUvSSxNQUFNcEMsSUFBSTRCLFlBQWFBLFlBQWFBLGFBQ3RDdUosRUFBRXBMLFNBQVNDLElBQUk0QyxFQUFHc0YsRUFBRyxHQUNyQmlELEVBQUV4SSxTQUFTQyxFQUFJLEdBQUs5QyxFQUFBQSxLQUFBQSxRQUNwQnFMLEVBQUV4SSxTQUFTdUYsR0FBS21ELEVBQVUsSUFBTXZMLEVBQUFBLEtBQUFBLFFBQ2hDcUwsRUFBRXZHLFFBQVVBLEVBRUksTUFBWkEsRUFFQTlDLEVBQVNnQixRQUFVOUQsRUFBQUEsUUFBQUEsa0JBQUFBLFFBQW1DLEVBQU1BLEVBQUFBLFFBQUFBLGNBQ3pDLE1BQVo0RixJQUVQOUMsRUFBU2dCLFFBQVU5RCxFQUFBQSxRQUFBQSxrQkFBQUEsS0FBZ0MsRUFBTUEsRUFBQUEsUUFBQUEsZUFJN0RtQixPQUFPbUMsTUFBTUMsSUFBSTRJLEdBRWpCQSxFQUFFUSxXQUFhLFNBQVUxQyxHQUNyQjlJLE9BQU95TCxNQUFNQyxNQUFNNUMsRUFDdkIsR0FHQS9FLEVBQUFBLEVBQUFBLFVBQVN1RyxFQUFjLENBQUV6RixHQUFBQSxFQUFJTCxLQUFNd0csRUFBRXhHLE1BQVF3RyxFQUFHbk0sRUFBQUEsUUFBQUEsaUJBQUFBLFFBRWhERixRQUFRQyxJQUFJLHNCQUFELE9BQXVCaUcsRUFBRSxnQkFBUXBDLEVBQUMsZUFBT3NGLEVBQUMscUJBQWFtRCxFQUFPLHVCQUFlekcsSUFHeEVOLE1BQVp1QyxHQUF1QkEsRUFBUyxVQUN4QyxLQUVBL0gsUUFBUWdOLE1BQU0sOEJBQUQsT0FBK0I5RyxFQUFFLHNCQUFjSixFQUFPLGFBQUswRyxJQUVyRTFHLElBQVkwRyxHQUF1QixNQUFaQSxHQUc5QjFMLEtBQUttTSxXQUFXL0csRUFBSUosR0FDcEJoRixLQUFLb00sS0FBS2hILEVBQUlwQyxFQUFHc0YsRUFBR21ELEdBQVMsV0FDVC9HLE1BQVp1QyxHQUF1QkEsRUFBUyw0QkFDeEMsS0FHQWpILEtBQUksT0FBUW9GLEdBR2hCcEYsS0FBS2dMLFNBQVUsRUFDUk8sQ0FDWCxHQUFDLG9CQUVELFNBQU9uRyxFQUFJNkIsR0FDUCxHQUFVdkMsTUFBTlUsRUFBaUIsQ0FDakIsSUFBSW1HLEVBQUl2TCxLQUFLMEMsTUFBTTZHLGdCQUFnQnNCLEVBQWV6RixHQUV6Q1YsTUFBTDZHLElBQ0FqRyxFQUFBQSxFQUFBQSxhQUFZaUcsR0FDWjdJLE1BQU02QyxPQUFPZ0csR0FDYnJNLFFBQVFDLElBQUksZUFBZ0JpRyxHQUNaVixNQUFadUMsR0FBdUJBLEVBQVMsWUFDakJ2QyxNQUFadUMsR0FBdUJBLEVBQVMsWUFDL0MsTUFBdUJ2QyxNQUFadUMsR0FBdUJBLEVBQVMsbUJBQy9DLEdBQUMsdUJBRUQsV0FBWSxXQUVGdUMsRUFBVXhKLEtBQUswQyxNQUFNK0csU0FFM0J0QyxPQUFPQyxRQUFRb0MsR0FBU25DLFNBQVEsU0FBQ3FDLEdBQzdCLElBQU0zRSxFQUFPMkUsRUFBSSxHQUFTLEtBRXRCM0UsRUFBSzRFLFdBQVdrQixLQUNoQjNMLFFBQVFDLElBQUksV0FBWTRGLElBQ3hCTyxFQUFBQSxFQUFBQSxhQUFZb0UsRUFBSSxJQUNoQixFQUFLaEgsTUFBTTZDLE9BQU9tRSxFQUFJLElBRTlCLEdBQ0osR0FBQyx3QkFFRCxTQUFXdEUsRUFBSUosR0FDWCxJQUFJdUcsRUFBSXZMLEtBQUswQyxNQUFNNkcsZ0JBQWdCc0IsRUFBZXpGLEdBQ3pDVixNQUFMNkcsSUFDQUEsRUFBRXZHLFFBQVVBLEVBRXBCLEdBQUMsb0JBQ0QsU0FBT0ksR0FFSCxPQURRcEYsS0FBSzBDLE1BQU02RyxnQkFBZ0JzQixFQUFlekYsRUFFdEQsR0FBQyxrQkFFRCxTQUFLQSxFQUFJcEMsRUFBR3NGLEVBQUdtRCxFQUFTeEUsR0FDcEIsSUFBSXNFLEVBQUl2TCxLQUFLMEMsTUFBTTZHLGdCQUFnQnNCLEVBQWV6RixHQUNsRCxHQUFTVixNQUFMNkcsRUFBZ0IsQ0FDaEIsSUFBTWMsRUFBaUJkLEVBQUV4SSxTQUFTdUYsRUFDNUJnRSxHQUFjYixFQUFVLElBQU12TCxFQUFBQSxLQUFBQSxRQUNoQ0MsRUFBVyxDQUFFNkMsRUFBR3VJLEVBQUVwTCxTQUFTNkMsRUFBR3NGLEVBQUdpRCxFQUFFcEwsU0FBU21JLEVBQUdtRCxRQUFTRixFQUFFeEksU0FBU3VGLEdBSWpFaUUsRUFBZUYsRUFBaUJDLEdBQWMsRUFzQ3BELE9BbkNBdEosRUFBSWhCLFlBQWNhLEtBQUs4SSxJQUFJOUksS0FBSytJLElBQUkvSSxLQUFLQyxNQUFVLEdBQUpFLEdBQVUsR0FBSTVELEVBQUFBLFFBQUFBLE1BQUFBLE1BQW9CQSxFQUFBQSxRQUFBQSxNQUFBQSxNQUNqRmtKLEVBQUl0RyxZQUFjYSxLQUFLOEksSUFBSTlJLEtBQUsrSSxJQUFJL0ksS0FBS0MsTUFBVSxHQUFKd0YsR0FBVSxHQUFJbEosRUFBQUEsUUFBQUEsTUFBQUEsTUFBb0JBLEVBQUFBLFFBQUFBLE1BQUFBLE1BQ2pGcU0sRUFBVTVJLEtBQUtDLE1BQWdCLEdBQVYySSxHQUFnQixHQVFyQixHQUxDNUksS0FBSzJKLEtBQUszSixLQUFLNEosSUFBSXpKLEVBQUk3QyxFQUFTNkMsRUFBRyxHQUFLSCxLQUFLNEosSUFBSW5FLEVBQUluSSxFQUFTbUksRUFBRyxJQU1sRSxJQUFJb0UsRUFBQUEsUUFBQUEsTUFBWXZNLEdBQ3ZCd00sR0FBRyxDQUFFM0osRUFBR0EsRUFBR3NGLEVBQUdBLEVBQUdtRCxRQUFTYSxHQUFjLEtBRXhDTSxVQUFTLFdBQ05yQixFQUFFcEwsU0FBUzZDLEVBQUk3QyxFQUFTNkMsRUFDeEJ1SSxFQUFFcEwsU0FBU21JLEVBQUluSSxFQUFTbUksRUFFcEJpRSxJQUNBaEIsRUFBRXhJLFNBQVN1RixFQUFJbkksRUFBU3NMLFFBSWhDLElBQ0NvQixZQUFXLFdBRVJ0QixFQUFFeEksU0FBU3VGLEVBQUluSSxFQUFTc0wsUUFDUixNQUFaeEUsR0FBa0JBLEVBQVMsVUFDbkMsSUFDQzZGLE1BQU0sSUFDTkMsUUFHTHhCLEVBQUV4SSxTQUFTdUYsRUFBSWdFLEVBRVpmLENBQ1gsQ0FDZ0IsTUFBWnRFLEdBQWtCQSxFQUFTLFlBQ25DLEdBQUMsNkJBRUQsU0FBZ0I3QixHQUNaLElBQUltRyxFQUFJdkwsS0FBSzBDLE1BQU02RyxnQkFBZ0JzQixFQUFlekYsR0FDbEQsT0FBU1YsTUFBTDZHLEdBQ0FyTSxRQUFRQyxJQUFJLEdBQUQsT0FBSW9NLEVBQUVwTCxTQUFTNkMsRUFBQyxZQUFJdUksRUFBRXBMLFNBQVNtSSxFQUFDLFlBQUlpRCxFQUFFcEwsU0FBU29JLElBQ25EZ0QsR0FFSixJQUNYLEdBQUMsb0JBRUQsV0FDSW1CLEVBQUFBLFFBQUFBLFFBQ0osR0FBQyw2QkFFRCxTQUFnQjlJLEdBQ1osT0FBTyxJQUFJb0osU0FBUSxTQUFDQyxFQUFTQyxHQUt6QkQsR0FKWTFNLE9BQU80TSxLQUFLQyxRQUNwQjdNLE9BQU84TSxRQUFVLHVCQUNqQkMsS0FBS0MsVUFBVSxDQUFFbkksR0FBSXhCLEVBQUtrSSxXQUdsQyxHQUNKLEdBQUMsbUJBRUQsU0FBTWxJLEdBRUYsSUFJSTRKLEVBSkVDLEVBQU9sTyxTQUFTbU8sY0FBYyxZQUM5QkMsRUFBY3BPLFNBQVNDLGVBQWUsZUFDeENvTyxFQUFVck8sU0FBU3FGLGNBQWMsT0FDckNnSixFQUFRQyxhQUFhLEtBQU0sZUFFdkJ6TyxFQUFBQSxRQUFBQSx5QkFDQW9PLEVBQWNqTyxTQUFTdU8sZUFBZSxHQUFELE9BQUlsSyxFQUFLbUIsS0FBSSx5QkFDbEQvRSxLQUFLK04sZ0JBQWdCbkssSUFFckI0SixFQUFjak8sU0FBU3VPLGVBQWUsR0FBRCxPQUFJbEssRUFBS21CLE9BRWxENkksRUFBUXpELFlBQVlxRCxHQUNwQkMsRUFBS08sYUFBYUosRUFBU0QsR0FDM0JGLEVBQUt4SixNQUFNZ0ssUUFBVSxRQUNyQkMsWUFBVyxXQUNQVCxFQUFLeEosTUFBTWYsUUFBVSxNQUNyQnVLLEVBQUt4SixNQUFNZ0ssUUFBVSxNQUN6QixHQUFHLElBQ1AsR0FBQyxtQkFFRCxXQUFRLFdBRUV6RSxFQUFVeEosS0FBSzBDLE1BQU0rRyxTQUN2QjBFLEVBQVEsR0FDWmhILE9BQU9DLFFBQVFvQyxHQUFTbkMsU0FBUSxTQUFDcUMsR0FDN0IsSUFBTTNFLEVBQU8yRSxFQUFJLEdBQVMsS0FHdEIzRSxFQUFLNEUsV0FBV2tCLFVBQ0luRyxJQUFoQnlKLEVBQU1wSixHQUVOb0osRUFBTXBKLEdBQVEsVUFJZE8sRUFBQUEsRUFBQUEsYUFBWW9FLEVBQUksSUFDaEIsRUFBS2hILE1BQU02QyxPQUFPbUUsRUFBSSxJQUN0QnhLLFFBQVFDLElBQUk0RixFQUFNLGdCQUc5QixHQUNKLHFGQUFDLEVBelFxQix1NEJDUDFCLElBQ3FCcUosRUFBVSxXQUMzQixXQUFZMUwsRUFBT2tCLGdHQUFNLFNBQ3JCNUQsS0FBSzRELEtBQU9BLEVBQ1o1RCxLQUFLMEMsTUFBUUEsRUFFYixJQUFNb0UsRUFBWSxJQUFJNUcsRUFBQUEsa0JBQXdCRixLQUFLNEQsS0FBSzNCLFVBQ3hEakMsS0FBS3FPLFNBQVcsSUFBSW5PLEVBQUFBLGFBQW1CNEcsR0FDdkM5RyxLQUFLcU8sU0FBU25NLFNBQVNvTSxXQUFZLEVBQ25DdE8sS0FBS3FPLFNBQVNuTSxTQUFTZ0IsUUFBVSxJQUNqQ2xELEtBQUtxTyxTQUFTbk0sU0FBU2lCLGFBQWMsRUFFckMsSUFBTW9MLEVBQVEsSUFBSXJPLEVBQUFBLGNBQW9CRixLQUFLNEQsS0FBSzNCLFVBQ2hEakMsS0FBS3dPLFVBQVksSUFBSXRPLEVBQUFBLGFBQW1CcU8sR0FDeEN2TyxLQUFLd08sVUFBVXRNLFNBQVNvTSxXQUFZLEVBQ3BDdE8sS0FBS3dPLFVBQVV0TSxTQUFTZ0IsUUFBVSxJQUNsQ2xELEtBQUt3TyxVQUFVdE0sU0FBU2lCLGFBQWMsRUFFdENuRCxLQUFLeU8sYUFBZSxJQUFJQyxFQUFBQSxvQkFBb0IxTyxLQUFLNEQsS0FBTSxHQUN2RDVELEtBQUsyTyxVQUFZLElBQUl6TyxFQUFBQSxVQUFnQkYsS0FBSzRELEtBQzlDLFdBZ0JDLFNBaEJBLDBCQUVELFdBQ0k1RCxLQUFLNEQsS0FBS2pCLElBQUkzQyxLQUFLcU8sVUFDbkJyTyxLQUFLNEQsS0FBS2pCLElBQUkzQyxLQUFLd08sV0FFbkJ4TyxLQUFLMEMsTUFBTUMsSUFBSTNDLEtBQUt5TyxjQUNwQnpPLEtBQUswQyxNQUFNQyxJQUFJM0MsS0FBSzJPLFVBQ3hCLEdBQUMscUJBRUQsV0FDSTNPLEtBQUs0RCxLQUFLMkIsT0FBT3ZGLEtBQUtxTyxVQUN0QnJPLEtBQUs0RCxLQUFLMkIsT0FBT3ZGLEtBQUt3TyxXQUV0QnhPLEtBQUswQyxNQUFNNkMsT0FBT3ZGLEtBQUt5TyxjQUN2QnpPLEtBQUswQyxNQUFNNkMsT0FBT3ZGLEtBQUsyTyxVQUMzQixvRkFBQyxFQW5DMEIsa0RDSS9CLFNBQVNDLEVBQVlDLEVBQVdDLEdBQzVCLElBUklDLEVBUUFDLEVBQWVGLEVBSW5CLE9BSEl2TyxPQUFPME8sU0FBU0MsS0FBS0MsUUFBUU4sSUFBYyxJQUMzQ0csR0FWQUQsRUFBTyxDQUFDLEVBQ0F4TyxPQUFPME8sU0FBU0MsS0FBS0UsUUFBUSwyQkFBMkIsU0FBVS9GLEVBQUdnRyxFQUFLQyxHQUNsRlAsRUFBS00sR0FBT0MsQ0FDaEIsSUFDT1AsR0FNeUJGLElBRXpCRyxDQUNYLENBRU8sU0FBU08sSUFJWixJQW1GTUMsRUFkRkMsRUFDQUMsRUF0RUVDLEVBQW9CQyxhQUFhQyxRQUFRLDBCQUN6Q1IsRUFBTVQsRUFBWSxPQUFPLEdBRXpCa0IsRUFBV2xCLEVBQVksWUFBWSxHQUNuQ21CLEVBQVduQixFQUFZLFlBQVksR0FDbkN2QixFQUFVdUIsRUFBWSxXQUFXLEdBQ2pDb0IsRUFBT3BCLEVBQVksUUFBUSxHQUMzQnFCLEVBQVNyQixFQUFZLFVBQVUsR0FtQnJDLEdBeURNWSxFQUFPalAsT0FBTzBPLFNBQVNpQixPQUFTM1AsT0FBTzBPLFNBQVNrQixTQUN0RDVQLE9BQU82UCxRQUFRQyxVQUFVLENBQUMsRUFBRzlRLFNBQVMrUSxNQUFPZCxHQTFFN0N0QixZQUFXLFlBQ1EsSUFBWCtCLEdBQ0FMLGFBQWFXLFFBQVEsb0JBQXFCTixJQUU5QixJQUFaNUMsR0FDQXVDLGFBQWFXLFFBQVEscUJBQXNCbEQsSUFFbEMsSUFBVDJDLEdBQ0FKLGFBQWFXLFFBQVEsa0JBQW1CUCxJQUVoQyxJQUFSWCxHQUNBTyxhQUFhVyxRQUFRLGlCQUFrQmxCLEVBRS9DLEdBQUcsTUFHUyxJQUFSQSxFQUFlLENBS2ZuUSxRQUFRQyxJQUFJLGdDQUVaLElBQU1xUixHQW9DTmYsRUFwQzZCSixFQW1DWG9CLE1BQU0sS0FBSyxHQUNWckIsUUFBUSxLQUFNLEtBQUtBLFFBQVEsS0FBTSxLQUNwRE0sRUFBY2dCLG1CQUNkQyxLQUFLbEIsR0FDQWdCLE1BQU0sSUFDTkcsS0FBSSxTQUFVQyxHQUNYLE1BQU8sS0FBTyxLQUFPQSxFQUFFQyxXQUFXLEdBQUczSSxTQUFTLEtBQUs0SSxPQUFPLEVBQzlELElBQ0NDLEtBQUssS0FHUDFELEtBQUsyRCxNQUFNdkIsSUE3Q1JJLEVBQVdVLEVBQVlVLEtBQ3ZCbkIsRUFBV1MsRUFBWVcsS0FDdkI5RCxFQUFVbUQsRUFBWW5ELFFBUzVCLFlBUHlCM0ksSUFBckI4TCxFQUFZWSxNQUFvQnhCLGFBQWFXLFFBQVEsb0JBQXFCQyxFQUFZWSxXQUNqRTFNLElBQXJCOEwsRUFBWVIsTUFBb0JKLGFBQWFXLFFBQVEsa0JBQW1CYyxTQUFTYixFQUFZUixZQUN4RXRMLElBQXJCOEwsRUFBWWhCLE1BQW9CSSxhQUFhVyxRQUFRLGtCQUFtQkMsRUFBWWhCLFdBQzVEOUssSUFBeEI4TCxFQUFZbkQsU0FBdUJ1QyxhQUFhVyxRQUFRLHFCQUFzQkMsRUFBWW5ELFNBRTlGdUMsYUFBYVcsUUFBUSx5QkFBMEJqRCxLQUFLQyxVQUFVLENBQUV1QyxTQUFBQSxFQUFVQyxTQUFBQSxFQUFVMUMsUUFBQUEsS0FFN0UsQ0FDSHlDLFNBQUFBLEVBQ0FDLFNBQUFBLEVBQ0ExQyxRQUFBQSxFQUVSLENBQU8sT0FBaUIsSUFBYnlDLElBQW1DLElBQWJDLEdBRTdCN1EsUUFBUUMsSUFBSSwyQ0FDWnlRLGFBQWFXLFFBQVEseUJBQTBCakQsS0FBS0MsVUFBVSxDQUFFdUMsU0FBQUEsRUFBVUMsU0FBQUEsRUFBVTFDLFFBQUFBLEtBQzdFLENBQ0h5QyxTQUFBQSxFQUNBQyxTQUFBQSxFQUNBMUMsUUFBQUEsS0FFZ0IsSUFBYnlDLElBQW1DLElBQWJDLEdBQTRDLE9BQXRCSixHQUVuRHpRLFFBQVFDLElBQUksMENBQ0xtTyxLQUFLMkQsTUFBTXRCLEtBRWQsQ0FDWiwrTEM5RU0yQixFQUFNLElBQUlDLEVBQUFBLFFBQ1ZDLEVBQU0sSUFBSUQsRUFBQUEsUUFDVkUsRUFBZ0IsSUFBSUMsRUFBQUEsUUFDcEJDLEVBQVEsQ0FBQyxJQUFLLElBQUssS0FFekIsU0FBU2pELEVBQW9CbEssRUFBUW9OLEVBQU1DLEdBQ3ZDN1IsS0FBS3dFLE9BQVNBLEVBQ2R4RSxLQUFLNFIsVUFBZ0JsTixJQUFUa04sRUFBcUJBLEVBQU8sR0FFeEMsSUFBTXpQLE9BQWdCdUMsSUFBUm1OLEVBQW9CQSxFQUFNLFNBSXBDQyxFQUFXLEVBRVRDLEVBQWMvUixLQUFLd0UsT0FBT3ZDLFNBRTVCOFAsR0FBZUEsRUFBWUMsV0FDM0JGLEVBQXNDLEVBQTNCQyxFQUFZRSxNQUFNQyxPQUN0QkgsR0FBZUEsRUFBWUksbUJBQ2xDTCxFQUFXQyxFQUFZSyxXQUFXQyxPQUFPQyxPQUs3QyxJQUFNclEsRUFBVyxJQUFJc1EsRUFBQUEsZUFDZkMsRUFBWSxJQUFJQyxFQUFBQSx1QkFBa0MsRUFBWFgsRUFBZSxFQUFHLEdBRS9EN1AsRUFBUzRMLGFBQWEsV0FBWTJFLEdBRWxDRSxFQUFBQSxhQUFBQSxLQUFrQjFTLEtBQU1pQyxFQUFVLElBQUkwUSxFQUFBQSxrQkFBa0IsQ0FBRXhRLE1BQU9BLEVBQU95USxZQUFZLEtBRXBGNVMsS0FBS3NELEtBQU8sc0JBSVp0RCxLQUFLNlMsa0JBQW1CLEVBRXhCN1MsS0FBSzhTLFFBQ1QsQ0FFQXBFLEVBQW9CcUUsVUFBWTVMLE9BQU9JLE9BQU9tTCxFQUFBQSxhQUFBQSxXQUM5Q2hFLEVBQW9CcUUsVUFBVUMsWUFBY3RFLEVBRTVDQSxFQUFvQnFFLFVBQVVELE9BQVMsV0FDbkMsSUFBSUcsRUFDSmpULEtBQUt3RSxPQUFPME8sbUJBQWtCLEdBRTlCekIsRUFBYzBCLGdCQUFnQm5ULEtBQUt3RSxPQUFPNE8sYUFFMUMsSUFBTUEsRUFBY3BULEtBQUt3RSxPQUFPNE8sWUFDMUJqVCxFQUFXSCxLQUFLaUMsU0FBU21RLFdBQVdqUyxTQUlwQzRSLEVBQWMvUixLQUFLd0UsT0FBT3ZDLFNBRWhDLEdBQUk4UCxHQUFlQSxFQUFZQyxXQUFZLENBQ3ZDLElBQU1xQixFQUFXdEIsRUFBWXNCLFNBRXZCcEIsRUFBUUYsRUFBWUUsTUFFMUJnQixFQUFNLEVBRU4sSUFBSyxJQUFJSyxFQUFJLEVBQUdDLEVBQUl0QixFQUFNQyxPQUFRb0IsRUFBSUMsRUFBR0QsSUFHckMsSUFGQSxJQUFNRSxFQUFPdkIsRUFBTXFCLEdBRVZHLEVBQUksRUFBR0MsRUFBS0YsRUFBS0csY0FBY3pCLE9BQVF1QixFQUFJQyxFQUFJRCxJQUFLLENBQ3pELElBQU1HLEVBQVNQLEVBQVNHLEVBQUs3QixFQUFNOEIsS0FDN0JwQixFQUFTbUIsRUFBS0csY0FBY0YsR0FFbENuQyxFQUFJdUMsS0FBS0QsR0FBUUUsYUFBYVYsR0FDOUI1QixFQUFJcUMsS0FBS3hCLEdBQVEwQixhQUFhdEMsR0FBZXVDLFlBQVlDLGVBQWVqVSxLQUFLNFIsTUFBTWpQLElBQUkyTyxHQUV2Rm5SLEVBQVMrVCxPQUFPakIsRUFBSzNCLEVBQUl0TyxFQUFHc08sRUFBSWhKLEVBQUdnSixFQUFJL0ksR0FFdkMwSyxHQUFZLEVBRVo5UyxFQUFTK1QsT0FBT2pCLEVBQUt6QixFQUFJeE8sRUFBR3dPLEVBQUlsSixFQUFHa0osRUFBSWpKLEdBRXZDMEssR0FBWSxDQUNoQixDQUVSLE1BQU8sR0FBSWxCLEdBQWVBLEVBQVlJLGlCQUFrQixDQUNwRCxJQUFNZ0MsRUFBU3BDLEVBQVlLLFdBQVdqUyxTQUNoQ2lVLEVBQVVyQyxFQUFZSyxXQUFXQyxPQUV2Q1ksRUFBTSxFQUlOLElBQUssSUFBSVEsRUFBSSxFQUFHQyxFQUFLUyxFQUFPN0IsTUFBT21CLEVBQUlDLEVBQUlELElBQ3ZDbkMsRUFBSWxSLElBQUkrVCxFQUFPRSxLQUFLWixHQUFJVSxFQUFPRyxLQUFLYixHQUFJVSxFQUFPSSxLQUFLZCxJQUFJSyxhQUFhVixHQUNyRTVCLEVBQUlwUixJQUFJZ1UsRUFBUUMsS0FBS1osR0FBSVcsRUFBUUUsS0FBS2IsR0FBSVcsRUFBUUcsS0FBS2QsSUFDdkRqQyxFQUFJdUMsYUFBYXRDLEdBQWV1QyxZQUFZQyxlQUFlalUsS0FBSzRSLE1BQU1qUCxJQUFJMk8sR0FFMUVuUixFQUFTK1QsT0FBT2pCLEVBQUszQixFQUFJdE8sRUFBR3NPLEVBQUloSixFQUFHZ0osRUFBSS9JLEdBRXZDMEssR0FBWSxFQUVaOVMsRUFBUytULE9BQU9qQixFQUFLekIsRUFBSXhPLEVBQUd3TyxFQUFJbEosRUFBR2tKLEVBQUlqSixHQUV2QzBLLEdBQVksQ0FFcEIsQ0FFQTlTLEVBQVNxVSxhQUFjLENBQzNCLCtXQzFDQSxJQUFNQyxFQUFjLFdBQ2hCLFNBQVNBLEVBQVdDLEdBQ2hCQyxFQUFBQSxPQUFBQSxLQUFZM1UsS0FBTTBVLEdBRWxCMVUsS0FBSzRVLFlBQWMsS0FDbkI1VSxLQUFLNlUsVUFBWSxJQUNyQixDQXFLQSxTQUFTQyxJQUNMLElBQUl0TCxFQUFVLENBQUMsRUFFZixNQUFPLENBQ0h1TCxJQUFLLFNBQVUxRixHQUNYLE9BQU83RixFQUFRNkYsRUFDbkIsRUFFQTFNLElBQUssU0FBVTBNLEVBQUs3SyxHQUNoQmdGLEVBQVE2RixHQUFPN0ssQ0FDbkIsRUFFQWUsT0FBUSxTQUFVOEosVUFDUDdGLEVBQVE2RixFQUNuQixFQUVBMkYsVUFBVyxXQUNQeEwsRUFBVSxDQUFDLENBQ2YsRUFFUixDQXZMQWlMLEVBQVcxQixVQUFZNUwsT0FBTzhOLE9BQU85TixPQUFPSSxPQUFPb04sRUFBQUEsT0FBQUEsV0FBbUIsQ0FDbEUzQixZQUFheUIsRUFFYjVJLEtBQU0sU0FBVXFKLEVBQUtDLEVBQVFDLEVBQVlDLEdBQ3JDLElBRUlDLEVBRkFDLEVBQVF2VixLQUtSc1YsRUFEc0IsS0FBdEJ0VixLQUFLc1YsYUFDVXRWLEtBQUtzVixhQUNDLEtBQWR0VixLQUFLd1AsS0FDR3hQLEtBQUt3UCxLQUVMZ0csRUFBQUEsWUFBQUEsZUFBMkJOLEdBTTlDSyxFQUFNYixRQUFRZSxVQUFVUCxHQUV4QixJQUFJUSxFQUFXLFNBQVVDLEdBQ2pCTixFQUNBQSxFQUFRTSxHQUVSelcsUUFBUWdOLE1BQU15SixHQUdsQkosRUFBTWIsUUFBUWtCLFVBQVVWLEdBQ3hCSyxFQUFNYixRQUFRbUIsUUFBUVgsRUFDMUIsRUFFSVksRUFBUyxJQUFJQyxFQUFBQSxXQUFXUixFQUFNYixTQUVsQ29CLEVBQU9FLFFBQVFoVyxLQUFLd1AsTUFDcEJzRyxFQUFPRyxnQkFBZ0IsZUFFRyxvQkFBdEJWLEVBQU1XLGFBQ05KLEVBQU9LLG9CQUFtQixHQUc5QkwsRUFBT2pLLEtBQ0hxSixHQUNBLFNBQVVrQixHQUNOLElBQ0liLEVBQU10RSxNQUNGbUYsRUFDQWQsR0FDQSxTQUFVZSxHQUNObEIsRUFBT2tCLEdBRVBkLEVBQU1iLFFBQVFtQixRQUFRWCxFQUMxQixHQUNBUSxFQUlSLENBRkUsTUFBT0MsR0FDTEQsRUFBU0MsRUFDYixDQUNKLEdBQ0FQLEVBQ0FNLEVBRVIsRUFFQVksZUFBZ0IsU0FBVTFCLEdBRXRCLE9BREE1VSxLQUFLNFUsWUFBY0EsRUFDWjVVLElBQ1gsRUFFQXVXLGFBQWMsU0FBVTFCLEdBRXBCLE9BREE3VSxLQUFLNlUsVUFBWUEsRUFDVjdVLElBQ1gsRUFFQWlSLE1BQU8sU0FBVW1GLEVBQU01RyxFQUFNMkYsRUFBUUUsR0FDakMsSUFBSXpILEVBQ0E0SSxFQUFhLENBQUMsRUFFbEIsR0FBb0IsaUJBQVRKLEVBQ1B4SSxFQUFVd0ksT0FJVixHQUZZWixFQUFBQSxZQUFBQSxXQUF1QixJQUFJaUIsV0FBV0wsRUFBTSxFQUFHLE1BRTdDTSxFQUErQixDQUN6QyxJQUNJRixFQUFXRyxFQUFXQyxpQkFBbUIsSUFBSUMsRUFBb0JULEVBSXJFLENBSEUsTUFBT2xLLEdBRUwsWUFESW1KLEdBQVNBLEVBQVFuSixHQUV6QixDQUVBMEIsRUFBVTRJLEVBQVdHLEVBQVdDLGlCQUFpQmhKLE9BQ3JELE1BQ0lBLEVBQVU0SCxFQUFBQSxZQUFBQSxXQUF1QixJQUFJaUIsV0FBV0wsSUFJeEQsSUFBSVUsRUFBT3hKLEtBQUsyRCxNQUFNckQsR0FFdEIsUUFBbUJsSixJQUFmb1MsRUFBS0MsT0FBdUJELEVBQUtDLE1BQU1DLFFBQVEsR0FBSyxFQUNoRDNCLEdBQ0FBLEVBQVEsSUFBSTRCLE1BQU0sZ0ZBRjFCLENBTUEsR0FBSUgsRUFBS0ksZUFDTCxJQUFLLElBQUk1RCxFQUFJLEVBQUdBLEVBQUl3RCxFQUFLSSxlQUFlaEYsU0FBVW9CLEVBQUcsQ0FDakQsSUFBSTZELEVBQWdCTCxFQUFLSSxlQUFlNUQsR0FDcEM4RCxFQUFxQk4sRUFBS00sb0JBQXNCLEdBRXBELE9BQVFELEdBQ0osS0FBS1IsRUFBV1Usb0JBQ1piLEVBQVdXLEdBQWlCLElBQUlHLEVBQW9CUixHQUNwRCxNQUVKLEtBQUtILEVBQVdZLHdCQUNaZixFQUFXVyxHQUFpQixJQUFJSyxFQUNoQyxNQUVKLEtBQUtiLEVBQVdjLG9CQUNaakIsRUFBV1csR0FBaUIsSUFBSU8sRUFDaEMsTUFFSixLQUFLZixFQUFXZ0Isc0NBQ1puQixFQUFXVyxHQUFpQixJQUFJUyxFQUNoQyxNQUVKLEtBQUtqQixFQUFXa0IsMkJBQ1pyQixFQUFXVyxHQUFpQixJQUFJVyxFQUFrQ2hCLEVBQU05VyxLQUFLNFUsYUFDN0UsTUFFSixLQUFLK0IsRUFBV29CLGlCQUNadkIsRUFBV1csR0FBaUIsSUFBSWEsRUFBd0JoWSxLQUFLNlUsV0FDN0QsTUFFSixLQUFLOEIsRUFBV3NCLHNCQUNaekIsRUFBV1csR0FBaUIsSUFBSWUsRUFDaEMsTUFFSixLQUFLdkIsRUFBV3dCLHNCQUNaM0IsRUFBV1csR0FBaUIsSUFBSWlCLEVBQ2hDLE1BRUosUUFDUWhCLEVBQW1CakksUUFBUWdJLElBQWtCLEdBQzdDalksUUFBUW1aLEtBQUssd0NBQTBDbEIsRUFBZ0IsTUFHdkYsQ0FHUyxJQUFJbUIsRUFBV3hCLEVBQU1OLEVBQVksQ0FDMUNoSCxLQUFNQSxHQUFReFAsS0FBS3NWLGNBQWdCLEdBQ25DWSxZQUFhbFcsS0FBS2tXLFlBQ2xCeEIsUUFBUzFVLEtBQUswVSxVQUdYekQsTUFBTWtFLEVBQVFFLEVBdERyQixDQXVESixJQStCSixJQUFJc0IsRUFBYSxDQUNiQyxnQkFBaUIsa0JBQ2pCaUIsMkJBQTRCLDZCQUM1QlIsb0JBQXFCLHNCQUNyQkUsd0JBQXlCLDBCQUN6Qkksc0NBQXVDLHNDQUN2Q0Ysb0JBQXFCLHNCQUNyQlEsc0JBQXVCLHdCQUN2QkUsc0JBQXVCLHdCQUN2QkosaUJBQWtCLG9CQVN0QixTQUFTQyxFQUF3Qm5ELEdBQzdCLElBQUtBLEVBQ0QsTUFBTSxJQUFJb0MsTUFBTSxpRkFHcEJqWCxLQUFLK0UsS0FBTzRSLEVBQVdvQixpQkFDdkIvWCxLQUFLNlUsVUFBWUEsQ0FDckIsQ0FPQSxTQUFTeUMsRUFBb0JSLEdBQ3pCOVcsS0FBSytFLEtBQU80UixFQUFXVSxvQkFFdkIsSUFBSWtCLEVBQWF6QixFQUFLTixZQUFjTSxFQUFLTixXQUFXRyxFQUFXVSxzQkFBeUIsQ0FBQyxFQUN6RnJYLEtBQUt3WSxVQUFZRCxFQUFVRSxRQUFVLEVBQ3pDLENBNERBLFNBQVNmLElBQ0wxWCxLQUFLK0UsS0FBTzRSLEVBQVdjLG1CQUMzQixDQW1DQSxTQUFTRCxJQUNMeFgsS0FBSytFLEtBQU80UixFQUFXWSx1QkFDM0IsQ0FqR0FELEVBQW9CdkUsVUFBVTJGLFVBQVksU0FBVUMsR0FDaEQsSUFDSUMsRUFEQUMsRUFBVzdZLEtBQUt3WSxVQUFVRyxHQUcxQnhXLEVBQVEsSUFBSTJXLEVBQUFBLE1BQU0sZUFDQ3BVLElBQW5CbVUsRUFBUzFXLE9BQXFCQSxFQUFNNFcsVUFBVUYsRUFBUzFXLE9BRTNELElBQUk2VyxPQUEyQnRVLElBQW5CbVUsRUFBU0csTUFBc0JILEVBQVNHLE1BQVEsRUFFNUQsT0FBUUgsRUFBU3ZWLE1BQ2IsSUFBSyxlQUNEc1YsRUFBWSxJQUFJSyxFQUFBQSxpQkFBaUI5VyxJQUN2QnBCLE9BQU9aLFNBQVNDLElBQUksRUFBRyxHQUFJLEdBQ3JDd1ksRUFBVWpXLElBQUlpVyxFQUFVN1gsUUFDeEIsTUFFSixJQUFLLFNBQ0Q2WCxFQUFZLElBQUlNLEVBQUFBLFdBQVcvVyxJQUNqQmdYLFNBQVdILEVBQ3JCLE1BRUosSUFBSyxRQUNESixFQUFZLElBQUlRLEVBQUFBLFVBQVVqWCxJQUNoQmdYLFNBQVdILEVBRXJCSCxFQUFTUSxLQUFPUixFQUFTUSxNQUFRLENBQUMsRUFDbENSLEVBQVNRLEtBQUtDLG9CQUN1QjVVLElBQWpDbVUsRUFBU1EsS0FBS0MsZUFBK0JULEVBQVNRLEtBQUtDLGVBQWlCLEVBQ2hGVCxFQUFTUSxLQUFLRSxvQkFDdUI3VSxJQUFqQ21VLEVBQVNRLEtBQUtFLGVBQStCVixFQUFTUSxLQUFLRSxlQUFpQjFXLEtBQUtJLEdBQUssRUFDMUYyVixFQUFVWSxNQUFRWCxFQUFTUSxLQUFLRSxlQUNoQ1gsRUFBVWEsU0FBVyxFQUFNWixFQUFTUSxLQUFLQyxlQUFpQlQsRUFBU1EsS0FBS0UsZUFDeEVYLEVBQVU3WCxPQUFPWixTQUFTQyxJQUFJLEVBQUcsR0FBSSxHQUNyQ3dZLEVBQVVqVyxJQUFJaVcsRUFBVTdYLFFBQ3hCLE1BRUosUUFDSSxNQUFNLElBQUlrVyxNQUFNLDZDQUErQzRCLEVBQVN2VixLQUFPLE1BYXZGLE9BUkFzVixFQUFVelksU0FBU0MsSUFBSSxFQUFHLEVBQUcsR0FFN0J3WSxFQUFVYyxNQUFRLE9BRVNoVixJQUF2Qm1VLEVBQVNjLFlBQXlCZixFQUFVZSxVQUFZZCxFQUFTYyxXQUVyRWYsRUFBVTdULEtBQU84VCxFQUFTOVQsTUFBUSxTQUFXNFQsRUFFdEMzTCxRQUFRQyxRQUFRMkwsRUFDM0IsRUFXQWxCLEVBQTRCM0UsVUFBVTZHLGdCQUFrQixXQUNwRCxPQUFPQyxFQUFBQSxpQkFDWCxFQUVBbkMsRUFBNEIzRSxVQUFVK0csYUFBZSxTQUFVQyxFQUFnQkMsRUFBYUMsR0FDeEYsSUFBSUMsRUFBVSxHQUVkSCxFQUFlNVgsTUFBUSxJQUFJMlcsRUFBQUEsTUFBTSxFQUFLLEVBQUssR0FDM0NpQixFQUFlN1csUUFBVSxFQUV6QixJQUFJaVgsRUFBb0JILEVBQVlJLHFCQUVwQyxHQUFJRCxFQUFtQixDQUNuQixHQUFJRSxNQUFNQyxRQUFRSCxFQUFrQkksaUJBQWtCLENBQ2xELElBQUlDLEVBQVFMLEVBQWtCSSxnQkFFOUJSLEVBQWU1WCxNQUFNNFcsVUFBVXlCLEdBQy9CVCxFQUFlN1csUUFBVXNYLEVBQU0sRUFDbkMsTUFFMkM5VixJQUF2Q3lWLEVBQWtCTSxrQkFDbEJQLEVBQVFRLEtBQUtULEVBQU9VLGNBQWNaLEVBQWdCLE1BQU9JLEVBQWtCTSxrQkFFbkYsQ0FFQSxPQUFPek4sUUFBUTROLElBQUlWLEVBQ3ZCLEVBV0ExQyxFQUFnQ3pFLFVBQVU2RyxnQkFBa0IsV0FDeEQsT0FBT2lCLEVBQUFBLG9CQUNYLEVBRUFyRCxFQUFnQ3pFLFVBQVUrRyxhQUFlLFNBQVVDLEVBQWdCQyxFQUFhQyxHQUM1RixJQUFJQyxFQUFVLEdBRVYzQixFQUFZeUIsRUFBWXhELFdBQVd4VyxLQUFLK0UsTUFvQjVDLFFBbEJrQ0wsSUFBOUI2VCxFQUFVdUMsa0JBQ1ZmLEVBQWVnQixVQUFZeEMsRUFBVXVDLHNCQUdOcFcsSUFBL0I2VCxFQUFVeUMsa0JBQ1ZkLEVBQVFRLEtBQUtULEVBQU9VLGNBQWNaLEVBQWdCLGVBQWdCeEIsRUFBVXlDLHdCQUdyQ3RXLElBQXZDNlQsRUFBVTBDLDJCQUNWbEIsRUFBZW1CLG1CQUFxQjNDLEVBQVUwQywrQkFHTnZXLElBQXhDNlQsRUFBVTRDLDJCQUNWakIsRUFBUVEsS0FDSlQsRUFBT1UsY0FBY1osRUFBZ0Isd0JBQXlCeEIsRUFBVTRDLGlDQUl2Q3pXLElBQXJDNlQsRUFBVTZDLHlCQUNWbEIsRUFBUVEsS0FBS1QsRUFBT1UsY0FBY1osRUFBZ0IscUJBQXNCeEIsRUFBVTZDLDhCQUVuQzFXLElBQTNDNlQsRUFBVTZDLHVCQUF1QjVZLE9BQXFCLENBQ3RELElBQUlBLEVBQVErVixFQUFVNkMsdUJBQXVCNVksTUFFN0N1WCxFQUFlc0IscUJBQXVCLElBQUlDLEVBQUFBLFFBQVE5WSxFQUFPQSxFQUM3RCxDQUdKLE9BQU93SyxRQUFRNE4sSUFBSVYsRUFDdkIsRUFHQSxJQUFJeEQsRUFBZ0MsT0FDaEM2RSxFQUFpQyxHQUNqQ0MsRUFBK0IsQ0FBRWxPLEtBQU0sV0FBWW1PLElBQUssU0FFNUQsU0FBUzVFLEVBQW9CVCxHQUN6QnBXLEtBQUsrRSxLQUFPNFIsRUFBV0MsZ0JBQ3ZCNVcsS0FBSzROLFFBQVUsS0FDZjVOLEtBQUswYixLQUFPLEtBRVosSUFBSUMsRUFBYSxJQUFJQyxTQUFTeEYsRUFBTSxFQUFHbUYsR0FRdkMsR0FOQXZiLEtBQUs2YixPQUFTLENBQ1ZDLE1BQU90RyxFQUFBQSxZQUFBQSxXQUF1QixJQUFJaUIsV0FBV0wsRUFBS3JGLE1BQU0sRUFBRyxLQUMzRGlHLFFBQVMyRSxFQUFXSSxVQUFVLEdBQUcsR0FDakM3SixPQUFReUosRUFBV0ksVUFBVSxHQUFHLElBR2hDL2IsS0FBSzZiLE9BQU9DLFFBQVVwRixFQUN0QixNQUFNLElBQUlPLE1BQU0scURBQ2IsR0FBSWpYLEtBQUs2YixPQUFPN0UsUUFBVSxFQUM3QixNQUFNLElBQUlDLE1BQU0sa0RBTXBCLElBSEEsSUFBSStFLEVBQVksSUFBSUosU0FBU3hGLEVBQU1tRixHQUMvQlUsRUFBYSxFQUVWQSxFQUFhRCxFQUFVRSxZQUFZLENBQ3RDLElBQUlDLEVBQWNILEVBQVVELFVBQVVFLEdBQVksR0FDbERBLEdBQWMsRUFFZCxJQUFJRyxFQUFZSixFQUFVRCxVQUFVRSxHQUFZLEdBR2hELEdBRkFBLEdBQWMsRUFFVkcsSUFBY1osRUFBNkJsTyxLQUFNLENBQ2pELElBQUkrTyxFQUFlLElBQUk1RixXQUFXTCxFQUFNbUYsRUFBaUNVLEVBQVlFLEdBQ3JGbmMsS0FBSzROLFFBQVU0SCxFQUFBQSxZQUFBQSxXQUF1QjZHLEVBQzFDLE1BQU8sR0FBSUQsSUFBY1osRUFBNkJDLElBQUssQ0FDdkQsSUFBSWEsRUFBYWYsRUFBaUNVLEVBQ2xEamMsS0FBSzBiLEtBQU90RixFQUFLckYsTUFBTXVMLEVBQVlBLEVBQWFILEVBQ3BELENBSUFGLEdBQWNFLENBQ2xCLENBRUEsR0FBcUIsT0FBakJuYyxLQUFLNE4sUUFDTCxNQUFNLElBQUlxSixNQUFNLDRDQUV4QixDQU9BLFNBQVNhLEVBQWtDaEIsRUFBTWxDLEdBQzdDLElBQUtBLEVBQ0QsTUFBTSxJQUFJcUMsTUFBTSx1REFHcEJqWCxLQUFLK0UsS0FBTzRSLEVBQVdrQiwyQkFDdkI3WCxLQUFLOFcsS0FBT0EsRUFDWjlXLEtBQUs0VSxZQUFjQSxFQUNuQjVVLEtBQUs0VSxZQUFZMkgsU0FDckIsQ0F1REEsU0FBU3JFLElBQ0xsWSxLQUFLK0UsS0FBTzRSLEVBQVdzQixxQkFDM0IsQ0FzQ0EsU0FBU3VFLEVBQTJCQyxHQUNoQ0MsRUFBQUEscUJBQUFBLEtBQTBCMWMsTUFFMUJBLEtBQUsyYyxrQ0FBbUMsRUFHeEMsSUFBSUMsRUFBK0IsQ0FBQyx5QkFBMEIsbUNBQW1DLFVBQVU1TCxLQUN2RyxNQUdBNkwsRUFBaUMsQ0FDakMsMkJBQ0EscUNBQ0EsVUFDRjdMLEtBQUssTUFFSDhMLEVBQTJCLENBQzNCLGtDQUNBLHlCQUNBLHdEQUNBLG1EQUNBLG9GQUNBLHlDQUNBLFVBQ0Y5TCxLQUFLLE1BRUgrTCxFQUE2QixDQUM3Qix1Q0FDQSwyQkFDQSw0REFDQSxrRkFDQSwyQ0FDQSxVQUNGL0wsS0FBSyxNQUVIZ00sRUFBNkIsQ0FDN0IsNkJBQ0EsNENBQ0Esa0ZBQ0EsK0RBQ0EsNkhBQ0EsbURBQ0EsdUVBQ0EsZ0RBQ0ZoTSxLQUFLLE1BRUhpTSxFQUFXLENBQ1hDLFNBQVUsQ0FBRTVOLE9BQU8sSUFBSXdKLEVBQUFBLE9BQVFxRSxPQUFPLFdBQ3RDQyxXQUFZLENBQUU5TixNQUFPLEdBQ3JCK04sWUFBYSxDQUFFL04sTUFBTyxNQUN0QmdPLGNBQWUsQ0FBRWhPLE1BQU8sT0FHNUJ0UCxLQUFLdWQsZUFBaUJOLEVBR3RCamQsS0FBS3dkLGdCQUFrQixTQUFVQyxHQUM3QixJQUFLLElBQUlDLEtBQWVULEVBQ3BCUSxFQUFPUixTQUFTUyxHQUFlVCxFQUFTUyxHQUc1Q0QsRUFBT0UsZUFBaUJGLEVBQU9FLGVBQWV2TyxRQUFRLDJCQUE0QiwwQkFDbEZxTyxFQUFPRSxlQUFpQkYsRUFBT0UsZUFBZXZPLFFBQzFDLDJCQUNBLDZCQUVKcU8sRUFBT0UsZUFBaUJGLEVBQU9FLGVBQWV2TyxRQUMxQyx3Q0FDQXdOLEdBRUphLEVBQU9FLGVBQWlCRixFQUFPRSxlQUFldk8sUUFDMUMsd0NBQ0F5TixHQUVKWSxFQUFPRSxlQUFpQkYsRUFBT0UsZUFBZXZPLFFBQzFDLG1DQUNBME4sR0FFSlcsRUFBT0UsZUFBaUJGLEVBQU9FLGVBQWV2TyxRQUMxQyxtQ0FDQTJOLEdBRUpVLEVBQU9FLGVBQWlCRixFQUFPRSxlQUFldk8sUUFDMUMsc0NBQ0E0TixFQUVSLEVBR0E3VixPQUFPeVcsaUJBQWlCNWQsS0FBTSxDQUMxQmtkLFNBQVUsQ0FDTm5JLElBQUssV0FDRCxPQUFPa0ksRUFBU0MsU0FBUzVOLEtBQzdCLEVBQ0FsUCxJQUFLLFNBQVV5ZCxHQUNYWixFQUFTQyxTQUFTNU4sTUFBUXVPLENBQzlCLEdBRUpSLFlBQWEsQ0FDVHRJLElBQUssV0FDRCxPQUFPa0ksRUFBU0ksWUFBWS9OLEtBQ2hDLEVBQ0FsUCxJQUFLLFNBQVV5ZCxHQUNYWixFQUFTSSxZQUFZL04sTUFBUXVPLENBQ2pDLEdBRUpULFdBQVksQ0FDUnJJLElBQUssV0FDRCxPQUFPa0ksRUFBU0csV0FBVzlOLEtBQy9CLEVBQ0FsUCxJQUFLLFNBQVV5ZCxHQUNYWixFQUFTRyxXQUFXOU4sTUFBUXVPLENBQ2hDLEdBRUpQLGNBQWUsQ0FDWHZJLElBQUssV0FDRCxPQUFPa0ksRUFBU0ssY0FBY2hPLEtBQ2xDLEVBQ0FsUCxJQUFLLFNBQVV5ZCxHQUNYWixFQUFTSyxjQUFjaE8sTUFBUXVPLEVBRTNCQSxHQUNBN2QsS0FBSzhkLFFBQVFDLGtCQUFvQixHQUVqQy9kLEtBQUs4ZCxRQUFRRSxpQkFBbUIsWUFFekJoZSxLQUFLOGQsUUFBUUUsd0JBQ2JoZSxLQUFLOGQsUUFBUUMsa0JBRTVCLFlBS0QvZCxLQUFLNEcsaUJBQ0w1RyxLQUFLMkcsaUJBQ0wzRyxLQUFLaWUsb0JBQ0xqZSxLQUFLa2UsYUFFWmxlLEtBQUttZSxVQUFVMUIsRUFDbkIsQ0FrQkEsU0FBUzdFLElBQ0wsTUFBTyxDQUNIN1MsS0FBTTRSLEVBQVdnQixzQ0FFakJ5Ryx5QkFBMEIsQ0FDdEIsUUFDQSxNQUNBLFdBQ0Esb0JBQ0EsUUFDQSxpQkFDQSxXQUNBLG9CQUNBLGNBQ0EsVUFDQSxZQUNBLFlBQ0EsZ0JBQ0Esa0JBQ0Esb0JBQ0EsbUJBQ0EsY0FDQSxXQUNBLGdCQUNBLGFBQ0EsV0FDQSxTQUNBLGtCQUNBLG1CQUdKeEUsZ0JBQWlCLFdBQ2IsT0FBTzRDLENBQ1gsRUFFQTFDLGFBQWMsU0FBVUMsRUFBZ0JDLEVBQWFDLEdBQ2pELElBQUlvRSxFQUF3QnJFLEVBQVl4RCxXQUFXeFcsS0FBSytFLE1BRXhEZ1YsRUFBZTVYLE1BQVEsSUFBSTJXLEVBQUFBLE1BQU0sRUFBSyxFQUFLLEdBQzNDaUIsRUFBZTdXLFFBQVUsRUFFekIsSUFBSWdYLEVBQVUsR0FFZCxHQUFJRyxNQUFNQyxRQUFRK0QsRUFBc0JDLGVBQWdCLENBQ3BELElBQUk5RCxFQUFRNkQsRUFBc0JDLGNBRWxDdkUsRUFBZTVYLE1BQU00VyxVQUFVeUIsR0FDL0JULEVBQWU3VyxRQUFVc1gsRUFBTSxFQUNuQyxDQWVBLFFBYjZDOVYsSUFBekMyWixFQUFzQkUsZ0JBQ3RCckUsRUFBUVEsS0FBS1QsRUFBT1UsY0FBY1osRUFBZ0IsTUFBT3NFLEVBQXNCRSxpQkFHbkZ4RSxFQUFlbFMsU0FBVyxJQUFJaVIsRUFBQUEsTUFBTSxFQUFLLEVBQUssR0FDOUNpQixFQUFlcUQsZ0JBQ2dDMVksSUFBM0MyWixFQUFzQkcsaUJBQWlDSCxFQUFzQkcsaUJBQW1CLEVBQ3BHekUsRUFBZW1ELFNBQVcsSUFBSXBFLEVBQUFBLE1BQU0sRUFBSyxFQUFLLEdBRTFDdUIsTUFBTUMsUUFBUStELEVBQXNCSSxpQkFDcEMxRSxFQUFlbUQsU0FBU25FLFVBQVVzRixFQUFzQkkscUJBR0ovWixJQUFwRDJaLEVBQXNCSywwQkFBeUMsQ0FDL0QsSUFBSUMsRUFBa0JOLEVBQXNCSywwQkFDNUN4RSxFQUFRUSxLQUFLVCxFQUFPVSxjQUFjWixFQUFnQixnQkFBaUI0RSxJQUNuRXpFLEVBQVFRLEtBQUtULEVBQU9VLGNBQWNaLEVBQWdCLGNBQWU0RSxHQUNyRSxDQUVBLE9BQU8zUixRQUFRNE4sSUFBSVYsRUFDdkIsRUFFQXhTLGVBQWdCLFNBQVVxUyxHQUN0QixJQUFJN1gsRUFBVyxJQUFJc2EsRUFBMkJ6QyxHQTJDOUMsT0ExQ0E3WCxFQUFTOEgsS0FBTSxFQUVmOUgsRUFBU0MsTUFBUTRYLEVBQWU1WCxNQUVoQ0QsRUFBUzBPLFNBQTZCbE0sSUFBdkJxVixFQUFlbkosSUFBb0IsS0FBT21KLEVBQWVuSixJQUV4RTFPLEVBQVMwYyxTQUFXLEtBQ3BCMWMsRUFBUzJjLGtCQUFvQixFQUU3QjNjLEVBQVM0YyxXQUFpQ3BhLElBQXpCcVYsRUFBZStFLE1BQXNCLEtBQU8vRSxFQUFlK0UsTUFDNUU1YyxFQUFTNmMsZUFBaUIsRUFFMUI3YyxFQUFTMkYsU0FBV2tTLEVBQWVsUyxTQUNuQzNGLEVBQVM4YyxrQkFBb0IsRUFDN0I5YyxFQUFTK2MsaUJBQTZDdmEsSUFBL0JxVixFQUFla0YsWUFBNEIsS0FBT2xGLEVBQWVrRixZQUV4Ri9jLEVBQVNnZCxhQUFxQ3hhLElBQTNCcVYsRUFBZW1GLFFBQXdCLEtBQU9uRixFQUFlbUYsUUFDaEZoZCxFQUFTaWQsVUFBWSxFQUVyQmpkLEVBQVNrZCxlQUF5QzFhLElBQTdCcVYsRUFBZXFGLFVBQTBCLEtBQU9yRixFQUFlcUYsVUFDcEZsZCxFQUFTbWQsY0FBZ0JDLEVBQUFBLHNCQUVyQnZGLEVBQWV3RixjQUFhcmQsRUFBU3FkLFlBQWN4RixFQUFld0YsYUFFdEVyZCxFQUFTc2QsZ0JBQWtCLEtBQzNCdGQsRUFBU3VkLGtCQUFvQixFQUM3QnZkLEVBQVN3ZCxpQkFBbUIsRUFFNUJ4ZCxFQUFTbWIsaUJBQTZDM1ksSUFBL0JxVixFQUFlc0QsWUFBNEIsS0FBT3RELEVBQWVzRCxZQUN4Rm5iLEVBQVNnYixTQUFXbkQsRUFBZW1ELFNBRW5DaGIsRUFBU29iLG1CQUM0QjVZLElBQWpDcVYsRUFBZXVELGNBQThCLEtBQU92RCxFQUFldUQsY0FDdkVwYixFQUFTa2IsV0FBYXJELEVBQWVxRCxXQUVyQ2xiLEVBQVN5ZCxTQUFXLEtBRXBCemQsRUFBUzBkLFlBQW1DbGIsSUFBMUJxVixFQUFlNkYsT0FBdUIsS0FBTzdGLEVBQWU2RixPQUM5RTFkLEVBQVMyZCxnQkFBa0IsRUFFM0IzZCxFQUFTNGQsZ0JBQWtCLElBRXBCNWQsQ0FDWCxFQUVSLENBT0EsU0FBU2tXLElBQ0xwWSxLQUFLK0UsS0FBTzRSLEVBQVd3QixxQkFDM0IsQ0FRQSxTQUFTNEgsRUFBMkJDLEVBQW9CQyxFQUFjQyxFQUFZQyxHQUM5RUMsRUFBQUEsWUFBQUEsS0FBaUJwZ0IsS0FBTWdnQixFQUFvQkMsRUFBY0MsRUFBWUMsRUFDekUsQ0FyWUFySSxFQUFrQy9FLFVBQVVzTixnQkFBa0IsU0FBVUMsRUFBV3JHLEdBQy9FLElBQUluRCxFQUFPOVcsS0FBSzhXLEtBQ1psQyxFQUFjNVUsS0FBSzRVLFlBQ25CMkwsRUFBa0JELEVBQVU5SixXQUFXeFcsS0FBSytFLE1BQU15YixXQUNsREMsRUFBbUJILEVBQVU5SixXQUFXeFcsS0FBSytFLE1BQU1xTixXQUNuRHNPLEVBQW9CLENBQUMsRUFDckJDLEVBQXlCLENBQUMsRUFDMUJDLEVBQW1CLENBQUMsRUFFeEIsSUFBSyxJQUFJQyxLQUFpQkosRUFBa0IsQ0FDeEMsSUFBSUssRUFBcUJDLEVBQVdGLElBQWtCQSxFQUFjRyxjQUVwRU4sRUFBa0JJLEdBQXNCTCxFQUFpQkksRUFDN0QsQ0FFQSxJQUFLQSxLQUFpQlAsRUFBVWxPLFdBQVksQ0FDcEMwTyxFQUFxQkMsRUFBV0YsSUFBa0JBLEVBQWNHLGNBRXBFLFFBQXdDdGMsSUFBcEMrYixFQUFpQkksR0FBOEIsQ0FDL0MsSUFBSUksRUFBY25LLEVBQUtvSyxVQUFVWixFQUFVbE8sV0FBV3lPLElBQ2xETSxFQUFnQkMsRUFBc0JILEVBQVlFLGVBRXREUCxFQUFpQkUsR0FBc0JLLEVBQ3ZDUixFQUF1QkcsSUFBaUQsSUFBM0JHLEVBQVlJLFVBQzdELENBQ0osQ0FFQSxPQUFPcEgsRUFBT3FILGNBQWMsYUFBY2YsR0FBaUJnQixNQUFLLFNBQVVmLEdBQ3RFLE9BQU8sSUFBSXhULFNBQVEsU0FBVUMsR0FDekIySCxFQUFZNE0sZ0JBQ1JoQixHQUNBLFNBQVV2ZSxHQUNOLElBQUssSUFBSTRlLEtBQWlCNWUsRUFBU21RLFdBQVksQ0FDM0MsSUFBSXFQLEVBQVl4ZixFQUFTbVEsV0FBV3lPLEdBQ2hDUSxFQUFhVixFQUF1QkUsUUFFckJuYyxJQUFmMmMsSUFBMEJJLEVBQVVKLFdBQWFBLEVBQ3pELENBRUFwVSxFQUFRaEwsRUFDWixHQUNBeWUsRUFDQUUsRUFFUixHQUNKLEdBQ0osRUFXQTFJLEVBQThCbkYsVUFBVTJPLGNBQWdCLFNBQVVDLEVBQVNDLEdBcUJ2RSxPQXBCQUQsRUFBVUEsRUFBUUUsYUFFT25kLElBQXJCa2QsRUFBVUUsUUFDVkgsRUFBUUcsT0FBTy9JLFVBQVU2SSxFQUFVRSxhQUdacGQsSUFBdkJrZCxFQUFVN2UsV0FDVjRlLEVBQVE1ZSxTQUFXNmUsRUFBVTdlLGVBR1QyQixJQUFwQmtkLEVBQVVwZixPQUNWbWYsRUFBUUksT0FBT2hKLFVBQVU2SSxFQUFVcGYsWUFHWmtDLElBQXZCa2QsRUFBVUksVUFDVjlpQixRQUFRbVosS0FBSyx3Q0FBMENyWSxLQUFLK0UsS0FBTyxrQ0FHdkU0YyxFQUFRbk4sYUFBYyxFQUVmbU4sQ0FDWCxFQTRKQW5GLEVBQTJCekosVUFBWTVMLE9BQU9JLE9BQU9tVixFQUFBQSxxQkFBQUEsV0FDckRGLEVBQTJCekosVUFBVUMsWUFBY3dKLEVBRW5EQSxFQUEyQnpKLFVBQVVjLEtBQU8sU0FBVW9PLEdBVWxELE9BVEF2RixFQUFBQSxxQkFBQUEsVUFBQUEsS0FBQUEsS0FBeUMxYyxLQUFNaWlCLEdBQy9DamlCLEtBQUtxZCxZQUFjNEUsRUFBTzVFLFlBQzFCcmQsS0FBS2tkLFNBQVNySixLQUFLb08sRUFBTy9FLFVBQzFCbGQsS0FBS3NkLGNBQWdCMkUsRUFBTzNFLGNBQzVCdGQsS0FBS29kLFdBQWE2RSxFQUFPN0Usa0JBQ2xCcGQsS0FBSzRHLGlCQUNMNUcsS0FBSzJHLGlCQUNMM0csS0FBS2llLG9CQUNMamUsS0FBS2tlLGFBQ0xsZSxJQUNYLEVBOElBK2YsRUFBMkJoTixVQUFZNUwsT0FBT0ksT0FBTzZZLEVBQUFBLFlBQUFBLFdBQ3JETCxFQUEyQmhOLFVBQVVDLFlBQWMrTSxFQUVuREEsRUFBMkJoTixVQUFVbVAsaUJBQW1CLFNBQVVDLEdBUzlELElBTEEsSUFBSUMsRUFBU3BpQixLQUFLbWdCLGFBQ2RrQyxFQUFTcmlCLEtBQUtpZ0IsYUFDZHFDLEVBQVl0aUIsS0FBS3NpQixVQUNqQlIsRUFBU0ssRUFBUUcsRUFBWSxFQUFJQSxFQUU1QmhQLEVBQUksRUFBR0EsSUFBTWdQLEVBQVdoUCxJQUM3QjhPLEVBQU85TyxHQUFLK08sRUFBT1AsRUFBU3hPLEdBR2hDLE9BQU84TyxDQUNYLEVBRUFyQyxFQUEyQmhOLFVBQVV3UCxhQUFleEMsRUFBMkJoTixVQUFVbVAsaUJBRXpGbkMsRUFBMkJoTixVQUFVeVAsVUFBWXpDLEVBQTJCaE4sVUFBVW1QLGlCQUV0Rm5DLEVBQTJCaE4sVUFBVTBQLGFBQWUsU0FBVUMsRUFBSUMsRUFBSUMsRUFBR0MsR0F3QnJFLElBdkJBLElBQUlULEVBQVNwaUIsS0FBS21nQixhQUNka0MsRUFBU3JpQixLQUFLaWdCLGFBQ2Q2QyxFQUFTOWlCLEtBQUtzaUIsVUFFZFMsRUFBbUIsRUFBVEQsRUFDVkUsRUFBbUIsRUFBVEYsRUFFVkcsRUFBS0osRUFBS0YsRUFFVk8sR0FBS04sRUFBSUQsR0FBTU0sRUFDZkUsRUFBS0QsRUFBSUEsRUFDVEUsRUFBTUQsRUFBS0QsRUFFWEcsRUFBVVgsRUFBS00sRUFDZk0sRUFBVUQsRUFBVUwsRUFFcEJPLEdBQU0sRUFBSUgsRUFBTSxFQUFJRCxFQUNwQkssRUFBS0osRUFBTUQsRUFDWE0sRUFBSyxFQUFJRixFQUNURyxFQUFLRixFQUFLTCxFQUFLRCxFQUlWNVAsRUFBSSxFQUFHQSxJQUFNd1AsRUFBUXhQLElBQUssQ0FDL0IsSUFBSXFRLEVBQUt0QixFQUFPaUIsRUFBVWhRLEVBQUl3UCxHQUMxQmMsRUFBS3ZCLEVBQU9pQixFQUFVaFEsRUFBSXlQLEdBQVdFLEVBQ3JDWSxFQUFLeEIsRUFBT2dCLEVBQVUvUCxFQUFJd1AsR0FDMUJnQixFQUFLekIsRUFBT2dCLEVBQVUvUCxHQUFLMlAsRUFFL0JiLEVBQU85TyxHQUFLbVEsRUFBS0UsRUFBS0QsRUFBS0UsRUFBS0wsRUFBS00sRUFBS0wsRUFBS00sQ0FDbkQsQ0FFQSxPQUFPMUIsQ0FDWCxFQVFBLElBQUkyQixFQVdRLEVBWFJBLEVBWU8sRUFaUEEsRUFhVyxFQWJYQSxFQWNZLEVBZFpBLEVBZVcsRUFmWEEsRUFnQmdCLEVBaEJoQkEsRUFpQmMsRUFLZDNDLEVBQXdCLENBQ3hCLEtBQU00QyxVQUNOLEtBQU12TixXQUNOLEtBQU13TixXQUNOLEtBQU1DLFlBQ04sS0FBTUMsWUFDTixLQUFNQyxjQUdOQyxFQUFnQixDQUNoQixLQUFNQyxFQUFBQSxjQUNOLEtBQU1DLEVBQUFBLGFBQ04sS0FBTUMsRUFBQUEsMkJBQ04sS0FBTUMsRUFBQUEsMEJBQ04sS0FBTUMsRUFBQUEsMEJBQ04sS0FBTUMsRUFBQUEsMEJBR05DLEVBQWtCLENBQ2xCLE1BQU9DLEVBQUFBLG9CQUNQLE1BQU9DLEVBQUFBLHVCQUNQLE1BQU9DLEVBQUFBLGdCQUdQQyxFQUFtQixDQUNuQkMsT0FBUSxFQUNSQyxLQUFNLEVBQ05DLEtBQU0sRUFDTkMsS0FBTSxFQUNOQyxLQUFNLEVBQ05DLEtBQU0sRUFDTkMsS0FBTSxJQUdOeEUsRUFBYSxDQUNieUUsU0FBVSxXQUNWQyxPQUFRLFNBQ1JDLFFBQVMsVUFDVEMsV0FBWSxLQUNaQyxXQUFZLE1BQ1pDLFFBQVMsUUFDVEMsVUFBVyxhQUNYQyxTQUFVLGFBR1ZDLEVBQWtCLENBQ2xCeGpCLE1BQU8sUUFDUHlqQixZQUFhLFdBQ2JsakIsU0FBVSxhQUNWbWpCLFFBQVMseUJBR1RDLEVBQWdCLENBQ2hCQyxpQkFBYTFoQixFQUViMmhCLE9BQVFDLEVBQUFBLGtCQUNSQyxLQUFNQyxFQUFBQSxxQkFHTkMsRUFDUSxTQURSQSxFQUVNLE9BRk5BLEVBR08sUUFHUEMsRUFBb0IsQ0FDcEIsWUFBYUMsRUFBQUEsV0FDYixhQUFjQyxFQUFBQSxXQUtsQixTQUFTQyxFQUFXM1IsRUFBSzFGLEdBRXJCLE1BQW1CLGlCQUFSMEYsR0FBNEIsS0FBUkEsRUFBbUIsSUFHOUMsZ0JBQWdCNFIsS0FBS3RYLElBQVMsTUFBTXNYLEtBQUs1UixLQUV6QzFGLEVBQU9BLEVBQUtKLFFBQVEsMEJBQTJCLE9BSS9DLG1CQUFtQjBYLEtBQUs1UixJQUd4QixnQkFBZ0I0UixLQUFLNVIsSUFHckIsYUFBYTRSLEtBQUs1UixHQU5tQkEsRUFTbEMxRixFQUFPMEYsRUFDbEIsQ0FxQkEsU0FBUzZSLEVBQStCQyxFQUFpQnhpQixFQUFReWlCLEdBRzdELElBQUssSUFBSWxpQixLQUFRa2lCLEVBQVV6USxnQkFDTzlSLElBQTFCc2lCLEVBQWdCamlCLEtBQ2hCUCxFQUFPbkMsU0FBUzZrQixlQUFpQjFpQixFQUFPbkMsU0FBUzZrQixnQkFBa0IsQ0FBQyxFQUNwRTFpQixFQUFPbkMsU0FBUzZrQixlQUFlbmlCLEdBQVFraUIsRUFBVXpRLFdBQVd6UixHQUd4RSxDQU1BLFNBQVNvaUIsRUFBdUIzaUIsRUFBUTRpQixRQUNiMWlCLElBQW5CMGlCLEVBQVFDLFNBQ3NCLFdBQTFCLEVBQU9ELEVBQVFDLFFBQ2ZsZ0IsT0FBTzhOLE9BQU96USxFQUFPbkMsU0FBVStrQixFQUFRQyxRQUV2Q25vQixRQUFRbVosS0FBSyxzREFBd0QrTyxFQUFRQyxRQUd6RixDQW9FQSxTQUFTQyxFQUFtQjFqQixFQUFNMmpCLEdBRzlCLEdBRkEzakIsRUFBSzBqQiwwQkFFbUI1aUIsSUFBcEI2aUIsRUFBUXJCLFFBQ1IsSUFBSyxJQUFJNVMsRUFBSSxFQUFHa1UsRUFBS0QsRUFBUXJCLFFBQVFoVSxPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUNqRDFQLEVBQUs2akIsc0JBQXNCblUsR0FBS2lVLEVBQVFyQixRQUFRNVMsR0FLeEQsR0FBSWlVLEVBQVFGLFFBQVVoTixNQUFNQyxRQUFRaU4sRUFBUUYsT0FBT0ssYUFBYyxDQUM3RCxJQUFJQSxFQUFjSCxFQUFRRixPQUFPSyxZQUVqQyxHQUFJOWpCLEVBQUs2akIsc0JBQXNCdlYsU0FBV3dWLEVBQVl4VixPQUFRLENBQzFEdE8sRUFBSytqQixzQkFBd0IsQ0FBQyxFQUU5QixJQUFTclUsRUFBSSxFQUFHa1UsRUFBS0UsRUFBWXhWLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQzdDMVAsRUFBSytqQixzQkFBc0JELEVBQVlwVSxJQUFNQSxDQUVyRCxNQUNJcFUsUUFBUW1aLEtBQUssdUVBRXJCLENBQ0osQ0FzQkEsU0FBU3VQLEVBQW9CeFYsR0FLekIsSUFKQSxJQUFJeVYsRUFBZ0IsR0FFaEJDLEVBQU8zZ0IsT0FBTzJnQixLQUFLMVYsR0FBWTJWLE9BRTFCelUsRUFBSSxFQUFHa1UsRUFBS00sRUFBSzVWLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQ3RDdVUsR0FBaUJDLEVBQUt4VSxHQUFLLElBQU1sQixFQUFXMFYsRUFBS3hVLElBQU0sSUFHM0QsT0FBT3VVLENBQ1gsQ0FJQSxTQUFTdlAsRUFBV3hCLEVBQU1OLEVBQVl3UixHQUNsQ2hvQixLQUFLOFcsS0FBT0EsR0FBUSxDQUFDLEVBQ3JCOVcsS0FBS3dXLFdBQWFBLEdBQWMsQ0FBQyxFQUNqQ3hXLEtBQUtnb0IsUUFBVUEsR0FBVyxDQUFDLEVBRzNCaG9CLEtBQUtpb0IsTUFBUSxJQUFJblQsRUFHakI5VSxLQUFLa29CLGVBQWlCLENBQUMsRUFFdkJsb0IsS0FBS21vQixjQUFnQixJQUFJQyxFQUFBQSxjQUFjcG9CLEtBQUtnb0IsUUFBUXRULFNBQ3BEMVUsS0FBS21vQixjQUFjRSxlQUFlcm9CLEtBQUtnb0IsUUFBUTlSLGFBRS9DbFcsS0FBS3NvQixXQUFhLElBQUl2UyxFQUFBQSxXQUFXL1YsS0FBS2dvQixRQUFRdFQsU0FDOUMxVSxLQUFLc29CLFdBQVdyUyxnQkFBZ0IsZUFFQyxvQkFBN0JqVyxLQUFLZ29CLFFBQVE5UixhQUNibFcsS0FBS3NvQixXQUFXblMsb0JBQW1CLEVBRTNDLENBc3lCQSxTQUFTb1MsRUFBdUJ0bUIsRUFBVXVtQixFQUFjdk8sR0FDcEQsSUFBSTdILEVBQWFvVyxFQUFhcFcsV0FFMUI4SCxFQUFVLEdBRWQsU0FBU3VPLEVBQXdCQyxFQUFlN0gsR0FDNUMsT0FBTzVHLEVBQU9xSCxjQUFjLFdBQVlvSCxHQUFlbkgsTUFBSyxTQUFVb0gsR0FDbEUxbUIsRUFBUzRMLGFBQWFnVCxFQUFlOEgsRUFDekMsR0FDSixDQUVBLElBQUssSUFBSUMsS0FBcUJ4VyxFQUFZLENBQ3RDLElBQUkwTyxFQUFxQkMsRUFBVzZILElBQXNCQSxFQUFrQjVILGNBR3hFRixLQUFzQjdlLEVBQVNtUSxZQUVuQzhILEVBQVFRLEtBQUsrTixFQUF3QnJXLEVBQVd3VyxHQUFvQjlILEdBQ3hFLENBRUEsUUFBNkJwYyxJQUF6QjhqQixFQUFhSyxVQUEwQjVtQixFQUFTa2dCLE1BQU8sQ0FDdkQsSUFBSXdHLEVBQVcxTyxFQUFPcUgsY0FBYyxXQUFZa0gsRUFBYUssU0FBU3RILE1BQUssU0FBVW9ILEdBQ2pGMW1CLEVBQVM2bUIsU0FBU0gsRUFDdEIsSUFFQXpPLEVBQVFRLEtBQUtpTyxFQUNqQixDQU1BLE9BSkF4QixFQUF1QmxsQixFQUFVdW1CLEdBekdyQyxTQUF1QnZtQixFQUFVdW1CLEVBQWN2TyxHQUMzQyxJQUFJN0gsRUFBYW9XLEVBQWFwVyxXQUUxQjJXLEVBQU0sSUFBSUMsRUFBQUEsS0FFZCxRQUE0QnRrQixJQUF4QjBOLEVBQVdvVCxTQUFmLENBQ0ksSUFFSTdaLEdBRkFnZCxFQUFXMU8sRUFBT25ELEtBQUtvSyxVQUFVOU8sRUFBV29ULFdBRTdCN1osSUFDZkMsRUFBTStjLEVBQVMvYyxJQUluQixRQUFZbEgsSUFBUmlILFFBQTZCakgsSUFBUmtILEVBQXpCLENBQ0ltZCxFQUFJM29CLElBQUksSUFBSW1SLEVBQUFBLFFBQVE1RixFQUFJLEdBQUlBLEVBQUksR0FBSUEsRUFBSSxJQUFLLElBQUk0RixFQUFBQSxRQUFRM0YsRUFBSSxHQUFJQSxFQUFJLEdBQUlBLEVBQUksS0FVckYsSUFBSXFkLEVBQVVULEVBQWFTLFFBRTNCLFFBQWdCdmtCLElBQVp1a0IsRUFBdUIsQ0FJdkIsSUFIQSxJQUFJQyxFQUFrQixJQUFJM1gsRUFBQUEsUUFDdEI0WCxFQUFTLElBQUk1WCxFQUFBQSxRQUVSK0IsRUFBSSxFQUFHa1UsRUFBS3lCLEVBQVEvVyxPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUFLLENBQzlDLElBR1FxVixFQUhKNW5CLEVBQVNrb0IsRUFBUTNWLEdBRXJCLFFBQXdCNU8sSUFBcEIzRCxFQUFPeWtCLFNBRUg3WixHQURBZ2QsRUFBVzFPLEVBQU9uRCxLQUFLb0ssVUFBVW5nQixFQUFPeWtCLFdBQ3pCN1osSUFDZkMsRUFBTStjLEVBQVMvYyxTQUlQbEgsSUFBUmlILFFBQTZCakgsSUFBUmtILEdBRXJCdWQsRUFBT0MsS0FBS3ZtQixLQUFLK0ksSUFBSS9JLEtBQUt3bUIsSUFBSTFkLEVBQUksSUFBSzlJLEtBQUt3bUIsSUFBSXpkLEVBQUksTUFDcER1ZCxFQUFPRyxLQUFLem1CLEtBQUsrSSxJQUFJL0ksS0FBS3dtQixJQUFJMWQsRUFBSSxJQUFLOUksS0FBS3dtQixJQUFJemQsRUFBSSxNQUNwRHVkLEVBQU9JLEtBQUsxbUIsS0FBSytJLElBQUkvSSxLQUFLd21CLElBQUkxZCxFQUFJLElBQUs5SSxLQUFLd21CLElBQUl6ZCxFQUFJLE1BTXBEc2QsRUFBZ0J0ZCxJQUFJdWQsSUFFcEJqcUIsUUFBUW1aLEtBQUssc0VBR3pCLENBR0EwUSxFQUFJUyxlQUFlTixFQUN2QixDQUVBam5CLEVBQVN3bkIsWUFBY1YsRUFFdkIsSUFBSVcsRUFBUyxJQUFJQyxFQUFBQSxPQUVqQlosRUFBSWEsVUFBVUYsRUFBT0csUUFDckJILEVBQU9qbUIsT0FBU3NsQixFQUFJcGQsSUFBSW1lLFdBQVdmLEVBQUluZCxLQUFPLEVBRTlDM0osRUFBUzhuQixlQUFpQkwsQ0FqRHRCLE1BSEl4cUIsUUFBUW1aLEtBQUssc0VBTXJCLENBK0NKLENBc0NJMlIsQ0FBYy9uQixFQUFVdW1CLEVBQWN2TyxHQUUvQmpOLFFBQVE0TixJQUFJVixHQUFTcUgsTUFBSyxXQUM3QixZQUFnQzdjLElBQXpCOGpCLEVBQWFTLFFBaDlCNUIsU0FBeUJobkIsRUFBVWduQixFQUFTaFAsR0FJeEMsSUFIQSxJQUFJZ1EsR0FBbUIsRUFDbkJDLEdBQWlCLEVBRVo1VyxFQUFJLEVBQUdrVSxFQUFLeUIsRUFBUS9XLE9BQVFvQixFQUFJa1UsU0FHYjlpQixLQUZwQjNELEVBQVNrb0IsRUFBUTNWLElBRVZrUyxXQUF3QnlFLEdBQW1CLFFBQ2hDdmxCLElBQWxCM0QsRUFBTzBrQixTQUFzQnlFLEdBQWlCLElBRTlDRCxJQUFvQkMsR0FOaUI1VyxLQVM3QyxJQUFLMlcsSUFBcUJDLEVBQWdCLE9BQU9sZCxRQUFRQyxRQUFRaEwsR0FFakUsSUFBSWtvQixFQUEyQixHQUMzQkMsRUFBeUIsR0FFN0IsSUFBUzlXLEVBQUksRUFBR2tVLEVBQUt5QixFQUFRL1csT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFBSyxDQUM5QyxJQUFJdlMsRUFBU2tvQixFQUFRM1YsR0FFckIsR0FBSTJXLEVBQWtCLENBQ2xCLElBQUlJLE9BQ29CM2xCLElBQXBCM0QsRUFBT3lrQixTQUNEdkwsRUFBT3FILGNBQWMsV0FBWXZnQixFQUFPeWtCLFVBQ3hDdmpCLEVBQVNtUSxXQUFXalMsU0FFOUJncUIsRUFBeUJ6UCxLQUFLMlAsRUFDbEMsQ0FFSUgsSUFDSUcsT0FDa0IzbEIsSUFBbEIzRCxFQUFPMGtCLE9BQ0R4TCxFQUFPcUgsY0FBYyxXQUFZdmdCLEVBQU8wa0IsUUFDeEN4akIsRUFBU21RLFdBQVdDLE9BRTlCK1gsRUFBdUIxUCxLQUFLMlAsR0FFcEMsQ0FFQSxPQUFPcmQsUUFBUTROLElBQUksQ0FBQzVOLFFBQVE0TixJQUFJdVAsR0FBMkJuZCxRQUFRNE4sSUFBSXdQLEtBQTBCN0ksTUFBSyxTQUNsR0wsR0FFQSxJQUFJb0osRUFBaUJwSixFQUFVLEdBQzNCcUosRUFBZXJKLEVBQVUsR0FNN0IsT0FKSStJLElBQWtCaG9CLEVBQVN1b0IsZ0JBQWdCcnFCLFNBQVdtcUIsR0FDdERKLElBQWdCam9CLEVBQVN1b0IsZ0JBQWdCblksT0FBU2tZLEdBQ3REdG9CLEVBQVN3b0Isc0JBQXVCLEVBRXpCeG9CLENBQ1gsR0FDSixDQTY1QmN5b0IsQ0FBZ0J6b0IsRUFBVXVtQixFQUFhUyxRQUFTaFAsR0FDaERoWSxDQUNWLEdBQ0osQ0FPQSxTQUFTMG9CLEVBQW9CMW9CLEVBQVUyb0IsR0FDbkMsSUFBSXpJLEVBQVFsZ0IsRUFBUzRvQixXQUlyQixHQUFjLE9BQVYxSSxFQUFnQixDQUNoQixJQUFJMEcsRUFBVSxHQUVWMW9CLEVBQVc4QixFQUFTNm9CLGFBQWEsWUFFckMsUUFBaUJwbUIsSUFBYnZFLEVBV0EsT0FIQWpCLFFBQVFnTixNQUNKLGtHQUVHakssRUFWUCxJQUFLLElBQUlxUixFQUFJLEVBQUdBLEVBQUluVCxFQUFTbVMsTUFBT2dCLElBQ2hDdVYsRUFBUW5PLEtBQUtwSCxHQUdqQnJSLEVBQVM2bUIsU0FBU0QsR0FDbEIxRyxFQUFRbGdCLEVBQVM0b0IsVUFPekIsQ0FJQSxJQUFJRSxFQUFvQjVJLEVBQU03UCxNQUFRLEVBQ2xDMFksRUFBYSxHQUVqQixHQUFJSixJQUFhSyxFQUFBQSxvQkFHYixJQUFTM1gsRUFBSSxFQUFHQSxHQUFLeVgsRUFBbUJ6WCxJQUNwQzBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUssSUFDM0IyVyxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixJQUMzQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksU0FLbkMsSUFBU0EsRUFBSSxFQUFHQSxFQUFJeVgsRUFBbUJ6WCxJQUMvQkEsRUFBSSxHQUFNLEdBQ1YwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixJQUMzQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksSUFDL0IwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixFQUFJLE1BRS9CMFgsRUFBV3RRLEtBQUt5SCxFQUFNOU4sS0FBS2YsRUFBSSxJQUMvQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksSUFDL0IwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixLQUtuQzBYLEVBQVc5WSxPQUFTLElBQU02WSxHQUMxQjdyQixRQUFRZ04sTUFBTSwyRkFLbEIsSUFBSWdmLEVBQWNqcEIsRUFBUzRmLFFBRzNCLE9BRkFxSixFQUFZcEMsU0FBU2tDLEdBRWRFLENBQ1gsQ0FnbUJBLE9BaC9DQTVTLEVBQVd2RixVQUFVOUIsTUFBUSxTQUFVa0UsRUFBUUUsR0FDM0MsSUFBSTRFLEVBQVNqYSxLQUNUOFcsRUFBTzlXLEtBQUs4VyxLQUNaTixFQUFheFcsS0FBS3dXLFdBR3RCeFcsS0FBS2lvQixNQUFNalQsWUFHWGhWLEtBQUttckIsV0FFTG5lLFFBQVE0TixJQUFJLENBQUM1YSxLQUFLb3JCLGdCQUFnQixTQUFVcHJCLEtBQUtvckIsZ0JBQWdCLGFBQWNwckIsS0FBS29yQixnQkFBZ0IsWUFDL0Y3SixNQUFLLFNBQVU4SixHQUNaLElBQUlqSixFQUFTLENBQ1QxZixNQUFPMm9CLEVBQWEsR0FBR3ZVLEVBQUtwVSxPQUFTLEdBQ3JDNG9CLE9BQVFELEVBQWEsR0FDckJFLFdBQVlGLEVBQWEsR0FDekJHLFFBQVNILEVBQWEsR0FDdEJ0VSxNQUFPRCxFQUFLQyxNQUNaa0QsT0FBUUEsRUFDUjVYLFNBQVUsQ0FBQyxHQUdmMGtCLEVBQStCdlEsRUFBWTRMLEVBQVF0TCxHQUVuRHFRLEVBQXVCL0UsRUFBUXRMLEdBRS9CM0IsRUFBT2lOLEVBQ1gsSUFBRSxNQUNLL00sRUFDZixFQUtBaUQsRUFBV3ZGLFVBQVVvWSxTQUFXLFdBVTVCLElBVEEsSUFBSU0sRUFBV3pyQixLQUFLOFcsS0FBSzRVLE9BQVMsR0FDOUJDLEVBQVczckIsS0FBSzhXLEtBQUs4VSxPQUFTLEdBQzlCQyxFQUFXN3JCLEtBQUs4VyxLQUFLZ1YsUUFBVSxHQUUvQkMsRUFBaUIsQ0FBQyxFQUNsQkMsRUFBVyxDQUFDLEVBSVBDLEVBQVksRUFBR0MsRUFBYVAsRUFBU3paLE9BQVErWixFQUFZQyxFQUFZRCxJQUcxRSxJQUZBLElBQUlFLEVBQVNSLEVBQVNNLEdBQVdFLE9BRXhCN1ksRUFBSSxFQUFHa1UsRUFBSzJFLEVBQU9qYSxPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUN4Q21ZLEVBQVNVLEVBQU83WSxJQUFJOFksUUFBUyxFQVNyQyxJQUFLLElBQUlDLEVBQVksRUFBR0MsRUFBYWIsRUFBU3ZaLE9BQVFtYSxFQUFZQyxFQUFZRCxJQUFhLENBQ3ZGLElBQUlFLEVBQVVkLEVBQVNZLFFBRUYzbkIsSUFBakI2bkIsRUFBUTNvQixZQUM2QmMsSUFBakNxbkIsRUFBZVEsRUFBUTNvQixRQUN2Qm1vQixFQUFlUSxFQUFRM29CLE1BQVFvb0IsRUFBU08sRUFBUTNvQixNQUFRLEdBRzVEbW9CLEVBQWVRLEVBQVEzb0IsYUFLRmMsSUFBakI2bkIsRUFBUUMsT0FDUlgsRUFBU1UsRUFBUTNvQixNQUFNNm9CLGVBQWdCLEdBR25ELENBRUF6c0IsS0FBSzhXLEtBQUtpVixlQUFpQkEsRUFDM0IvckIsS0FBSzhXLEtBQUtrVixTQUFXQSxDQUN6QixFQVFBMVQsRUFBV3ZGLFVBQVV1TyxjQUFnQixTQUFVaGUsRUFBTTZlLEdBQ2pELElBQUl1SyxFQUFXcHBCLEVBQU8sSUFBTTZlLEVBQ3hCd0ssRUFBYTNzQixLQUFLaW9CLE1BQU1sVCxJQUFJMlgsR0FFaEMsSUFBS0MsRUFBWSxDQUNiLE9BQVFycEIsR0FDSixJQUFLLFFBQ0RxcEIsRUFBYTNzQixLQUFLNHNCLFVBQVV6SyxHQUM1QixNQUVKLElBQUssT0FDRHdLLEVBQWEzc0IsS0FBSzZzQixTQUFTMUssR0FDM0IsTUFFSixJQUFLLE9BQ0R3SyxFQUFhM3NCLEtBQUs4c0IsU0FBUzNLLEdBQzNCLE1BRUosSUFBSyxXQUNEd0ssRUFBYTNzQixLQUFLK3NCLGFBQWE1SyxHQUMvQixNQUVKLElBQUssYUFDRHdLLEVBQWEzc0IsS0FBS2d0QixlQUFlN0ssR0FDakMsTUFFSixJQUFLLFNBQ0R3SyxFQUFhM3NCLEtBQUtpdEIsV0FBVzlLLEdBQzdCLE1BRUosSUFBSyxXQUNEd0ssRUFBYTNzQixLQUFLa3RCLGFBQWEvSyxHQUMvQixNQUVKLElBQUssVUFDRHdLLEVBQWEzc0IsS0FBS210QixZQUFZaEwsR0FDOUIsTUFFSixJQUFLLE9BQ0R3SyxFQUFhM3NCLEtBQUtvdEIsU0FBU2pMLEdBQzNCLE1BRUosSUFBSyxZQUNEd0ssRUFBYTNzQixLQUFLcXRCLGNBQWNsTCxHQUNoQyxNQUVKLElBQUssU0FDRHdLLEVBQWEzc0IsS0FBS3N0QixXQUFXbkwsR0FDN0IsTUFFSixJQUFLLFFBQ0R3SyxFQUFhM3NCLEtBQUt3VyxXQUFXRyxFQUFXVSxxQkFBcUJxQixVQUFVeUosR0FDdkUsTUFFSixRQUNJLE1BQU0sSUFBSWxMLE1BQU0saUJBQW1CM1QsR0FHM0N0RCxLQUFLaW9CLE1BQU10bEIsSUFBSStwQixFQUFVQyxFQUM3QixDQUVBLE9BQU9BLENBQ1gsRUFPQXJVLEVBQVd2RixVQUFVcVksZ0JBQWtCLFNBQVU5bkIsR0FDN0MsSUFBSStuQixFQUFlcnJCLEtBQUtpb0IsTUFBTWxULElBQUl6UixHQUVsQyxJQUFLK25CLEVBQWMsQ0FDZixJQUFJcFIsRUFBU2phLEtBQ1R1dEIsRUFBT3Z0QixLQUFLOFcsS0FBS3hULEdBQWlCLFNBQVRBLEVBQWtCLEtBQU8sT0FBUyxHQUUvRCtuQixFQUFlcmUsUUFBUTROLElBQ25CMlMsRUFBSzNjLEtBQUksU0FBVTRjLEVBQUtyTCxHQUNwQixPQUFPbEksRUFBT3FILGNBQWNoZSxFQUFNNmUsRUFDdEMsS0FHSm5pQixLQUFLaW9CLE1BQU10bEIsSUFBSVcsRUFBTStuQixFQUN6QixDQUVBLE9BQU9BLENBQ1gsRUFPQS9TLEVBQVd2RixVQUFVa2EsV0FBYSxTQUFVUSxHQUN4QyxJQUFJQyxFQUFZMXRCLEtBQUs4VyxLQUFLNlcsUUFBUUYsR0FDOUIzWCxFQUFTOVYsS0FBS3NvQixXQUVsQixHQUFJb0YsRUFBVXBxQixNQUEyQixnQkFBbkJvcUIsRUFBVXBxQixLQUM1QixNQUFNLElBQUkyVCxNQUFNLHFCQUF1QnlXLEVBQVVwcUIsS0FBTyxrQ0FJNUQsUUFBc0JvQixJQUFsQmdwQixFQUFVRSxLQUFxQyxJQUFoQkgsRUFDL0IsT0FBT3pnQixRQUFRQyxRQUFRak4sS0FBS3dXLFdBQVdHLEVBQVdDLGlCQUFpQjhFLE1BR3ZFLElBQUlzTSxFQUFVaG9CLEtBQUtnb0IsUUFFbkIsT0FBTyxJQUFJaGIsU0FBUSxTQUFVQyxFQUFTQyxHQUNsQzRJLEVBQU9qSyxLQUFLZ2IsRUFBVzZHLEVBQVVFLElBQUs1RixFQUFReFksTUFBT3ZDLE9BQVN2SSxHQUFXLFdBQ3JFd0ksRUFBTyxJQUFJK0osTUFBTSw0Q0FBOEN5VyxFQUFVRSxJQUFNLE1BQ25GLEdBQ0osR0FDSixFQU9BdFYsRUFBV3ZGLFVBQVVpYSxlQUFpQixTQUFVek0sR0FDNUMsSUFBSXNOLEVBQWdCN3RCLEtBQUs4VyxLQUFLZ1gsWUFBWXZOLEdBRTFDLE9BQU92Z0IsS0FBS3NoQixjQUFjLFNBQVV1TSxFQUFjRSxRQUFReE0sTUFBSyxTQUFVd00sR0FDckUsSUFBSTdSLEVBQWEyUixFQUFjM1IsWUFBYyxFQUN6Q0ksRUFBYXVSLEVBQWN2UixZQUFjLEVBQzdDLE9BQU95UixFQUFPaGQsTUFBTXVMLEVBQVlBLEVBQWFKLEVBQ2pELEdBQ0osRUFPQTVELEVBQVd2RixVQUFVZ2EsYUFBZSxTQUFVckUsR0FDMUMsSUFBSXpPLEVBQVNqYSxLQUNUOFcsRUFBTzlXLEtBQUs4VyxLQUVabUssRUFBY2poQixLQUFLOFcsS0FBS29LLFVBQVV3SCxHQUV0QyxRQUErQmhrQixJQUEzQnVjLEVBQVlULGlCQUFtRDliLElBQXZCdWMsRUFBWStNLE9BSXBELE9BQU9oaEIsUUFBUUMsUUFBUSxNQUczQixJQUFJZ2hCLEVBQXFCLEdBYXpCLFlBWCtCdnBCLElBQTNCdWMsRUFBWVQsV0FDWnlOLEVBQW1CdlQsS0FBSzFhLEtBQUtzaEIsY0FBYyxhQUFjTCxFQUFZVCxhQUVyRXlOLEVBQW1CdlQsS0FBSyxXQUdEaFcsSUFBdkJ1YyxFQUFZK00sU0FDWkMsRUFBbUJ2VCxLQUFLMWEsS0FBS3NoQixjQUFjLGFBQWNMLEVBQVkrTSxPQUFPbkYsUUFBUXJJLGFBQ3BGeU4sRUFBbUJ2VCxLQUFLMWEsS0FBS3NoQixjQUFjLGFBQWNMLEVBQVkrTSxPQUFPM0wsT0FBTzdCLGNBR2hGeFQsUUFBUTROLElBQUlxVCxHQUFvQjFNLE1BQUssU0FBVXVNLEdBQ2xELElBWUl0VCxFQUFPMFQsRUFaUDFOLEVBQWFzTixFQUFZLEdBRXpCSyxFQUFXbkosRUFBaUIvRCxFQUFZM2QsTUFDeEM4cUIsRUFBYWhOLEVBQXNCSCxFQUFZRSxlQUcvQ2tOLEVBQWVELEVBQVdFLGtCQUMxQkMsRUFBWUYsRUFBZUYsRUFDM0I3UixFQUFhMkUsRUFBWTNFLFlBQWMsRUFDdkNrUyxPQUMyQjlwQixJQUEzQnVjLEVBQVlULFdBQTJCMUosRUFBS2dYLFlBQVk3TSxFQUFZVCxZQUFZZ08sZ0JBQWE5cEIsRUFDN0YyYyxHQUF3QyxJQUEzQkosRUFBWUksV0FJN0IsR0FBSW1OLEdBQWNBLElBQWVELEVBQVcsQ0FHeEMsSUFBSUUsRUFBVTVyQixLQUFLbUYsTUFBTXNVLEVBQWFrUyxHQUNsQ0UsRUFDQSxxQkFDQXpOLEVBQVlULFdBQ1osSUFDQVMsRUFBWUUsY0FDWixJQUNBc04sRUFDQSxJQUNBeE4sRUFBWTNPLE1BQ1pxYyxFQUFLMVUsRUFBT2dPLE1BQU1sVCxJQUFJMlosR0FFckJDLElBQ0RuVSxFQUFRLElBQUk0VCxFQUNSNU4sRUFDQWlPLEVBQVVELEVBQ1R2TixFQUFZM08sTUFBUWtjLEVBQWNILEdBSXZDTSxFQUFLLElBQUlDLEVBQUFBLGtCQUFrQnBVLEVBQU9nVSxFQUFhSCxHQUUvQ3BVLEVBQU9nTyxNQUFNdGxCLElBQUkrckIsRUFBWUMsSUFHakNULEVBQWtCLElBQUlXLEVBQUFBLDJCQUNsQkYsRUFDQVIsRUFDQzdSLEVBQWFrUyxFQUFjSCxFQUM1QmhOLEVBRVIsTUFFUTdHLEVBRGUsT0FBZmdHLEVBQ1EsSUFBSTROLEVBQVduTixFQUFZM08sTUFBUTZiLEdBRW5DLElBQUlDLEVBQVc1TixFQUFZbEUsRUFBWTJFLEVBQVkzTyxNQUFRNmIsR0FHdkVELEVBQWtCLElBQUlZLEVBQUFBLGdCQUFnQnRVLEVBQU8yVCxFQUFVOU0sR0FJM0QsUUFBMkIzYyxJQUF2QnVjLEVBQVkrTSxPQUFzQixDQUNsQyxJQUFJZSxFQUFrQi9KLEVBQWlCQyxPQUNuQytKLEVBQW9CNU4sRUFBc0JILEVBQVkrTSxPQUFPbkYsUUFBUTFILGVBRXJFOE4sRUFBb0JoTyxFQUFZK00sT0FBT25GLFFBQVF2TSxZQUFjLEVBQzdENFMsRUFBbUJqTyxFQUFZK00sT0FBTzNMLE9BQU8vRixZQUFjLEVBRTNENlMsRUFBZ0IsSUFBSUgsRUFDcEJsQixFQUFZLEdBQ1ptQixFQUNBaE8sRUFBWStNLE9BQU8xYixNQUFReWMsR0FFM0JLLEVBQWUsSUFBSWhCLEVBQ25CTixFQUFZLEdBQ1pvQixFQUNBak8sRUFBWStNLE9BQU8xYixNQUFRNmIsR0FHWixPQUFmM04sSUFFQTBOLEVBQWtCLElBQUlZLEVBQUFBLGdCQUNsQlosRUFBZ0IxVCxNQUFNekosUUFDdEJtZCxFQUFnQkMsU0FDaEJELEVBQWdCN00sYUFJeEIsSUFBSyxJQUFJL04sRUFBSSxFQUFHa1UsRUFBSzJILEVBQWNqZCxPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUFLLENBQ3BELElBQUk2TyxFQUFRZ04sRUFBYzdiLEdBTTFCLEdBSkE0YSxFQUFnQjlFLEtBQUtqSCxFQUFPaU4sRUFBYTliLEVBQUk2YSxJQUN6Q0EsR0FBWSxHQUFHRCxFQUFnQjVFLEtBQUtuSCxFQUFPaU4sRUFBYTliLEVBQUk2YSxFQUFXLElBQ3ZFQSxHQUFZLEdBQUdELEVBQWdCM0UsS0FBS3BILEVBQU9pTixFQUFhOWIsRUFBSTZhLEVBQVcsSUFDdkVBLEdBQVksR0FBR0QsRUFBZ0JtQixLQUFLbE4sRUFBT2lOLEVBQWE5YixFQUFJNmEsRUFBVyxJQUN2RUEsR0FBWSxFQUNaLE1BQU0sSUFBSWxYLE1BQU0sb0VBQ3hCLENBQ0osQ0FFQSxPQUFPaVgsQ0FDWCxHQUNKLEVBT0E1VixFQUFXdkYsVUFBVW9hLFlBQWMsU0FBVW1DLEdBQ3pDLElBV0lyTixFQVhBaEksRUFBU2phLEtBQ1Q4VyxFQUFPOVcsS0FBSzhXLEtBQ1prUixFQUFVaG9CLEtBQUtnb0IsUUFDZkcsRUFBZ0Jub0IsS0FBS21vQixjQUVyQm9ILEVBQU1DLEtBQUtELEtBQU9DLEtBQUtDLFVBRXZCQyxFQUFhNVksRUFBSzZZLFNBQVNMLEdBRTNCTSxFQUFvQkYsRUFBV2xaLFlBQWMsQ0FBQyxFQVU5Q3FaLEdBTEE1TixFQURBMk4sRUFBa0JqWixFQUFXb0Isa0JBQ3BCakIsRUFBS2daLE9BQU9GLEVBQWtCalosRUFBV29CLGtCQUFrQmtLLFFBRTNEbkwsRUFBS2daLE9BQU9KLEVBQVd6TixTQUdiMkwsSUFDbkJtQyxHQUFjLEVBYWxCLFlBWDBCcnJCLElBQXRCdWQsRUFBT3pCLGFBR1BxUCxFQUFZNVYsRUFBT3FILGNBQWMsYUFBY1csRUFBT3pCLFlBQVllLE1BQUssU0FBVWYsR0FDN0V1UCxHQUFjLEVBQ2QsSUFBSUMsRUFBTyxJQUFJQyxLQUFLLENBQUN6UCxHQUFhLENBQUVsZCxLQUFNMmUsRUFBT2lPLFdBRWpELE9BREFMLEVBQVlOLEVBQUlZLGdCQUFnQkgsRUFFcEMsS0FHR2hqQixRQUFRQyxRQUFRNGlCLEdBQ2xCdE8sTUFBSyxTQUFVc08sR0FHWixJQUFJL1osRUFBU2tTLEVBQVF0VCxRQUFRMGIsV0FBV1AsR0FReEMsT0FOSy9aLElBQ0RBLEVBQVM4WixFQUFrQmpaLEVBQVdvQixrQkFDaENrQyxFQUFPekQsV0FBV0csRUFBV29CLGtCQUFrQmxELFVBQy9Dc1QsR0FHSCxJQUFJbmIsU0FBUSxTQUFVQyxFQUFTQyxHQUNsQzRJLEVBQU9qSyxLQUFLZ2IsRUFBV2dKLEVBQVc3SCxFQUFReFksTUFBT3ZDLE9BQVN2SSxFQUFXd0ksRUFDekUsR0FDSixJQUNDcVUsTUFBSyxTQUFVSSxJQUdRLElBQWhCb08sR0FDQVIsRUFBSWMsZ0JBQWdCUixHQUd4QmxPLEVBQVEyTyxPQUFRLEVBRVpaLEVBQVczcUIsT0FBTTRjLEVBQVE1YyxLQUFPMnFCLEVBQVczcUIsTUFHM0NrZCxFQUFPaU8sWUFBWXhKLElBQ25CL0UsRUFBUTRPLE9BQVM3SixFQUFrQnpFLEVBQU9pTyxXQUc5QyxJQUNJTSxHQURXMVosRUFBSzJaLFVBQVksQ0FBQyxHQUNWZixFQUFXYyxVQUFZLENBQUMsRUFPL0MsT0FMQTdPLEVBQVErTyxVQUFZck0sRUFBY21NLEVBQVFFLFlBQWNuTSxFQUFBQSxhQUN4RDVDLEVBQVFnUCxVQUFZdE0sRUFBY21NLEVBQVFHLFlBQWNoTSxFQUFBQSx5QkFDeERoRCxFQUFRaVAsTUFBUWhNLEVBQWdCNEwsRUFBUUksUUFBVTdMLEVBQUFBLGVBQ2xEcEQsRUFBUWtQLE1BQVFqTSxFQUFnQjRMLEVBQVFLLFFBQVU5TCxFQUFBQSxlQUUzQ3BELENBQ1gsR0FDUixFQVNBckosRUFBV3ZGLFVBQVU0SCxjQUFnQixTQUFVWixFQUFnQitXLEVBQVNDLEdBQ3BFLElBQUk5VyxFQUFTamEsS0FFYixPQUFPQSxLQUFLc2hCLGNBQWMsVUFBV3lQLEVBQU81TyxPQUFPWixNQUFLLFNBQVVJLEdBQzlELElBQUtBLEVBQVFxUCxvQkFDVCxPQUFRRixHQUNKLElBQUssUUFDTCxJQUFLLGNBQ0wsSUFBSyxlQUNMLElBQUssWUFDTCxJQUFLLGVBQ0RuUCxFQUFRNE8sT0FBUzNKLEVBQUFBLFVBcUI3QixRQWJ3QmxpQixJQUFwQnFzQixFQUFPL08sVUFDWSxHQUFuQitPLEVBQU8vTyxVQUNPLFVBQVo4TyxHQUEwQyxHQUFuQkMsRUFBTy9PLFVBRWhDOWlCLFFBQVFtWixLQUNKLG1DQUNJMFksRUFBTy9PLFNBQ1AsZ0JBQ0E4TyxFQUNBLHVCQUlSN1csRUFBT3pELFdBQVdHLEVBQVdzQix1QkFBd0IsQ0FDckQsSUFBSTJKLE9BQ3NCbGQsSUFBdEJxc0IsRUFBT3ZhLFdBQTJCdWEsRUFBT3ZhLFdBQVdHLEVBQVdzQiw0QkFBeUJ2VCxFQUV4RmtkLElBQ0FELEVBQVUxSCxFQUFPekQsV0FBV0csRUFBV3NCLHVCQUF1QnlKLGNBQWNDLEVBQVNDLEdBRTdGLENBRUE3SCxFQUFlK1csR0FBV25QLENBQzlCLEdBQ0osRUFVQXJKLEVBQVd2RixVQUFVa2Usb0JBQXNCLFNBQVVydEIsR0FDakQsSUFBSTNCLEVBQVcyQixFQUFLM0IsU0FDaEJDLEVBQVcwQixFQUFLMUIsU0FFaEJndkIsT0FBb0R4c0IsSUFBaEN6QyxFQUFTbVEsV0FBVytlLFFBQ3hDQyxPQUFnRDFzQixJQUE5QnpDLEVBQVNtUSxXQUFXalEsTUFDdENrdkIsT0FBZ0Qzc0IsSUFBL0J6QyxFQUFTbVEsV0FBV0MsT0FDckNpZixHQUFxQyxJQUF2QjF0QixFQUFLNm9CLGNBQ25COEUsRUFBa0JwcUIsT0FBTzJnQixLQUFLN2xCLEVBQVN1b0IsaUJBQWlCdFksT0FBUyxFQUNqRXNmLEVBQWtCRCxRQUF1RDdzQixJQUFwQ3pDLEVBQVN1b0IsZ0JBQWdCblksT0FFbEUsR0FBSXpPLEVBQUs2dEIsU0FBVSxDQUNmLElBQUkvRSxFQUFXLGtCQUFvQnhxQixFQUFTd3ZCLEtBRXhDQyxFQUFpQjN4QixLQUFLaW9CLE1BQU1sVCxJQUFJMlgsR0FFL0JpRixJQUNEQSxFQUFpQixJQUFJQyxFQUFBQSxlQUNyQmx1QixFQUFBQSxTQUFBQSxVQUFBQSxLQUFBQSxLQUE2Qml1QixFQUFnQnp2QixHQUM3Q3l2QixFQUFleHZCLE1BQU0wUixLQUFLM1IsRUFBU0MsT0FDbkN3dkIsRUFBZS9nQixJQUFNMU8sRUFBUzBPLElBQzlCK2dCLEVBQWVFLGlCQUFrQixFQUVqQzd4QixLQUFLaW9CLE1BQU10bEIsSUFBSStwQixFQUFVaUYsSUFHN0J6dkIsRUFBV3l2QixDQUNmLE1BQU8sR0FBSS90QixFQUFLa3VCLE9BQVEsQ0FDaEJwRixFQUFXLHFCQUF1QnhxQixFQUFTd3ZCLEtBQS9DLElBRUlLLEVBQWUveEIsS0FBS2lvQixNQUFNbFQsSUFBSTJYLEdBRTdCcUYsSUFDREEsRUFBZSxJQUFJcGYsRUFBQUEsa0JBQ25CalAsRUFBQUEsU0FBQUEsVUFBQUEsS0FBQUEsS0FBNkJxdUIsRUFBYzd2QixHQUMzQzZ2QixFQUFhNXZCLE1BQU0wUixLQUFLM1IsRUFBU0MsT0FFakNuQyxLQUFLaW9CLE1BQU10bEIsSUFBSStwQixFQUFVcUYsSUFHN0I3dkIsRUFBVzZ2QixDQUNmLENBR0EsR0FBSWIsR0FBcUJFLEdBQW1CQyxHQUFrQkMsR0FBZUMsRUFBaUIsQ0FDdEY3RSxFQUFXLGtCQUFvQnhxQixFQUFTd3ZCLEtBQU8sSUFFL0N4dkIsRUFBU3lhLG1DQUFrQytQLEdBQVksd0JBQ3ZENEUsSUFBYTVFLEdBQVksYUFDekJ3RSxJQUFtQnhFLEdBQVksb0JBQy9CMEUsSUFBaUIxRSxHQUFZLGtCQUM3QjJFLElBQWdCM0UsR0FBWSxpQkFDNUI2RSxJQUFpQjdFLEdBQVksa0JBQzdCOEUsSUFBaUI5RSxHQUFZLGtCQUVqQyxJQUFJc0YsRUFBaUJoeUIsS0FBS2lvQixNQUFNbFQsSUFBSTJYLEdBRS9Cc0YsSUFDREEsRUFBaUI5dkIsRUFBUzJmLFFBRXRCeVAsSUFBYVUsRUFBZUMsVUFBVyxHQUN2Q2YsSUFBbUJjLEVBQWVFLGdCQUFpQixHQUNuRGQsSUFBaUJZLEVBQWVHLGNBQWUsR0FDL0NkLElBQWdCVyxFQUFlSSxhQUFjLEdBQzdDYixJQUFpQlMsRUFBZUssY0FBZSxHQUMvQ2IsSUFBaUJRLEVBQWV6SCxjQUFlLEdBRW5EdnFCLEtBQUtpb0IsTUFBTXRsQixJQUFJK3BCLEVBQVVzRixJQUc3Qjl2QixFQUFXOHZCLENBQ2YsQ0FJSTl2QixFQUFTNGMsWUFBcUNwYSxJQUE1QnpDLEVBQVNtUSxXQUFXa2dCLFVBQWdENXRCLElBQTNCekMsRUFBU21RLFdBQVdtZ0IsSUFDL0V0d0IsRUFBUzRMLGFBQWEsTUFBTzVMLEVBQVNtUSxXQUFXbWdCLElBSWpEcndCLEVBQVNxZCxjQUFnQjJSLElBQ3pCaHZCLEVBQVNxZCxZQUFZalgsR0FBS3BHLEVBQVNxZCxZQUFZalgsR0FHL0NwRyxFQUFTbVosdUJBQXlCNlYsSUFDbENodkIsRUFBU21aLHFCQUFxQi9TLEdBQUtwRyxFQUFTbVoscUJBQXFCL1MsR0FHckUxRSxFQUFLMUIsU0FBV0EsQ0FDcEIsRUFPQW9XLEVBQVd2RixVQUFVbWEsYUFBZSxTQUFVc0YsR0FDMUMsSUFLSUMsRUFMQXhZLEVBQVNqYSxLQUNUOFcsRUFBTzlXLEtBQUs4VyxLQUNaTixFQUFheFcsS0FBS3dXLFdBQ2xCd0QsRUFBY2xELEVBQUs0YixVQUFVRixHQUc3QnpZLEVBQWlCLENBQUMsRUFDbEI0WSxFQUFxQjNZLEVBQVl4RCxZQUFjLENBQUMsRUFFaEQwRCxFQUFVLEdBRWQsR0FBSXlZLEVBQW1CaGMsRUFBV2dCLHVDQUF3QyxDQUN0RSxJQUFJaWIsRUFBY3BjLEVBQVdHLEVBQVdnQix1Q0FDeEM4YSxFQUFlRyxFQUFZaFosa0JBQzNCTSxFQUFRUSxLQUFLa1ksRUFBWTlZLGFBQWFDLEVBQWdCQyxFQUFhQyxHQUN2RSxNQUFPLEdBQUkwWSxFQUFtQmhjLEVBQVdjLHFCQUFzQixDQUMzRCxJQUFJb2IsRUFBZXJjLEVBQVdHLEVBQVdjLHFCQUN6Q2diLEVBQWVJLEVBQWFqWixrQkFDNUJNLEVBQVFRLEtBQUttWSxFQUFhL1ksYUFBYUMsRUFBZ0JDLEVBQWFDLEdBQ3hFLEtBQU8sQ0FJSHdZLEVBQWUvVixFQUFBQSxxQkFFZixJQUFJdkMsRUFBb0JILEVBQVlJLHNCQUF3QixDQUFDLEVBSzdELEdBSEFMLEVBQWU1WCxNQUFRLElBQUkyVyxFQUFBQSxNQUFNLEVBQUssRUFBSyxHQUMzQ2lCLEVBQWU3VyxRQUFVLEVBRXJCbVgsTUFBTUMsUUFBUUgsRUFBa0JJLGlCQUFrQixDQUNsRCxJQUFJQyxFQUFRTCxFQUFrQkksZ0JBRTlCUixFQUFlNVgsTUFBTTRXLFVBQVV5QixHQUMvQlQsRUFBZTdXLFFBQVVzWCxFQUFNLEVBQ25DLE1BRTJDOVYsSUFBdkN5VixFQUFrQk0sa0JBQ2xCUCxFQUFRUSxLQUFLVCxFQUFPVSxjQUFjWixFQUFnQixNQUFPSSxFQUFrQk0sbUJBRy9FVixFQUFlblQsZUFDMEJsQyxJQUFyQ3lWLEVBQWtCMlksZUFBK0IzWSxFQUFrQjJZLGVBQWlCLEVBQ3hGL1ksRUFBZXBULGVBQzJCakMsSUFBdEN5VixFQUFrQjRZLGdCQUFnQzVZLEVBQWtCNFksZ0JBQWtCLE9BRXZDcnVCLElBQS9DeVYsRUFBa0I2WSwyQkFDbEI5WSxFQUFRUSxLQUNKVCxFQUFPVSxjQUFjWixFQUFnQixlQUFnQkksRUFBa0I2WSwyQkFFM0U5WSxFQUFRUSxLQUNKVCxFQUFPVSxjQUFjWixFQUFnQixlQUFnQkksRUFBa0I2WSwyQkFHbkYsRUFFZ0MsSUFBNUJoWixFQUFZaVosY0FDWmxaLEVBQWV0VCxLQUFPeXNCLEVBQUFBLFlBRzFCLElBQUlDLEVBQVluWixFQUFZbVosV0FBYTFNLEVBeUN6QyxHQXZDSTBNLElBQWMxTSxHQUNkMU0sRUFBZTVXLGFBQWMsRUFHN0I0VyxFQUFlM1gsWUFBYSxJQUU1QjJYLEVBQWU1VyxhQUFjLEVBRXpCZ3dCLElBQWMxTSxJQUNkMU0sRUFBZXFaLGVBQXdDMXVCLElBQTVCc1YsRUFBWXFaLFlBQTRCclosRUFBWXFaLFlBQWMsVUFJbkUzdUIsSUFBOUJzVixFQUFZc1osZUFBK0JiLElBQWlCNVksRUFBQUEsb0JBQzVESyxFQUFRUSxLQUFLVCxFQUFPVSxjQUFjWixFQUFnQixZQUFhQyxFQUFZc1osZ0JBRTNFdlosRUFBZXdGLFlBQWMsSUFBSWpFLEVBQUFBLFFBQVEsRUFBRyxRQUVKNVcsSUFBcENzVixFQUFZc1osY0FBYzl3QixPQUMxQnVYLEVBQWV3RixZQUFZbmYsSUFBSTRaLEVBQVlzWixjQUFjOXdCLE1BQU93WCxFQUFZc1osY0FBYzl3QixhQUk3RGtDLElBQWpDc1YsRUFBWXVaLGtCQUFrQ2QsSUFBaUI1WSxFQUFBQSxvQkFDL0RLLEVBQVFRLEtBQUtULEVBQU9VLGNBQWNaLEVBQWdCLFFBQVNDLEVBQVl1Wix3QkFFekI3dUIsSUFBMUNzVixFQUFZdVosaUJBQWlCQyxXQUM3QnpaLEVBQWVnRixlQUFpQi9FLEVBQVl1WixpQkFBaUJDLGdCQUlsQzl1QixJQUEvQnNWLEVBQVl5WixnQkFBZ0NoQixJQUFpQjVZLEVBQUFBLG9CQUM3REUsRUFBZWxTLFVBQVcsSUFBSWlSLEVBQUFBLE9BQVFDLFVBQVVpQixFQUFZeVosc0JBRzVCL3VCLElBQWhDc1YsRUFBWTBaLGlCQUFpQ2pCLElBQWlCNVksRUFBQUEsbUJBQzlESyxFQUFRUSxLQUFLVCxFQUFPVSxjQUFjWixFQUFnQixjQUFlQyxFQUFZMFosa0JBRzdFZixFQUFtQmhjLEVBQVdZLHlCQUEwQixDQUN4RCxJQUFJb2MsRUFBcUJuZCxFQUFXRyxFQUFXWSx5QkFDL0NrYixFQUFla0IsRUFBbUIvWixrQkFDbENNLEVBQVFRLEtBQUtpWixFQUFtQjdaLGFBQWFDLEVBQWdCLENBQUV2RCxXQUFZbWMsR0FBc0IxWSxHQUNyRyxDQUVBLE9BQU9qTixRQUFRNE4sSUFBSVYsR0FBU3FILE1BQUssV0FDN0IsSUFBSXJmLEVBa0JKLE9BZklBLEVBREF1d0IsSUFBaUJqVyxFQUNOaEcsRUFBV0csRUFBV2dCLHVDQUF1Q2pRLGVBQWVxUyxHQUU1RSxJQUFJMFksRUFBYTFZLEdBRzVCQyxFQUFZalYsT0FBTTdDLEVBQVM2QyxLQUFPaVYsRUFBWWpWLE1BRzlDN0MsRUFBUzBPLE1BQUsxTyxFQUFTME8sSUFBSWdqQixTQUFXQyxFQUFBQSxjQUN0QzN4QixFQUFTK2MsY0FBYS9jLEVBQVMrYyxZQUFZMlUsU0FBV0MsRUFBQUEsY0FFMUQxTSxFQUF1QmpsQixFQUFVOFgsR0FFN0JBLEVBQVl4RCxZQUFZdVEsRUFBK0J2USxFQUFZdFUsRUFBVThYLEdBRTFFOVgsQ0FDWCxHQUNKLEVBME1Bb1csRUFBV3ZGLFVBQVUrZ0IsZUFBaUIsU0FBVUMsR0FDNUMsSUFBSTlaLEVBQVNqYSxLQUNUd1csRUFBYXhXLEtBQUt3VyxXQUNsQnlSLEVBQVFqb0IsS0FBS2tvQixlQUVqQixTQUFTOEwsRUFBcUIxVCxHQUMxQixPQUFPOUosRUFBV0csRUFBV2tCLDRCQUN4QndJLGdCQUFnQkMsRUFBV3JHLEdBQzNCc0gsTUFBSyxTQUFVdGYsR0FDWixPQUFPc21CLEVBQXVCdG1CLEVBQVVxZSxFQUFXckcsRUFDdkQsR0FDUixDQUlBLElBRkEsSUEvOUJ3QnVPLEVBQ3BCeUwsRUE4OUJBL1osRUFBVSxHQUVMNUcsRUFBSSxFQUFHa1UsRUFBS3VNLEVBQVc3aEIsT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFBSyxDQUNqRCxJQVVRNGdCLEVBVko1VCxFQUFZeVQsRUFBV3pnQixHQUN2Qm9aLEdBbCtCSnVILGFBRG9CekwsRUFtK0JjbEksR0FsK0JKOUosWUFBY2dTLEVBQWFoUyxXQUFXRyxFQUFXa0IsNkJBSzNFLFNBQ0FvYyxFQUFlelQsV0FDZixJQUNBeVQsRUFBZXBMLFFBQ2YsSUFDQWpCLEVBQW9CcU0sRUFBZTdoQixZQUduQ29XLEVBQWFLLFFBQVUsSUFBTWpCLEVBQW9CWSxFQUFhcFcsWUFBYyxJQUFNb1csRUFBYTJMLE1BdzlCL0ZDLEVBQVNuTSxFQUFNeUUsR0FFbkIsR0FBSTBILEVBRUFsYSxFQUFRUSxLQUFLMFosRUFBT0MsY0FNaEJILEVBRkE1VCxFQUFVOUosWUFBYzhKLEVBQVU5SixXQUFXRyxFQUFXa0IsNEJBRXRDbWMsRUFBcUIxVCxHQUdyQmlJLEVBQXVCLElBQUloVyxFQUFBQSxlQUFrQitOLEVBQVdyRyxHQUk5RWdPLEVBQU15RSxHQUFZLENBQUVwTSxVQUFXQSxFQUFXK1QsUUFBU0gsR0FFbkRoYSxFQUFRUSxLQUFLd1osRUFFckIsQ0FFQSxPQUFPbG5CLFFBQVE0TixJQUFJVixFQUN2QixFQU9BNUIsRUFBV3ZGLFVBQVUrWixTQUFXLFNBQVV3SCxHQVN0QyxJQVJBLElBMW9DMkJyTSxFQTBvQ3ZCaE8sRUFBU2phLEtBR1R1bkIsRUFGT3ZuQixLQUFLOFcsS0FFR2dWLE9BQU93SSxHQUN0QlAsRUFBYXhNLEVBQVF3TSxXQUVyQjdaLEVBQVUsR0FFTDVHLEVBQUksRUFBR2tVLEVBQUt1TSxFQUFXN2hCLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQUssQ0FDakQsSUFBSXBSLE9BQzJCd0MsSUFBM0JxdkIsRUFBV3pnQixHQUFHcFIsZUFucENXd0MsS0FETnVqQixFQXFwQ1Nqb0IsS0FBS2lvQixPQXBwQ2Qsa0JBQ3ZCQSxFQUF1QixnQkFBSSxJQUFJdkwsRUFBQUEscUJBQXFCLENBQ2hEdmEsTUFBTyxTQUNQMEYsU0FBVSxFQUNWakIsVUFBVyxFQUNYRCxVQUFXLEVBQ1h4RCxhQUFhLEVBQ2JtTCxXQUFXLEVBQ1g3SCxLQUFNOHRCLEVBQUFBLGFBSVB0TSxFQUF1QixpQkF5b0NoQmpvQixLQUFLc2hCLGNBQWMsV0FBWXlTLEVBQVd6Z0IsR0FBR3BSLFVBRXZEZ1ksRUFBUVEsS0FBS3hZLEVBQ2pCLENBSUEsT0FGQWdZLEVBQVFRLEtBQUtULEVBQU82WixlQUFlQyxJQUU1Qi9tQixRQUFRNE4sSUFBSVYsR0FBU3FILE1BQUssU0FBVWlULEdBTXZDLElBTEEsSUFBSTlCLEVBQVk4QixFQUFRempCLE1BQU0sRUFBR3lqQixFQUFRdGlCLE9BQVMsR0FDOUN1aUIsRUFBYUQsRUFBUUEsRUFBUXRpQixPQUFTLEdBRXRDNFosRUFBUyxHQUVKeFksRUFBSSxFQUFHa1UsRUFBS2lOLEVBQVd2aUIsT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFBSyxDQUNqRCxJQUtJMVAsRUFMQTNCLEVBQVd3eUIsRUFBV25oQixHQUN0QmdOLEVBQVl5VCxFQUFXemdCLEdBTXZCcFIsRUFBV3d3QixFQUFVcGYsR0FFekIsR0FDSWdOLEVBQVU2VCxPQUFTcFEsR0FDbkJ6RCxFQUFVNlQsT0FBU3BRLEdBQ25CekQsRUFBVTZULE9BQVNwUSxRQUNBcmYsSUFBbkI0YixFQUFVNlQsTUFRaUIsS0FMM0J2d0IsR0FDOEIsSUFBMUIyakIsRUFBUWtGLGNBQ0YsSUFBSWlJLEVBQUFBLFlBQVl6eUIsRUFBVUMsR0FDMUIsSUFBSXl5QixFQUFBQSxLQUFLMXlCLEVBQVVDLElBRXBCdXFCLGVBQTJCN29CLEVBQUszQixTQUFTbVEsV0FBV3dpQixXQUFXdlQsWUFHcEV6ZCxFQUFLaXhCLHVCQUdMdlUsRUFBVTZULE9BQVNwUSxFQUNuQm5nQixFQUFLM0IsU0FBVzBvQixFQUFvQi9tQixFQUFLM0IsU0FBVTZ5QixFQUFBQSx1QkFDNUN4VSxFQUFVNlQsT0FBU3BRLElBQzFCbmdCLEVBQUszQixTQUFXMG9CLEVBQW9CL21CLEVBQUszQixTQUFVZ3BCLEVBQUFBLDJCQUVwRCxHQUFJM0ssRUFBVTZULE9BQVNwUSxFQUMxQm5nQixFQUFPLElBQUk4TyxFQUFBQSxhQUFhelEsRUFBVUMsUUFDL0IsR0FBSW9lLEVBQVU2VCxPQUFTcFEsRUFDMUJuZ0IsRUFBTyxJQUFJbXhCLEVBQUFBLEtBQUs5eUIsRUFBVUMsUUFDdkIsR0FBSW9lLEVBQVU2VCxPQUFTcFEsRUFDMUJuZ0IsRUFBTyxJQUFJb3hCLEVBQUFBLFNBQVMveUIsRUFBVUMsT0FDM0IsSUFBSW9lLEVBQVU2VCxPQUFTcFEsRUFHMUIsTUFBTSxJQUFJOU0sTUFBTSxpREFBbURxSixFQUFVNlQsTUFGN0V2d0IsRUFBTyxJQUFJcXhCLEVBQUFBLE9BQU9oekIsRUFBVUMsRUFHaEMsQ0FFSWlGLE9BQU8yZ0IsS0FBS2xrQixFQUFLM0IsU0FBU3VvQixpQkFBaUJ0WSxPQUFTLEdBQ3BEb1YsRUFBbUIxakIsRUFBTTJqQixHQUc3QjNqQixFQUFLbUIsS0FBT3dpQixFQUFReGlCLE1BQVEsUUFBVXV2QixFQUVsQ0csRUFBV3ZpQixPQUFTLElBQUd0TyxFQUFLbUIsTUFBUSxJQUFNdU8sR0FFOUM2VCxFQUF1QnZqQixFQUFNMmpCLEdBRTdCdE4sRUFBT2dYLG9CQUFvQnJ0QixHQUUzQmtvQixFQUFPcFIsS0FBSzlXLEVBQ2hCLENBRUEsR0FBc0IsSUFBbEJrb0IsRUFBTzVaLE9BQ1AsT0FBTzRaLEVBQU8sR0FHbEIsSUFBSW9KLEVBQVEsSUFBSUMsRUFBQUEsTUFFaEIsSUFBUzdoQixFQUFJLEVBQUdrVSxFQUFLc0UsRUFBTzVaLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQ3hDNGhCLEVBQU12eUIsSUFBSW1wQixFQUFPeFksSUFHckIsT0FBTzRoQixDQUNYLEdBQ0osRUFPQTVjLEVBQVd2RixVQUFVdWEsV0FBYSxTQUFVOEgsR0FDeEMsSUFBSXgwQixFQUNBeTBCLEVBQVlyMUIsS0FBSzhXLEtBQUswVSxRQUFRNEosR0FDOUIzWSxFQUFTNFksRUFBVUEsRUFBVS94QixNQUVqQyxHQUFLbVosRUEyQkwsTUF0QnVCLGdCQUFuQjRZLEVBQVUveEIsS0FDVjFDLEVBQVMsSUFBSTAwQixFQUFBQSxrQkFDVEMsRUFBQUEsVUFBQUEsU0FBbUI5WSxFQUFPK1ksTUFDMUIvWSxFQUFPZ1osYUFBZSxFQUN0QmhaLEVBQU9pWixPQUFTLEVBQ2hCalosRUFBT2taLE1BQVEsS0FFTyxpQkFBbkJOLEVBQVUveEIsT0FDakIxQyxFQUFTLElBQUlnMUIsRUFBQUEsb0JBQ1JuWixFQUFPb1osS0FDUnBaLEVBQU9vWixLQUNQcFosRUFBT3FaLE1BQ05yWixFQUFPcVosS0FDUnJaLEVBQU9pWixNQUNQalosRUFBT2taLE9BSVhOLEVBQVV0d0IsT0FBTW5FLEVBQU9tRSxLQUFPc3dCLEVBQVV0d0IsTUFFNUNvaUIsRUFBdUJ2bUIsRUFBUXkwQixHQUV4QnJvQixRQUFRQyxRQUFRck0sR0ExQm5CMUIsUUFBUW1aLEtBQUssK0NBMkJyQixFQU9BQyxFQUFXdkYsVUFBVXFhLFNBQVcsU0FBVW5CLEdBQ3RDLElBQUk4SixFQUFVLzFCLEtBQUs4VyxLQUFLOFUsTUFBTUssR0FFMUIrSixFQUFZLENBQUU3SixPQUFRNEosRUFBUTVKLFFBRWxDLFlBQW9Dem5CLElBQWhDcXhCLEVBQVFFLG9CQUNEanBCLFFBQVFDLFFBQVErb0IsR0FHcEJoMkIsS0FBS3NoQixjQUFjLFdBQVl5VSxFQUFRRSxxQkFBcUIxVSxNQUFLLFNBQVVvSCxHQUc5RSxPQUZBcU4sRUFBVUMsb0JBQXNCdE4sRUFFekJxTixDQUNYLEdBQ0osRUFPQTFkLEVBQVd2RixVQUFVc2EsY0FBZ0IsU0FBVTZJLEdBVzNDLElBVkEsSUFFSUMsRUFGT24yQixLQUFLOFcsS0FFUXlVLFdBQVcySyxHQUUvQkUsRUFBZSxHQUNmQyxFQUF3QixHQUN4QkMsRUFBeUIsR0FDekJDLEVBQWtCLEdBQ2xCQyxFQUFpQixHQUVabGpCLEVBQUksRUFBR2tVLEVBQUsyTyxFQUFhTSxTQUFTdmtCLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQUssQ0FDNUQsSUFBSWpHLEVBQVU4b0IsRUFBYU0sU0FBU25qQixHQUNoQ2tkLEVBQVUyRixFQUFhMUYsU0FBU3BqQixFQUFRbWpCLFNBQ3hDenZCLEVBQVNzTSxFQUFRdE0sT0FDakJnRSxPQUF1QkwsSUFBaEIzRCxFQUFPMjFCLEtBQXFCMzFCLEVBQU8yMUIsS0FBTzMxQixFQUFPcUUsR0FDeER1eEIsT0FBb0NqeUIsSUFBNUJ5eEIsRUFBYVMsV0FBMkJULEVBQWFTLFdBQVdwRyxFQUFRbUcsT0FBU25HLEVBQVFtRyxNQUNqR0UsT0FDNEJueUIsSUFBNUJ5eEIsRUFBYVMsV0FBMkJULEVBQWFTLFdBQVdwRyxFQUFRcUcsUUFBVXJHLEVBQVFxRyxPQUU5RlQsRUFBYTFiLEtBQUsxYSxLQUFLc2hCLGNBQWMsT0FBUXZjLElBQzdDc3hCLEVBQXNCM2IsS0FBSzFhLEtBQUtzaEIsY0FBYyxXQUFZcVYsSUFDMURMLEVBQXVCNWIsS0FBSzFhLEtBQUtzaEIsY0FBYyxXQUFZdVYsSUFDM0ROLEVBQWdCN2IsS0FBSzhWLEdBQ3JCZ0csRUFBZTliLEtBQUszWixFQUN4QixDQUVBLE9BQU9pTSxRQUFRNE4sSUFBSSxDQUNmNU4sUUFBUTROLElBQUl3YixHQUNacHBCLFFBQVE0TixJQUFJeWIsR0FDWnJwQixRQUFRNE4sSUFBSTBiLEdBQ1p0cEIsUUFBUTROLElBQUkyYixHQUNadnBCLFFBQVE0TixJQUFJNGIsS0FDYmpWLE1BQUssU0FBVThKLEdBU2QsSUFSQSxJQUFJSyxFQUFRTCxFQUFhLEdBQ3JCeUwsRUFBaUJ6TCxFQUFhLEdBQzlCMEwsRUFBa0IxTCxFQUFhLEdBQy9Cb0YsRUFBV3BGLEVBQWEsR0FDeEJwQyxFQUFVb0MsRUFBYSxHQUV2QjJMLEVBQVMsR0FFSjFqQixFQUFJLEVBQUdrVSxFQUFLa0UsRUFBTXhaLE9BQVFvQixFQUFJa1UsRUFBSWxVLElBQUssQ0FDNUMsSUFBSW9qQixFQUFPaEwsRUFBTXBZLEdBQ2IyakIsRUFBZ0JILEVBQWV4akIsR0FDL0I0akIsRUFBaUJILEVBQWdCempCLEdBQ2pDa2QsRUFBVUMsRUFBU25kLEdBQ25CdlMsRUFBU2tvQixFQUFRM1YsR0FFckIsUUFBYTVPLElBQVRneUIsRUFBSixDQUtBLElBQUlTLEVBRUosT0FMQVQsRUFBS1UsZUFDTFYsRUFBSzdqQixrQkFBbUIsRUFJaEJtVCxFQUFnQmpsQixFQUFPeU8sT0FDM0IsS0FBS3dXLEVBQWdCRSxRQUNqQmlSLEVBQXFCRSxFQUFBQSxvQkFDckIsTUFFSixLQUFLclIsRUFBZ0JqakIsU0FDakJvMEIsRUFBcUJHLEVBQUFBLHdCQUNyQixNQUlKLFFBQ0lILEVBQXFCSSxFQUFBQSxvQkFJN0IsSUFBSUMsRUFBYWQsRUFBSzN4QixLQUFPMnhCLEVBQUszeEIsS0FBTzJ4QixFQUFLaEYsS0FFMUMrRixPQUMwQi95QixJQUExQjhyQixFQUFRaUgsY0FBOEJ0UixFQUFjcUssRUFBUWlILGVBQWlCblIsRUFBQUEsa0JBRTdFb0IsRUFBYyxHQUVkMUIsRUFBZ0JqbEIsRUFBT3lPLFFBQVV3VyxFQUFnQkUsUUFFakR3USxFQUFLZ0IsVUFBUyxTQUFVbHpCLElBQ0UsSUFBbEJBLEVBQU9tekIsUUFBbUJuekIsRUFBT2lqQix1QkFDakNDLEVBQVloTixLQUFLbFcsRUFBT08sS0FBT1AsRUFBT08sS0FBT1AsRUFBT2t0QixLQUU1RCxJQUVBaEssRUFBWWhOLEtBQUs4YyxHQUdyQixJQUFJSSxFQUFjVixFQUFlMWMsTUFFakMsR0FBSTBjLEVBQWU3VixXQUFZLENBQzNCLElBQUk3ZSxFQUVKLEdBQUlvMUIsRUFBWTVrQixjQUFnQmdSLFVBQzVCeGhCLEVBQVEsRUFBSSxTQUNULEdBQUlvMUIsRUFBWTVrQixjQUFnQnlELFdBQ25DalUsRUFBUSxFQUFJLFNBQ1QsR0FBSW8xQixFQUFZNWtCLGFBQWVpUixXQUNsQ3poQixFQUFRLEVBQUksVUFDVCxJQUFJbzFCLEVBQVk1a0IsY0FBZ0JrUixZQUduQyxNQUFNLElBQUlqTixNQUFNLGlFQUZoQnpVLEVBQVEsRUFBSSxLQUdoQixDQUlBLElBRkEsSUFBSXExQixFQUFTLElBQUl6VCxhQUFhd1QsRUFBWTFsQixRQUVqQ3VCLEVBQUksRUFBR0MsRUFBS2trQixFQUFZMWxCLE9BQVF1QixFQUFJQyxFQUFJRCxJQUM3Q29rQixFQUFPcGtCLEdBQUtta0IsRUFBWW5rQixHQUFLalIsRUFHakNvMUIsRUFBY0MsQ0FDbEIsQ0FFQSxJQUFTcGtCLEVBQUksRUFBR0MsRUFBS2dVLEVBQVl4VixPQUFRdUIsRUFBSUMsRUFBSUQsSUFBSyxDQUNsRCxJQUFJcWtCLEVBQVEsSUFBSVgsRUFDWnpQLEVBQVlqVSxHQUFLLElBQU11UyxFQUFnQmpsQixFQUFPeU8sTUFDOUN5bkIsRUFBY3pjLE1BQ2RvZCxFQUNBSCxHQUkwQixnQkFBMUJqSCxFQUFRaUgsZ0JBQ1JLLEVBQU1DLGtCQUFvQixTQUFpRDNWLEdBS3ZFLE9BQU8sSUFBSXJDLEVBQ1AvZixLQUFLZzRCLE1BQ0xoNEIsS0FBS3FpQixPQUNMcmlCLEtBQUtpNEIsZUFBaUIsRUFDdEI3VixFQUVSLEVBR0EwVixFQUFNQyxrQkFBa0JHLDJDQUE0QyxHQUd4RWxCLEVBQU90YyxLQUFLb2QsRUFDaEIsQ0EvRmdDLENBZ0dwQyxDQUVBLElBQUkveUIsRUFBT294QixFQUFhcHhCLEtBQU9veEIsRUFBYXB4QixLQUFPLGFBQWVteEIsRUFFbEUsT0FBTyxJQUFJaUMsRUFBQUEsY0FBY3B6QixPQUFNTCxFQUFXc3lCLEVBQzlDLEdBQ0osRUFPQTFlLEVBQVd2RixVQUFVOFosU0FBVyxTQUFVUixHQUN0QyxJQVVRblMsRUFWSnBELEVBQU85VyxLQUFLOFcsS0FDWk4sRUFBYXhXLEtBQUt3VyxXQUNsQnlELEVBQVNqYSxLQUVUK3JCLEVBQWlCalYsRUFBS2lWLGVBQ3RCQyxFQUFXbFYsRUFBS2tWLFNBRWhCTyxFQUFVelYsRUFBSzRVLE1BQU1XLEdBRXpCLE9BQ1FuUyxFQUFVLFFBRU94VixJQUFqQjZuQixFQUFRM29CLE1BQ1JzVyxFQUFRUSxLQUNKVCxFQUFPcUgsY0FBYyxPQUFRaUwsRUFBUTNvQixNQUFNMmQsTUFBSyxTQUFVM2QsR0FDdEQsSUFBSTh5QixFQUVKLEdBQUkzSyxFQUFlUSxFQUFRM29CLE1BQVEsRUFBRyxDQUNsQyxJQUFJdzBCLEVBQWNwTSxFQUFTTyxFQUFRM29CLFNBRW5DOHlCLEVBQU85eUIsRUFBS2llLFNBQ1A5YyxNQUFRLGFBQWVxekIsQ0FDaEMsTUFDSTFCLEVBQU85eUIsRUFjWCxZQVZ3QmMsSUFBcEI2bkIsRUFBUXJHLFNBQ1J3USxFQUFLZ0IsVUFBUyxTQUFVVyxHQUNwQixHQUFLQSxFQUFFVixPQUVQLElBQUssSUFBSXJrQixFQUFJLEVBQUdrVSxFQUFLK0UsRUFBUXJHLFFBQVFoVSxPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUNqRCtrQixFQUFFNVEsc0JBQXNCblUsR0FBS2laLEVBQVFyRyxRQUFRNVMsRUFFckQsSUFHR29qQixDQUNYLFVBSWVoeUIsSUFBbkI2bkIsRUFBUTNyQixRQUNSc1osRUFBUVEsS0FBS1QsRUFBT3FILGNBQWMsU0FBVWlMLEVBQVEzckIsU0FJcEQyckIsRUFBUS9WLFlBQ1IrVixFQUFRL1YsV0FBV0csRUFBV1UsMkJBQytCM1MsSUFBN0Q2bkIsRUFBUS9WLFdBQVdHLEVBQVdVLHFCQUFxQmloQixPQUVuRHBlLEVBQVFRLEtBQUtULEVBQU9xSCxjQUFjLFFBQVNpTCxFQUFRL1YsV0FBV0csRUFBV1UscUJBQXFCaWhCLFFBRzNGdHJCLFFBQVE0TixJQUFJVixJQUNsQnFILE1BQUssU0FBVS9YLEdBQ2hCLElBQUlrdEIsRUFhSixJQVRJQSxHQURtQixJQUFuQm5LLEVBQVFILE9BQ0QsSUFBSW1NLEVBQUFBLEtBQ0ovdUIsRUFBUTBJLE9BQVMsRUFDakIsSUFBSWlqQixFQUFBQSxNQUNlLElBQW5CM3JCLEVBQVEwSSxPQUNSMUksRUFBUSxHQUVSLElBQUlndkIsRUFBQUEsWUFHRmh2QixFQUFRLEdBQ2pCLElBQUssSUFBSThKLEVBQUksRUFBR2tVLEVBQUtoZSxFQUFRMEksT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFDekNvakIsRUFBSy96QixJQUFJNkcsRUFBUThKLElBYXpCLEdBVElpWixFQUFReG5CLE9BQ1IyeEIsRUFBS3IwQixTQUFTMEMsS0FBT3duQixFQUFReG5CLEtBQzdCMnhCLEVBQUszeEIsS0FBTzB6QixFQUFBQSxnQkFBQUEsaUJBQWlDbE0sRUFBUXhuQixPQUd6RG9pQixFQUF1QnVQLEVBQU1uSyxHQUV6QkEsRUFBUS9WLFlBQVl1USxFQUErQnZRLEVBQVlrZ0IsRUFBTW5LLFFBRWxEN25CLElBQW5CNm5CLEVBQVFtTSxPQUFzQixDQUM5QixJQUFJQSxFQUFTLElBQUlDLEVBQUFBLFFBQ2pCRCxFQUFPM2YsVUFBVXdULEVBQVFtTSxRQUN6QmhDLEVBQUs1aUIsYUFBYTRrQixFQUN0QixXQUNnQ2gwQixJQUF4QjZuQixFQUFRdEcsYUFDUnlRLEVBQUt2MkIsU0FBUzRZLFVBQVV3VCxFQUFRdEcsa0JBR1h2aEIsSUFBckI2bkIsRUFBUXhwQixVQUNSMnpCLEVBQUtrQyxXQUFXN2YsVUFBVXdULEVBQVF4cEIsZUFHaEIyQixJQUFsQjZuQixFQUFRL3BCLE9BQ1JrMEIsRUFBS2wwQixNQUFNdVcsVUFBVXdULEVBQVEvcEIsT0FJckMsT0FBT2swQixDQUNYLEdBQ0osRUFPQXBlLEVBQVd2RixVQUFVNlosVUFBYSxXQUc5QixTQUFTaU0sRUFBa0JDLEVBQVFDLEVBQWNqaUIsRUFBTW1ELEdBQ25ELElBQUlzUyxFQUFVelYsRUFBSzRVLE1BQU1vTixHQUV6QixPQUFPN2UsRUFDRnFILGNBQWMsT0FBUXdYLEdBQ3RCdlgsTUFBSyxTQUFVbVYsR0FDWixZQUFxQmh5QixJQUFqQjZuQixFQUFRQyxLQUEyQmtLLEVBTWhDemMsRUFDRnFILGNBQWMsT0FBUWlMLEVBQVFDLE1BQzlCakwsTUFBSyxTQUFVaUwsR0FLWixJQUZBLElBQUl3TSxFQUFnQixHQUVYMWxCLEVBQUksRUFBR2tVLEdBSmhCd08sRUFBWXhKLEdBSW1CTCxPQUFPamEsT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFDbEQwbEIsRUFBY3RlLEtBQUtULEVBQU9xSCxjQUFjLE9BQVEwVSxFQUFVN0osT0FBTzdZLEtBR3JFLE9BQU90RyxRQUFRNE4sSUFBSW9lLEVBQ3ZCLElBQ0N6WCxNQUFLLFNBQVUwWCxHQStCWixPQTlCQXZDLEVBQUtnQixVQUFTLFNBQVU5ekIsR0FDcEIsR0FBS0EsRUFBSyt6QixPQUFWLENBS0EsSUFIQSxJQUFJdUIsRUFBUSxHQUNSQyxFQUFlLEdBRVYxbEIsRUFBSSxFQUFHQyxFQUFLdWxCLEVBQVcvbUIsT0FBUXVCLEVBQUlDLEVBQUlELElBQUssQ0FDakQsSUFBSTJsQixFQUFZSCxFQUFXeGxCLEdBRTNCLEdBQUkybEIsRUFBVyxDQUNYRixFQUFNeGUsS0FBSzBlLEdBRVgsSUFBSUMsRUFBTSxJQUFJVixFQUFBQSxhQUV3QmowQixJQUFsQ3N4QixFQUFVQyxxQkFDVm9ELEVBQUl0Z0IsVUFBVWlkLEVBQVVDLG9CQUFvQnpiLE1BQVcsR0FBSi9HLEdBR3ZEMGxCLEVBQWF6ZSxLQUFLMmUsRUFDdEIsTUFDSW42QixRQUFRbVosS0FDSixtREFDQTJkLEVBQVU3SixPQUFPMVksR0FHN0IsQ0FFQTdQLEVBQUswMUIsS0FBSyxJQUFJQyxFQUFBQSxTQUFTTCxFQUFPQyxHQUFldjFCLEVBQUt3UCxZQTFCMUIsQ0EyQjVCLElBRU9zakIsQ0FDWCxJQS9DSixJQUFJVixDQWdEUixJQUNDelUsTUFBSyxTQUFVbVYsR0FHWnFDLEVBQWFwMkIsSUFBSSt6QixHQUVqQixJQUFJeGMsRUFBVSxHQUVkLEdBQUlxUyxFQUFROWlCLFNBR1IsSUFGQSxJQUFJQSxFQUFXOGlCLEVBQVE5aUIsU0FFZDZKLEVBQUksRUFBR2tVLEVBQUsvZCxFQUFTeUksT0FBUW9CLEVBQUlrVSxFQUFJbFUsSUFBSyxDQUMvQyxJQUFJa21CLEVBQVEvdkIsRUFBUzZKLEdBQ3JCNEcsRUFBUVEsS0FBS21lLEVBQWtCVyxFQUFPOUMsRUFBTTVmLEVBQU1tRCxHQUN0RCxDQUdKLE9BQU9qTixRQUFRNE4sSUFBSVYsRUFDdkIsR0FDUixDQUVBLE9BQU8sU0FBbUJ1ZixHQUN0QixJQUFJM2lCLEVBQU85VyxLQUFLOFcsS0FDWk4sRUFBYXhXLEtBQUt3VyxXQUNsQmtqQixFQUFXMTVCLEtBQUs4VyxLQUFLd1UsT0FBT21PLEdBSzVCLzJCLEVBQVEsSUFBSXl5QixFQUFBQSxNQUNadUUsRUFBUzMwQixPQUFNckMsRUFBTXFDLEtBQU8yMEIsRUFBUzMwQixNQUV6Q29pQixFQUF1QnprQixFQUFPZzNCLEdBRTFCQSxFQUFTbGpCLFlBQVl1USxFQUErQnZRLEVBQVk5VCxFQUFPZzNCLEdBTTNFLElBSkEsSUFBSUMsRUFBVUQsRUFBU2hPLE9BQVMsR0FFNUJ4UixFQUFVLEdBRUw1RyxFQUFJLEVBQUdrVSxFQUFLbVMsRUFBUXpuQixPQUFRb0IsRUFBSWtVLEVBQUlsVSxJQUN6QzRHLEVBQVFRLEtBQUttZSxFQUFrQmMsRUFBUXJtQixHQUFJNVEsRUFBT29VLEVBaEJ6QzlXLE9BbUJiLE9BQU9nTixRQUFRNE4sSUFBSVYsR0FBU3FILE1BQUssV0FDN0IsT0FBTzdlLENBQ1gsR0FDSixDQUNKLENBN0drQyxHQStHM0IrUixDQUNYLENBeHFGb0IsdTdDQ3hDRjdKLEVBQVEsMkNBQVJBLENBQTRCMUssR0FBOUMsSUFHSVUsRUFBdUJnNUIsRUFBYUMsRUFHbENDLEVBQVksSUFBSTU1QixFQUFBQSxVQUNoQjY1QixFQUFRLElBQUk3NUIsRUFBQUEsUUFHR1QsRUFBSSxXQUNyQixXQUFZSCxHQUFXLGlIQUVuQlUsS0FBS1YsVUFBWUEsRUFHakJVLEtBQUtnNkIsTUFBUSxJQUFJOTVCLEVBQUFBLE1BR2pCRixLQUFLMEMsTUFBUSxJQUFJeEMsRUFBQUEsTUFDakJLLE9BQU9tQyxNQUFRMUMsS0FBSzBDLE1BQ3BCbkMsT0FBT3lCLFlBQWM1QyxFQUFBQSxRQUFBQSxNQUVyQm1CLE9BQU8wNUIsZ0JBQWtCNzZCLEVBQUFBLFFBQUFBLGdCQUV6QlksS0FBSzBDLE1BQU1zSCxJQUFNLElBQUk5SixFQUFBQSxRQUFjZCxFQUFBQSxRQUFBQSxJQUFBQSxNQUFrQkEsRUFBQUEsUUFBQUEsSUFBQUEsTUFFckRZLEtBQUttTixLQUFPLElBQUkrc0IsRUFBQUEsUUFBV2w2QixLQUFLMEMsT0FHNUJuQyxPQUFPMkosbUJBQ1A5SyxFQUFBQSxRQUFBQSxJQUFhbUIsT0FBTzJKLGtCQUl4QmxLLEtBQUtKLFNBQVcsSUFBSWdLLEVBQUFBLFFBQVM1SixLQUFLMEMsTUFBT3BELEdBR3pDc0IsRUFBUyxJQUFJakIsRUFBQUEsUUFBT0ssS0FBS0osU0FBU2lLLGVBQ2xDN0osS0FBS202QixTQUFXLElBQUl4NUIsRUFBQUEsUUFBU0MsRUFBT1gsWUFBYVgsR0FDakRVLEtBQUtzNEIsTUFBUSxJQUFJOXlCLEVBQUFBLFFBQU14RixLQUFLMEMsT0FDNUIxQyxLQUFLWSxPQUFTQSxFQUdDLENBQUMsVUFBVyxjQUFlLFFBQVMsUUFDNUN5RyxTQUFRLFNBQUNpeEIsR0FBSyxPQUFLLEVBQUtBLE1BQU04QixNQUFNOUIsRUFBTSxJQUc3Q2w1QixFQUFBQSxRQUFBQSxPQUFnQkEsRUFBQUEsUUFBQUEsaUJBQ2hCWSxLQUFLcTZCLE1BQVEsSUFBSUMsTUFDakJ0NkIsS0FBS1YsVUFBVTZLLFlBQVluSyxLQUFLcTZCLE1BQU1FLE1BR3RDbjdCLEVBQUFBLFFBQUFBLGtCQUNBWSxLQUFLdzZCLGVBQWdCQyxFQUFBQSxFQUFBQSxXQUNyQno2QixLQUFLVixVQUFVNkssWUFBWW5LLEtBQUt3NkIsY0FBYzE2QixhQUk5Q1YsRUFBQUEsUUFBQUEsUUFDQVksS0FBSzA2QixJQUFNLElBQUlDLEVBQUFBLFFBQU8zNkIsT0FJMUJBLEtBQUsyaEIsUUFBVSxJQUFJaVosRUFBQUEsUUFHbkI1NkIsS0FBSzJoQixRQUFROVYsT0FBTzBWLE1BQUssV0FDckIsRUFBSzdNLFFBQVUsSUFBSXhVLEVBQUFBLGVBR25CLEVBQUsyNkIsWUFBYyxJQUFJOTRCLEVBQUFBLFFBSW5CM0MsRUFBQUEsUUFBQUEsUUFLQSxFQUFLczdCLElBQUk3dUIsS0FBSyxHQUNkLEVBQUs2dUIsSUFBSUksUUFLYixFQUFLcG1CLFFBQVFVLFdBQWEsU0FBQzJsQixFQUFNQyxFQUFRQyxHQUNyQy83QixRQUFRQyxJQUFJLEdBQUQsT0FBSTQ3QixFQUFJLGFBQUtDLEVBQU0sWUFBSUMsR0FDdEMsRUFHQSxFQUFLdm1CLFFBQVFTLE9BQVMsV0FFbEJqVyxRQUFRQyxJQUFJLHFCQUdaLElBQUkrN0IsRUFBQUEsUUFDQSxFQUFLdDdCLFNBQVNpSyxjQUNkLEVBQUtuSCxNQUNMOUIsRUFBT1gsWUFDUCxFQUFLazZCLFNBQVN0NUIsZUFJZHpCLEVBQUFBLFFBQUFBLFFBQ0EsRUFBSys3QixXQUFhLElBQUkvc0IsRUFBQUEsUUFBVyxFQUFLMUwsTUFBTyxFQUFLMDRCLE1BQU0xeEIsS0FFcER0SyxFQUFBQSxRQUFBQSxLQUFBQSxjQUEwQixFQUFLKzdCLFdBQVdFLFVBT2xEajhCLEVBQUFBLFFBQUFBLFVBQWtCLEVBQ2xCLEVBQUtFLFVBQVVvTyxjQUFjLFlBQVl6SixNQUFNZ0ssUUFBVSxNQUM3RCxDQUNKLElBSUFqTyxLQUFLMEssU0FDTDFLLEtBQUtWLFVBQVVvTyxjQUFjLFlBQVl6SixNQUFNZ0ssUUFBVSxPQUd6RDFOLE9BQU9DLGlCQUFpQixRQUFTUixLQUFLczdCLHFCQUFxQixFQUcvRCxXQXVHQyxTQXZHQSx1Q0FFRCxTQUFvQkMsR0FDaEJBLEVBQU1DLGlCQUVOekIsRUFBTS8yQixFQUFLdTRCLEVBQU1FLFFBQVVsN0IsT0FBT3dELFdBQWMsRUFBSSxFQUNwRGcyQixFQUFNenhCLEdBQU1pekIsRUFBTUcsUUFBVW43QixPQUFPeUQsWUFBZSxFQUFJLEVBRXREODFCLEVBQVU2QixjQUFjNUIsRUFBT241QixFQUFPWCxhQUV0QyxJQUFNMjdCLEVBQWE5QixFQUFVK0IsaUJBQWlCbjVCLE1BQU0rRyxVQUNwRCxHQUFJbXlCLEVBQVcxcEIsT0FBUyxFQUFHLENBQ3ZCLElBQU0xTixFQUFTbzNCLEVBQVcsR0FBR3AzQixPQUN6Qm8xQixHQUFhQSxFQUFZMTNCLFNBQVNpYyxVQUFVLENBQUVqYixRQUFTMDJCLEVBQVlrQyxpQkFFdkVqQyxHQURBRCxFQUFjcDFCLEdBQ2NpRixTQUFTLEdBQ3JDbXdCLEVBQVlrQyxlQUFpQmxDLEVBQVkxM0IsU0FBU2dCLFFBQ2xEMDJCLEVBQVltQyxpQkFBbUJuQyxFQUFZMTNCLFNBQVN5RixxQkFDOUJqRCxJQUFsQm0xQixRQUF5RG4xQixJQUExQm0xQixFQUFjeDBCLFNBQXlCakcsRUFBQUEsUUFBQUEsa0JBQ3RFeTZCLEVBQWN4MEIsU0FBV3cwQixFQUFjeDBCLFNBRTNDdTBCLEVBQVkxM0IsU0FBUzZGLFVBQVk2eEIsRUFBWTEzQixTQUFTNkYsU0FDbEQ2eEIsRUFBWTcwQixLQUFLNEUsV0FBVyxhQVNyQml3QixFQUFZNzBCLEtBQUs0RSxXQUFXLFdBRy9CaXdCLEVBQVkxM0IsU0FBUzZGLFNBQ3JCNnhCLEVBQVkxM0IsU0FBU2ljLFVBQVUsQ0FBRWpiLFFBQVMsS0FFMUMwMkIsRUFBWTEzQixTQUFTaWMsVUFBVSxDQUFFamIsUUFBUyxTQUVmd0IsSUFBM0JrMUIsRUFBWTd0QixZQUNaNnRCLEVBQVk3dEIsV0FBVzZ0QixHQUduQyxNQUNRQSxHQUFhQSxFQUFZMTNCLFNBQVNpYyxVQUFVLENBQUVqYixRQUFTMDJCLEVBQVlrQyxpQkFDdkVsQyxFQUFjLElBRXRCLEdBQUMsaUNBRUQsU0FBb0IyQixHQUNoQkEsRUFBTUMsaUJBRU56QixFQUFNLzJCLEVBQUt1NEIsRUFBTUUsUUFBVWw3QixPQUFPd0QsV0FBYyxFQUFJLEVBQ3BEZzJCLEVBQU16eEIsR0FBTWl6QixFQUFNRyxRQUFVbjdCLE9BQU95RCxZQUFlLEVBQUksRUFFdEQ4MUIsRUFBVTZCLGNBQWM1QixFQUFPbjVCLEVBQU9YLGFBRXRDLElBQU0yN0IsRUFBYTlCLEVBQVUrQixpQkFBaUJuNUIsTUFBTStHLFVBQVUsR0FDOUQsR0FBSW15QixFQUFXMXBCLE9BQVMsRUFBRyxDQUN2QixJQUFNMU4sRUFBU28zQixFQUFXLEdBQUdwM0IsT0FDekJvMUIsSUFBZ0JwMUIsSUFDWm8xQixHQUFhQSxFQUFZMTNCLFNBQVNpYyxVQUFVLENBQUVqYixRQUFTMDJCLEVBQVlrQyxpQkFFdkVqQyxHQURBRCxFQUFjcDFCLEdBQ2NpRixTQUFTLEdBQ3JDbXdCLEVBQVlrQyxlQUFpQmxDLEVBQVkxM0IsU0FBU2dCLFFBQ2xEMDJCLEVBQVlvQyxhQUFlcEMsRUFBWTEzQixTQUFTZ0IsUUFDaEQwMkIsRUFBWTEzQixTQUFTaWMsVUFBVSxDQUFFaGMsTUFBTyxPQUFVZSxRQUFTLE1BRW5FLE1BQ1EwMkIsR0FDQUEsRUFBWTEzQixTQUFTaWMsVUFBVSxDQUFFamIsUUFBUyxFQUFLZixNQUFPeTNCLEVBQVkxM0IsU0FBU0csU0FBU0MsZ0JBQ3hGczNCLEVBQWMsSUFFdEIsR0FBQyxvQkFFRCxXQUVJNTVCLEtBQUtKLFNBQVM4SyxPQUFPMUssS0FBSzBDLE1BQU85QixFQUFPWCxhQUdwQ2IsRUFBQUEsUUFBQUEsZ0JBQ0FZLEtBQUt3NkIsY0FBYzE2QixXQUFXbThCLFFBQVMsRUFFdkNqOEIsS0FBS3c2QixjQUFjMTZCLFdBQVdtOEIsUUFBUyxFQUUzQ2o4QixLQUFLdzZCLGNBQWM5dkIsT0FBTzFLLEtBQUswQyxNQUFPOUIsRUFBT1gsYUFNN0N5TSxFQUFBQSxRQUFBQSxTQUNBMU0sS0FBS202QixTQUFTdDVCLGNBQWNpUyxTQUU1QmxTLEVBQU9YLFlBQVlpVCxvQkFHZjlULEVBQUFBLFFBQUFBLE9BQWdCQSxFQUFBQSxRQUFBQSxnQkFDaEJZLEtBQUtxNkIsTUFBTXZuQixTQUlmb3BCLHNCQUFzQmw4QixLQUFLMEssT0FBTzR1QixLQUFLdDVCLE1BQzNDLG9GQUFDLEVBN05vQixrMURDbkN6QixJQUNxQjI2QixFQUFNLFdBQ3ZCLFdBQVl3QixnR0FBTSxTQUNkbjhCLEtBQUswNkIsSUFBTSxJQUFJMEIsSUFBSUMsSUFFbkJyOEIsS0FBSzA2QixJQUFJNEIsaUJBQWtCLEVBRTNCdDhCLEtBQUtZLE9BQVN1N0IsRUFBS3Y3QixPQUFPWCxZQUMxQkQsS0FBS202QixTQUFXZ0MsRUFBS2hDLFNBQVN0NUIsY0FDOUJiLEtBQUtzNEIsTUFBUTZELEVBQUs3RCxNQUNsQnQ0QixLQUFLMEMsTUFBUXk1QixFQUFLejVCLE1BRWxCMUMsS0FBS283QixNQUFRLEtBQ2JwN0IsS0FBS203QixXQUFhLElBQ3RCLFdBNkhDLFNBN0hBLHdCQUVELFNBQUtnQixFQUFNdjRCLEdBQU0sV0FFYjVELEtBQUswNkIsSUFDQS8zQixJQUFJdkQsRUFBQUEsUUFBUSwyQkFDWjJGLEtBQUssbUJBQ0x3M0IsVUFBUyxTQUFDanRCLEdBQ1BsUSxFQUFBQSxRQUFBQSx3QkFBaUNrUSxHQUNqQ2t0QixFQUFBQSxFQUFBQSxZQUFXcDlCLEVBQUFBLFFBQ2YsSUFHSixJQUFNcTlCLEVBQWV6OEIsS0FBSzA2QixJQUFJZ0MsVUFBVSxVQWF4Q0QsRUFDSzk1QixJQUFJdkQsRUFBQUEsUUFBQUEsaUJBQXlCLGFBQzdCMkYsS0FBSyxtQkFDTHczQixVQUFTLFNBQUNqdEIsR0FDUCxFQUFLcXRCLGFBQWEsRUFBS2o2QixNQUFNK0csU0FBVSxXQUFZNkYsRUFDdkQsSUFDSm10QixFQUNLOTVCLElBQUl2RCxFQUFBQSxRQUFBQSxpQkFBeUIsVUFDN0IyRixLQUFLLGdCQUNMdzNCLFVBQVMsU0FBQ2p0QixHQUNQLEVBQUtxdEIsYUFBYSxFQUFLajZCLE1BQU0rRyxTQUFVLFFBQVM2RixFQUNwRCxJQUdKLElBQU1zdEIsRUFBZ0I1OEIsS0FBSzA2QixJQUFJZ0MsVUFBVSxXQUV6Q0UsRUFDS2o2QixJQUFJdkQsRUFBQUEsUUFBQUEsa0JBQTBCLFFBQzlCMkYsS0FBSyxvQkFDTDgzQixTQUNBTixVQUFTLFNBQUNqdEIsR0FDUCxFQUFLd3RCLGNBQWMsT0FBUSxJQUMvQixJQUNKRixFQUNLajZCLElBQUl2RCxFQUFBQSxRQUFBQSxrQkFBMEIsV0FDOUIyRixLQUFLLG1CQUNMODNCLFNBQ0FOLFVBQVMsU0FBQ2p0QixHQUNQLEVBQUt3dEIsY0FBYyxVQUFXLElBQ2xDLElBR0osSUFBTUMsRUFBYy84QixLQUFLMDZCLElBQUlnQyxVQUFVLFNBQ3ZDSyxFQUNLcDZCLElBQUl2RCxFQUFBQSxRQUFBQSxTQUFpQixjQUNyQjJGLEtBQUssZUFDTDgzQixTQUNBTixVQUFTLFNBQUNqdEIsR0FFUGxRLEVBQUFBLFFBQUFBLFNBQUFBLFdBQTZCa1EsR0FDN0JrdEIsRUFBQUEsRUFBQUEsWUFBV3A5QixFQUFBQSxTQUNYNlAsU0FBUyt0QixRQUNiLElBQ0pELEVBQ0twNkIsSUFBSXZELEVBQUFBLFFBQUFBLFNBQWlCLG1CQUNyQnVNLEtBQUssR0FDTEMsSUFBSSxHQUNKN0csS0FBSyxxQkFDTDgzQixTQUNBTixVQUFTLFNBQUNqdEIsR0FDUGxRLEVBQUFBLFFBQUFBLFNBQUFBLGdCQUFrQ2tRLEdBQ2xDa3RCLEVBQUFBLEVBQUFBLFlBQVdwOUIsRUFBQUEsUUFFZixJQUdKWSxLQUFLMDZCLElBQUl1QyxPQUliLEdBQUMsMEJBRUQsU0FBYXp6QixFQUFTbEcsRUFBTWdNLEdBRXhCLElBREFrdEIsRUFBQUEsRUFBQUEsWUFBV3A5QixFQUFBQSxTQUNQaWIsTUFBTUMsUUFBUTlRLFNBQXFCOUUsSUFBVHBCLEdBQStCLEtBQVRBLEVBQWEsS0FDakMsRUFEaUMsSUFDeENrRyxHQUFPLElBQTVCLElBQUssRUFBTCxxQkFBOEIsS0FBckIwekIsRUFBUSxRQUNUQSxFQUFTbjRCLEtBQUs0RSxXQUFXckcsS0FDekI0NUIsRUFBU3p6QixTQUFTLEdBQUdwRSxRQUFVaUssRUFFdkMsQ0FBQywrQkFDTCxDQUNKLEdBQUMsMkJBRUQsU0FBY3RLLEVBQVMrQyxHQUduQixJQUFNeUIsRUFBVTlHLE1BQU0rRyxVQUN0Qit5QixFQUFBQSxFQUFBQSxZQUFXcDlCLEVBQUFBLFNBQ1grSCxPQUFPQyxRQUFRb0MsR0FBU25DLFNBQVEsU0FBQ3FDLEdBQ2hCQSxFQUFJLEdBQVMsS0FBMUIsSUFDTTFFLEVBQVUwRSxFQUFJLEdBQVksYUFFaEJoRixJQUFaTSxHQUFxQyxNQUFaQSxFQUV6QjBFLEVBQUksR0FBR3hILFNBQVNnQixRQUFVOUQsRUFBQUEsUUFBQUEsa0JBQUFBLEtBQWdDLEVBQU1BLEVBQUFBLFFBQUFBLG1CQUM3Q3NGLElBQVpNLEdBQXFDLE1BQVpBLElBRWhDMEUsRUFBSSxHQUFHeEgsU0FBU2dCLFFBQVU5RCxFQUFBQSxRQUFBQSxrQkFBQUEsUUFBbUMsRUFBTUEsRUFBQUEsUUFBQUEsY0FFM0UsR0FDSixHQUFDLGtCQUVELFdBQ0lZLEtBQUswNkIsSUFBSUksTUFDYixHQUFDLG9CQUVELFdBQ0k5NkIsS0FBSzA2QixJQUFJeUMsVUFDVG45QixLQUFLMDZCLElBQU0sSUFBSTBCLElBQUlDLEdBQ3ZCLG9GQUFDLEVBMUlzQixzNEJDSjNCLElBQ3FCbkIsRUFBVyxXQUM1QixXQUFZdDdCLEVBQVU4QyxFQUFPOUIsRUFBUXU1QixHQUFVLGlIQUUzQ242QixLQUFLSixTQUFXQSxFQUNoQkksS0FBSzBDLE1BQVFBLEVBQ2IxQyxLQUFLWSxPQUFTQSxFQUNkWixLQUFLbTZCLFNBQVdBLEVBRWhCbjZCLEtBQUtvOUIsUUFBVSxLQUdmcDlCLEtBQUtxOUIsU0FBVyxJQUFJQyxFQUFBQSxRQUlwQnQ5QixLQUFLSixTQUFTRSxXQUFXVSxpQkFDckIsYUFDQSxTQUFDKzZCLEdBQUssT0FBS2dDLEVBQUFBLFFBQUFBLFNBQWlCLEVBQUtDLFlBQVlqQyxHQUFRLElBQUksSUFDekQsR0FFSnY3QixLQUFLSixTQUFTRSxXQUFXVSxpQkFBaUIsY0FBYyxTQUFDKzZCLEdBQUssT0FBSyxFQUFLa0MsYUFBYWxDLEVBQU0sSUFBRSxHQUM3RnY3QixLQUFLSixTQUFTRSxXQUFXVSxpQkFBaUIsYUFBYSxTQUFDKzZCLEdBQUssT0FBSyxFQUFLbUMsWUFBWW5DLEVBQU0sSUFBRSxHQUczRnY3QixLQUFLcTlCLFNBQVN2OUIsV0FBV1UsaUJBQWlCLFdBQVcsU0FBQys2QixHQUU5Q0EsRUFBTXhaLFFBSU4sRUFBS3NiLFNBQVNNLGFBQWFwQyxFQUFPLFdBQ2xDcjhCLFFBQVFDLElBQUksaUJBRXBCLEdBQ0osV0F3QkMsU0F4QkEsK0JBRUQsU0FBWW84QixHQUNSQSxFQUFNQyxpQkFFTnA4QixFQUFBQSxRQUFBQSxhQUFxQixDQUN6QixHQUFDLDBCQUVELFNBQWFtOEIsR0FDVEEsRUFBTUMsaUJBRU5wOEIsRUFBQUEsUUFBQUEsYUFBcUIsQ0FDekIsR0FBQyx5QkFFRCxTQUFZbThCLEdBQ1JBLEVBQU1DLGlCQUVOb0MsYUFBYTU5QixLQUFLbzlCLFNBRWxCcDlCLEtBQUtvOUIsUUFBVWx2QixZQUFXLFdBQ3RCOU8sRUFBQUEsUUFBQUEsZUFBdUIsQ0FDM0IsR0FBRyxLQUVIQSxFQUFBQSxRQUFBQSxlQUF1QixDQUMzQixvRkFBQyxFQTFEMkIsMmtFQ1FoQyxJQUFNeStCLEVBQXFCLGVBQ3JCQyxFQUFxQixlQUNyQkMsRUFBd0Isc0JBR3hCQyxFQUE2QixvQkFDN0JDLEVBQWtDLHNCQUdsQ0MsRUFBb0Isc0JBR3BCQyxFQUF5QixjQUd6QkMsRUFBdUIsWUFDdkJDLEVBQXlCLG1CQUN6QkMsRUFBNkIsdUJBRzdCQyxFQUFxQixrQkFHckJDLEVBQThCLGlCQUc5QkMsRUFBNEIsZUFJYnZFLEVBQVUsV0FDM0IsV0FBWXgzQixHQUFPLGlIQUNmMUMsS0FBSzBDLE1BQVFBLEVBQ2IxQyxLQUFLZ00sTUFBUSxJQUFJbEIsRUFBQUEsUUFBTXBJLEdBQ3ZCMUMsS0FBS2tILFVBQVksSUFBSUYsRUFBQUEsUUFBU3RFLEdBRTlCLElBQU04TixHQUFjakIsRUFBQUEsRUFBQUEsa0JBR3BCLEdBRkF2UCxLQUFLMCtCLGlCQUVnQixJQUFqQmx1QixFQUNBdkUsTUFBTSxtRUFDSCxDQUNILElBQVE2RCxFQUF1QlUsRUFBdkJWLFNBQVVDLEVBQWFTLEVBQWJULFNBRVo0dUIsRUFBWSxVQUFZOTdCLEtBQUtvRixTQUFTRSxTQUFTLElBQUlDLFVBQVUsRUFBRyxJQUN0RXBJLEtBQUs0K0IsT0FBUyxJQUFJQyxJQUFBQSxRQUFZei9CLEVBQUFBLFFBQUFBLEtBQUFBLE9BQW9CQSxFQUFBQSxRQUFBQSxLQUFBQSxLQUFrQkEsRUFBQUEsUUFBQUEsS0FBQUEsS0FBa0J1L0IsR0FFdEZwK0IsT0FBTzRNLEtBQU9uTixLQUFLNCtCLE9BQ25CcitCLE9BQU84TSxhQUFrQzNJLElBQXhCOEwsRUFBWW5ELFFBQXdCLEtBQU9tRCxFQUFZbkQsUUFFeEVyTixLQUFLNCtCLE9BQU9FLFFBQVEsQ0FDaEJDLFNBQVVqdkIsRUFDVkMsU0FBVUEsRUFDVml2QixXQUFXLEVBQ1hDLFFBQVEsRUFDUkMsY0FBYyxFQUNkQyxVQUFXLFdBQ1BqZ0MsUUFBUUMsSUFBSSxtQkFHWixFQUFLaWdDLFVBQVVwQixHQUNmLEVBQUtvQixVQUFVbkIsR0FFZixFQUFLbUIsVUFBVXZCLEdBQ2YsRUFBS3VCLFVBQVV0QixHQUNmLEVBQUtzQixVQUFVckIsR0FFZixFQUFLcUIsVUFBVWIsR0FDZixFQUFLYSxVQUFVaEIsR0FDZixFQUFLZ0IsVUFBVWYsR0FDZixFQUFLZSxVQUFVZCxHQUNmLEVBQUtjLFVBQVVaLEdBQ2YsRUFBS1ksVUFBVVgsR0FJZixFQUFLcnhCLFFBQVErd0IsRUFBd0IsS0FHckMsRUFBSy93QixRQUFROHdCLEVBQW1COStCLEVBQUFBLFFBQUFBLGFBQUFBLFFBR2hDbUIsT0FBT3lMLE1BQVEsRUFBS0EsTUFDcEJ6TCxPQUFPMkcsVUFBWSxFQUFLQSxVQUV4QixFQUFLMDNCLE9BQU9TLGlCQUFtQixFQUFLQSxpQkFDcEMsRUFBS1QsT0FBT1UsaUJBQW1CLEVBQUtBLGdCQUN4QyxFQUNBQyxVQUFXLFdBQ1ByZ0MsUUFBUUMsSUFBSSwyQkFDWjhNLE1BQU0sMkJBQ1YsR0FFUixDQUNKLFdBOExDLFNBOUxBLGlDQUVELFdBU0ksR0FDSCw4QkFFRCxTQUFpQnV6QixHQUNvQixJQUE3QkEsRUFBZUMsWUFDZnZnQyxRQUFRQyxJQUFJLDBCQUE0QnFnQyxFQUFlRSxjQUN2RHhnQyxRQUFRQyxJQUFJLHNCQUVwQixHQUFDLDhCQUVELFNBQWlCd2dDLEdBQ2IsSUFBTUMsRUFBTUQsRUFBT0UsY0FBY0MsT0FDM0JsZCxFQUFJK2MsRUFBT0ksZ0JBQ1hDLEVBQVFwZCxFQUFFeGEsVUFBVXdhLEVBQUV6VCxRQUFRLEtBQU8sR0FJM0MsR0FBSTZ3QixHQUFTbkMsRUFDVCxJQUNJLElBQU16bkIsRUFBTzlJLEtBQUsyRCxNQUFNMnVCLEdBQ3hCci9CLE9BQU95TCxNQUFNekUsT0FBTzZPLEVBQUtoUixHQUFJZ1IsRUFBS3BULEVBQUdvVCxFQUFLOU4sRUFBRzhOLEVBQUszSyxRQUFTMkssRUFBS3BSLFFBR3BFLENBRkUsTUFBTzJRLEdBQ0x6VyxRQUFRZ04sTUFBTXlKLEVBQ2xCLE1BQ0csR0FBSXFxQixHQUFTbEMsRUFDaEIsSUFDSSxJQUFJMW5CLEVBQU85SSxLQUFLMkQsTUFBTTJ1QixHQUN0QnIvQixPQUFPeUwsTUFBSyxPQUFRb0ssRUFBS2hSLEdBRzdCLENBRkUsTUFBT3VRLEdBQ0x6VyxRQUFRZ04sTUFBTXlKLEVBQ2xCLE1BQ0csR0FBSXFxQixHQUFTL0IsR0FBbUMrQixHQUFTaEMsRUFFNUQsSUFDSSxJQUFNNW5CLEVBQU85SSxLQUFLMkQsTUFBTTJ1QixHQUNsQmwwQixFQUFVdE0sRUFBQUEsUUFBQUEsYUFBQUEsT0FJaEIsR0FBWXNGLE1BQVIwUixFQUVBLElBQUssSUFBTTlDLEtBQUs4QyxFQUFNLENBQ2xCLE1BQThCQSxFQUFLOUMsR0FBM0JsTyxFQUFFLEVBQUZBLEdBQUlwQyxFQUFDLEVBQURBLEVBQUdzRixFQUFDLEVBQURBLEVBQUdtRCxFQUFPLEVBQVBBLFFBQ1p6RyxFQUE2Qk4sTUFBbkIwUixFQUFLOUMsR0FBR3RPLFFBQXVCLElBQU1vUixFQUFLOUMsR0FBR3RPLFFBRXpEQSxJQUFZMEcsR0FBdUIsTUFBWkEsRUFFUWhILE1BQTNCbkUsT0FBT3lMLE1BQU1pMEIsT0FBTzc2QixHQUNwQjdFLE9BQU95TCxNQUFNekUsT0FBT25DLEVBQUlwQyxFQUFHc0YsRUFBR21ELEVBQVN6RyxJQUV2Q3pFLE9BQU95TCxNQUFNSSxLQUFLaEgsRUFBSXBDLEVBQUdzRixFQUFHbUQsR0FDNUJsTCxPQUFPeUwsTUFBTUcsV0FBVy9HLEVBQUlKLElBSWhDZ0gsTUFBSyxPQUFRNUcsRUFFckIsQ0FJUixDQUZFLE1BQU91USxHQUNMelcsUUFBUWdOLE1BQU15SixFQUNsQixNQUNHLEdBQUlxcUIsR0FBUzVCLEVBRWhCLElBQ0ksSUFBTWhvQixFQUFPOUksS0FBSzJELE1BQU0ydUIsR0FDeEJyL0IsT0FBTzJHLFVBQVVnNUIsV0FBVzlwQixFQUdoQyxDQUZFLE1BQU9ULEdBQ0x6VyxRQUFRZ04sTUFBTXlKLEVBQ2xCLE1BQ0csR0FBSXFxQixHQUFTM0IsRUFBd0IsQ0FFeEMsSUFBTWpvQixFQUFPOUksS0FBSzJELE1BQU0ydUIsR0FDeEIxZ0MsUUFBUUMsSUFBSWlYLEdBRVo3VixPQUFPMkcsVUFBVW1CLGVBQWUrTixFQUFLaFIsR0FDekMsTUFBTyxHQUFJNDZCLEdBQVMxQixFQUVoQi85QixPQUFPMkcsVUFBVWk1QixpQkFDZCxHQUFJSCxHQUFTekIsRUFDaEIsSUFDSSxJQUFNbm9CLEVBQU85SSxLQUFLMkQsTUFBTTJ1QixHQUN4QnIvQixPQUFPeUwsTUFBTW8wQixZQUFZaHFCLEVBQUtoUixHQUFJZ1IsRUFBS2pMLEVBQUdpTCxFQUFLaEwsRUFBR2dMLEVBQUsvSyxFQUFHK0ssRUFBSzlLLFFBR25FLENBRkUsTUFBT3FLLEdBQ0x6VyxRQUFRZ04sTUFBTXlKLEVBQ2xCLE1BQ0csR0FBSXFxQixHQUFTakMsR0FJaEIsR0FBVyxVQUFQNkIsRUFBaUIsQ0FDakIsSUFBTXYyQixFQUFJLHNCQUF3QnUyQixFQUFJbnZCLE1BQU0sS0FBSyxHQUMzQ21TLEVBQUksSUFBb0IsR0FBYmdkLEVBQUkxdEIsT0FFZnpFLEVBQU9sTyxTQUFTbU8sY0FBYyxZQUNwQ0QsRUFBSzR5QixVQUFZaDNCLEVBQ2pCb0UsRUFBS3hKLE1BQU1nSyxRQUFVLFFBRXJCQyxZQUFXLFdBQ1AzTyxTQUFTbU8sY0FBYyxZQUFZekosTUFBTWdLLFFBQVUsTUFDdkQsR0FBRzJVLEVBQ1AsT0FDRyxHQUFJb2QsR0FBU3hCLEVBQ2hCLEdBQVksWUFBUm9CLEVBQ0ExZ0MsUUFBUUMsSUFBSSx3QkFDWjhQLFNBQVMrdEIsY0FDTixHQUFJNEMsRUFBSWoyQixXQUFXLE9BQVEsQ0FDOUIsSUFBTU4sRUFBSSxXQUFhdTJCLEVBQUl4M0IsVUFBVSxHQUMvQndhLEVBQUksSUFBa0IsR0FBWHZaLEVBQUU2SSxPQUliekUsRUFBT2xPLFNBQVNtTyxjQUFjLFlBQ3BDRCxFQUFLNHlCLFVBQVloM0IsRUFDakJvRSxFQUFLeEosTUFBTWdLLFFBQVUsUUFFckJDLFlBQVcsV0FDUDNPLFNBQVNtTyxjQUFjLFlBQVl6SixNQUFNZ0ssUUFBVSxNQUN2RCxHQUFHMlUsRUFDUCxNQUNJMWpCLFFBQVFDLElBQUksZUFBZ0J5Z0MsUUFFN0IsR0FBSUksR0FBU3ZCLEVBQTJCLENBQzNDLElBQU02QixFQUFXaHpCLEtBQUsyRCxNQUFNMnVCLEdBRTVCLEdBREExZ0MsUUFBUUMsSUFBSSxpQkFBa0JtaEMsSUFDWixJQUFkQSxFQUFpQixDQUNqQixJQUNJQyxFQURBanRCLEVBQUksRUFFRjdGLEVBQU9sTyxTQUFTbU8sY0FBYyxZQUM5QkMsRUFBY3BPLFNBQVNDLGVBQWUsZUFDdENvTyxFQUFVck8sU0FBU3FGLGNBQWMsT0FDdkNnSixFQUFRQyxhQUFhLEtBQU0sZUFDM0IsSUFBTTJ5QixFQUFlamhDLFNBQVNxRixjQUFjLE1BRzVDLElBQUssSUFBTXM0QixLQUZYc0QsRUFBYTE3QixZQUFjLFVBQUgsT0FBYXc3QixFQUFTbDdCLEdBQUUsY0FDaER3SSxFQUFRekQsWUFBWXEyQixHQUNHRixFQUNuQixHQUFJbjVCLE9BQU80TCxVQUFVMHRCLGVBQWVDLEtBQUtKLEVBQVVwRCxHQUFXLENBTTFELEdBSklxRCxFQURNLElBQU5qdEIsRUFDYS9ULFNBQVNxRixjQUFjLE1BRXZCckYsU0FBU3FGLGNBQWMsS0FFdkIsU0FBYnM0QixFQUNBLElBQUssSUFBTCxNQUEyQi8xQixPQUFPQyxRQUFRazVCLEVBQVNscUIsTUFBSyxlQUFFLENBQXJELGdCQUFPL0csRUFBRyxLQUFFQyxFQUFLLEtBQ2xCaXhCLEVBQVd6N0IsWUFBYyxHQUFILE9BQU11SyxFQUFHLGFBQUtDLEVBQ3hDLE1BRUFpeEIsRUFBV3o3QixZQUFjLEdBQUgsT0FBTW80QixFQUFRLGFBQUs1dkIsS0FBS0MsVUFBVSt5QixFQUFTcEQsS0FFckV0dkIsRUFBUXpELFlBQVlvMkIsR0FDcEJqdEIsR0FBSyxDQUNULENBRUo3RixFQUFLTyxhQUFhSixFQUFTRCxHQUMzQkYsRUFBS3hKLE1BQU1nSyxRQUFVLFFBQ3JCUixFQUFLeEosTUFBTWYsUUFBVSxNQUNyQmdMLFlBQVcsV0FDUFQsRUFBS3hKLE1BQU1mLFFBQVUsTUFDckJ1SyxFQUFLeEosTUFBTWdLLFFBQVUsTUFDekIsR0FBRyxJQUNQLENBQ0osQ0FDSixHQUFDLHVCQUVELFNBQVUreEIsRUFBTy80QixHQUNiLElBQU0wNUIsRUFBV3BnQyxPQUFPOE0sUUFBVSxJQUFNMnlCLEVBQ3hDaGdDLEtBQUs0K0IsT0FBT1EsVUFBVXVCLEdBQ3RCemhDLFFBQVFDLElBQUksbUJBQW9Cd2hDLEdBQ2hCLE1BQVoxNUIsR0FBa0JBLEdBQzFCLEdBQUMscUJBRUQsU0FBUSs0QixFQUFPWSxFQUFTMzVCLEdBQ3BCLElBQUk0NUIsRUFBVSxJQUFJaEMsSUFBQUEsU0FBYStCLEdBQ3pCRSxFQUFXdmdDLE9BQU84TSxRQUFVLElBQU0yeUIsRUFDeENhLEVBQVFkLGdCQUFrQmUsRUFDMUI5Z0MsS0FBSzQrQixPQUFPbUMsS0FBS0YsR0FDakIzaEMsUUFBUUMsSUFBSSxrQkFBbUIyaEMsR0FFZixNQUFaNzVCLEdBQWtCQSxHQUMxQixvRkFBQyxFQTlQMEIsK2dDQ25DL0IsSUFDcUIrNUIsRUFBSyxXQUN0QixXQUFZdCtCLEVBQU9nUyxFQUFTaWIsZ0dBQVUsU0FDbEMzdkIsS0FBSzBDLE1BQVFBLEVBQ2IxQyxLQUFLMnZCLFNBQVdBLEVBQ2hCM3ZCLEtBQUswVSxRQUFVQSxFQUVmMVUsS0FBSzBKLElBQU0sS0FDWDFKLEtBQUtpaEMsSUFBTSxJQUNmLFdBa0ZDLFNBbEZBLHdCQUVELFNBQUszOUIsR0FBTSxXQUdQLE9BQVFBLEdBQ0osSUFBSyxPQUVELElBQUltUixFQUFBQSxXQUFXelUsS0FBSzBVLFNBQVM3SSxLQUN6QnpNLEVBQUFBLFFBQUFBLE9BQWNBLEVBQUFBLFFBQUFBLE1BQUFBLFVBQXVCb1EsTUFDckMsU0FBQzZHLEdBQ0csSUFDSXpTLEVBREVsQixFQUFRMlQsRUFBSzNULE1BR2Z0RCxFQUFBQSxRQUFBQSxPQUFBQSxTQUNBc0QsRUFBTWcxQixVQUFTLFNBQVVoQixJQUNqQkEsRUFBS2lCLFFBQVVqQixFQUFLd0ssV0FBU3hLLEVBQUs5d0IsWUFBYSxHQUMvQzh3QixFQUFLaUIsU0FDTGpCLEVBQUt4MEIsU0FBUzRFLFVBQVkxSCxFQUFBQSxRQUFBQSxLQUFBQSxVQUMxQndFLEVBQU84eUIsRUFFZixJQUdKLEVBQUtodEIsSUFBTTlGLEVBRVh1OUIsRUFBQUEsb0JBQUFBLGdCQUFvQ3Y5QixFQUFLM0IsVUFFekMsSUFBSWl6QixFQUFRLElBQUloMUIsRUFBQUEsTUFDaEJnMUIsRUFBTTF5QixNQUFNeVIsZUFBZSxLQUMzQixFQUFLdlIsTUFBTUMsSUFBSXV5QixHQUVmLEVBQUsrTCxJQUFNL0wsRUFHWEEsRUFBTWhpQixtQkFBa0IsR0FDeEJnaUIsRUFBTXZ5QixJQUFJaUIsR0FHVixFQUFLbEIsTUFBTUMsSUFBSUQsRUFDbkIsR0FDQTY2QixFQUFBQSxRQUFBQSxjQUNBQSxFQUFBQSxRQUFBQSxZQUVKLE1BRUosSUFBSyxTQUVELElBQUlyOUIsRUFBQUEsYUFBbUJGLEtBQUswVSxTQUFTN0ksS0FDakN6TSxFQUFBQSxRQUFBQSxPQUFjQSxFQUFBQSxRQUFBQSxNQUFBQSxVQUF1Qm9RLE1BQ3JDLFNBQUM5RixHQUNHQSxFQUFJZ3VCLFVBQVMsU0FBQzhCLEdBQ1YsR0FBSUEsYUFBaUJ0NUIsRUFBQUEsS0FBWSxDQUU3QixJQUFNZ0MsRUFBVyxJQUFJd0IsRUFBQUEsUUFBUyxVQUFVQyxTQUN4Q3pCLEVBQVMwTyxJQUFNLEVBQUsrZSxTQUFTeVIsR0FDN0I1SCxFQUFNdDNCLFNBQVdBLEVBR2I5QyxFQUFBQSxRQUFBQSxPQUFBQSxVQUNBbzZCLEVBQU0vMkIsZUFBZ0IsRUFDdEIrMkIsRUFBTTV6QixZQUFhLEVBRTNCLENBQ0osSUFHQSxFQUFLOEQsSUFBTUEsRUFDWCxFQUFLdTNCLElBQU12M0IsRUFFWEEsRUFBSWxILE1BQU15UixlQUFlN1UsRUFBQUEsUUFBQUEsT0FBY0EsRUFBQUEsUUFBQUEsTUFBQUEsVUFBdUJvRCxPQUM5RCxFQUFLRSxNQUFNQyxJQUFJK0csRUFDbkIsR0FDQTZ6QixFQUFBQSxRQUFBQSxjQUNBQSxFQUFBQSxRQUFBQSxZQUloQixHQUFDLG9CQUVELFdBQ0l2OUIsS0FBSzBDLE1BQU02QyxPQUFPdkYsS0FBS2loQyxJQUMzQixvRkFBQyxFQTFGcUIscThCQ0MxQixJQUNxQnJHLEVBQU8sV0FDeEIsMEdBQWMsU0FFVjU2QixLQUFLMnZCLFNBQVcsQ0FBQyxDQUNyQixXQTJDQyxTQTNDQSx3QkFFRCxXQUFPLFdBQ0c3WixFQUFTLElBQUk1VixFQUFBQSxjQUNibWhDLEVBQWdCamlDLEVBQUFBLFFBQUFBLGNBQ2hCa2lDLEVBQWFsaUMsRUFBQUEsUUFBQUEsUUFBQUEsV0FDYm1pQyxFQUFlLEdBNEJyQixPQTFCQXpyQixFQUFPRSxRQUFRNVcsRUFBQUEsUUFBQUEsUUFBQUEsTUFFZmtpQyxFQUFXajZCLFNBQVEsU0FBQ202QixHQUVoQkQsRUFBYTdtQixLQUNULElBQUkxTixFQUFBQSxTQUFRLFNBQUNDLEVBQVNDLEdBRWxCNEksRUFBT2pLLEtBQ0gyMUIsRUFBVUMsT0FFVixTQUFDOWYsR0FDR0EsRUFBUStmLFdBQWFMLEVBR3JCLElBQU1NLEVBQVcsQ0FBQyxFQUNsQkEsRUFBU0gsRUFBVXo4QixNQUFRNGMsRUFDdkJnZ0IsRUFBU0gsRUFBVXo4QixnQkFBaUI3RSxFQUFBQSxTQUFlK00sRUFBUTAwQixFQUNuRSxHQUNBcEUsRUFBQUEsUUFBQUEsZUFDQSxTQUFDcUUsR0FBRyxPQUFLMTBCLEVBQU8sSUFBSStKLE1BQU0ycUIsRUFBTSwyQ0FBNkNKLEVBQVVDLE9BQU8sR0FFdEcsSUFFUixJQUdPejBCLEVBQUFBLFFBQUFBLElBQVl1MEIsR0FBY2hnQixNQUM3QixTQUFDb08sR0FFRyxJQUFLLElBQUlyYyxFQUFJLEVBQUdBLEVBQUlxYyxFQUFTemQsT0FBUW9CLElBQ2pDLEVBQUtxYyxTQUFTeG9CLE9BQU8yZ0IsS0FBSzZILEVBQVNyYyxJQUFJLElBQU1xYyxFQUFTcmMsR0FBR25NLE9BQU8yZ0IsS0FBSzZILEVBQVNyYyxJQUFJLEdBRTFGLElBQ0EsU0FBQ3V1QixHQUFNLE9BQUszaUMsUUFBUUMsSUFBSTBpQyxFQUFPLEdBRXZDLG9GQUFDLEVBL0N1QiwyRkNUeEJDLGd5Q0FHSixJQUFNQyxFQUFTLENBQ1h2L0IsTUFBTyxFQUNQdy9CLE1BQU8sQ0FDSHB3QixLQUFNLElBQ05xd0IsTUFBTyxHQUNQQyxLQUFNLEdBQ05DLE1BQU8sR0FDUEMsS0FBTSxJQUVWajFCLEtBQU0sQ0FDRjhDLE9BQVFMLGFBQWFDLFFBQVEsc0JBQXdCLHlCQUNyREcsS0FBTXFCLFNBQVN6QixhQUFhQyxRQUFRLHFCQUF1QixLQUMzREwsS0FBTUksYUFBYUMsUUFBUSxvQkFBc0IsUUFDakR4QyxRQUFTdUMsYUFBYUMsUUFBUSx1QkFBeUIsTUFFM0R3eUIsYUFBYyxDQUNWbjdCLFVBQVcsSUFDWG83QixPQUFRLEtBRVpySSxnQkFBaUIsSUFDakJzSSxrQkFBbUIsQ0FDZkMsTUFBTSxFQUNOQyxTQUFTLEdBRWJDLGNBQWUsR0FDZkMsT0FBTyxFQUNQQyxnQkFBZ0IsRUFDaEJ6K0IsaUJBQWlCLEVBQ2pCNDNCLGlCQUFrQixDQUNkNzBCLFdBQVcsRUFDWG83QixRQUFRLEdBRVpPLHlCQUF5QixFQUN6QkMsVUFBVSxFQUNWQyxZQUFZLEVBQ1pDLFlBQVksRUFDWkMsZUFBZSxFQUNmQyxhQUFhLEVBQ2I3QixjQUFlLEVBQ2Y4QixJQUFLLEVBQ0xDLE9BQVExMkIsRUFBQUEsUUFBQUEsT0FBQUEsVUFBQUEsTUFDUjIyQixTQUFVLElBQ1YxaEIsUUFBUyxDQUNMblMsS0FBTSxxQkFDTjh4QixXQUFZLENBQUMsQ0FBRXY4QixLQUFNLEtBQU0wOEIsTUFBTyxvQkFFdEM3OUIsS0FBTSxDQUNGMC9CLGNBQWMsRUFDZHg4QixXQUFXLEVBQ1h5OEIsYUFBYSxFQUNicmhDLFNBQVUsQ0FDTkMsTUFBTyxTQUNQMEYsU0FBVSxXQUdsQm1DLElBQUssQ0FDRDdILE1BQU8sU0FDUDRELEtBQU0sT0FFVm5GLE9BQVEsQ0FDSjRpQyxJQUFLLEdBQ0x6OUIsS0FBTSxHQUNOQyxJQUFLLElBQ0x2RixPQUFRLEVBQ1JnakMsS0FBTSxFQUNOQyxLQUFNLEVBQ05DLEtBQU0sR0FFVnhKLFNBQVUsQ0FDTm41QixZQUFZLEVBQ1pDLGlCQUFrQixJQUNsQkMsWUFBYSxJQUNiQyxVQUFXLEdBQ1hDLFlBQWEsSUFDYkMsWUFBYSxJQUNiQyxjQUFlLEVBQ2ZDLGNBQWdCLEVBQUksR0FBTXNCLEtBQUtJLEdBQy9CckIsaUJBQWtCRSxJQUNsQkQsZ0JBQWlCQyxJQUNqQk4sZUFBZSxFQUNmRSxjQUFlLEdBQ2ZELFlBQVksRUFDWlYsT0FBUSxDQUNKaUMsRUFBRyxFQUNIc0YsRUFBRyxFQUNIQyxFQUFHLElBR1g5QyxhQUFjLENBQ1Y0RSxTQUFTLEVBQ1RsSSxNQUFPLFNBRVh3RCxpQkFBa0IsQ0FDZDBFLFNBQVMsRUFDVGxJLE1BQU8sU0FDUHdYLFVBQVcsR0FDWDNXLEdBQUksR0FDSnNGLEVBQUcsSUFDSEMsRUFBRyxLQUVQMUMsT0FBUSxDQUNKd0UsU0FBUyxFQUNUdTVCLGVBQWUsRUFDZjk5QixLQUFNLEVBQ04rOUIsU0FBVSxLQUNWQyxVQUFXLEtBQ1gvOUIsS0FBTSxJQUNOQyxJQUFLLElBQ0w5QixJQUFLLElBQ0xnQyxNQUFPLElBQ1BDLFFBQVMsSUFDVEYsTUFBTyxLQUVYUCxXQUFZLENBQ1IyRSxTQUFTLEVBQ1RsSSxNQUFPLFNBQ1B3WCxVQUFXLElBQ1hSLFNBQVUsSUFDVm5XLEVBQUcsRUFDSHNGLEVBQUcsRUFDSEMsRUFBRyxHQUVQakMsVUFBVyxDQUNQK0QsU0FBUyxFQUNUbEksTUFBTyxTQUNQNGhDLFlBQWEsU0FDYnBxQixVQUFXLElBQ1gzVyxFQUFHLEVBQ0hzRixFQUFHLEVBQ0hDLEVBQUcsSUFLTHk3QixFQUFlcDBCLGFBQWFDLFFBQVF0USxTQUFTMFAsU0FBU0MsS0FBTyxXQUNuRTR5QixFQUFpQmtDLFFBQXNEMTJCLEtBQUsyRCxNQUFNK3lCLEdBQWdCakMsRUFHM0YsSUFBTXZGLEVBQWEsU0FBQ3BtQixHQUN2QnhHLGFBQWFXLFFBQVFoUixTQUFTMFAsU0FBU0MsS0FBTyxVQUFXNUIsS0FBS0MsVUFBVSxFQUFELEtBQU13MEIsR0FBVzNyQixJQUM1RixFQUVBLDZKQ25JSStxQixFQUFzQixDQUN0QjhDLGdCQUFpQixTQUFVaGlDLEdBQ3ZCLElBQUlrZ0IsRUFBUWxnQixFQUFTa2dCLE1BQ2pCL1AsRUFBYW5RLEVBQVNtUSxXQUsxQixHQUNjLE9BQVYrUCxRQUN3QnpkLElBQXhCME4sRUFBV2pTLGVBQ1d1RSxJQUF0QjBOLEVBQVdDLGFBQ08zTixJQUFsQjBOLEVBQVdtZ0IsR0FKZixDQVlBLElBQUkxSixFQUFVMUcsRUFBTTNILE1BQ2hCaEksRUFBWUosRUFBV2pTLFNBQVNxYSxNQUNoQzBwQixFQUFVOXhCLEVBQVdDLE9BQU9tSSxNQUM1QjJwQixFQUFNL3hCLEVBQVdtZ0IsR0FBRy9YLE1BRXBCNHBCLEVBQVk1eEIsRUFBVU4sT0FBUyxPQUVSeE4sSUFBdkIwTixFQUFXK2UsU0FDWGx2QixFQUFTNEwsYUFBYSxVQUFXLElBQUlpaEIsRUFBQUEsZ0JBQWdCLElBQUkxSyxhQUFhLEVBQUlnZ0IsR0FBWSxJQVExRixJQUxBLElBQUlDLEVBQVdqeUIsRUFBVytlLFFBQVEzVyxNQUU5QjhwQixFQUFPLEdBQ1BDLEVBQU8sR0FFRmp4QixFQUFJLEVBQUdBLEVBQUk4d0IsRUFBVzl3QixJQUMzQmd4QixFQUFLaHhCLEdBQUssSUFBSS9CLEVBQUFBLFFBQ2RnekIsRUFBS2p4QixHQUFLLElBQUkvQixFQUFBQSxRQUdsQixJQUFJaXpCLEVBQUssSUFBSWp6QixFQUFBQSxRQUNUa3pCLEVBQUssSUFBSWx6QixFQUFBQSxRQUNUbXpCLEVBQUssSUFBSW56QixFQUFBQSxRQUNUb3pCLEVBQU0sSUFBSXJwQixFQUFBQSxRQUNWc3BCLEVBQU0sSUFBSXRwQixFQUFBQSxRQUNWdXBCLEVBQU0sSUFBSXZwQixFQUFBQSxRQUNWd3BCLEVBQU8sSUFBSXZ6QixFQUFBQSxRQUNYd3pCLEVBQU8sSUFBSXh6QixFQUFBQSxRQW1DWHl6QixFQUFTL2lDLEVBQVMraUMsT0FFQSxJQUFsQkEsRUFBTzl5QixTQUNQOHlCLEVBQVMsQ0FDTCxDQUNJajRCLE1BQU8sRUFDUHVGLE1BQU91VyxFQUFRM1csVUFLbEJvQixFQUFJLEVBQWIsSUFBSyxJQUFXa1UsRUFBS3dkLEVBQU85eUIsT0FBUW9CLEVBQUlrVSxJQUFNbFUsRUFNMUMsSUFMQSxJQUtTRyxFQUhMMUcsR0FGQW1vQixFQUFROFAsRUFBTzF4QixJQUVEdkcsTUFHRTJHLEVBQUszRyxFQUZibW9CLEVBQU01aUIsTUFFc0JtQixFQUFJQyxFQUFJRCxHQUFLLEVBQ2pEd3hCLEVBQWVwYyxFQUFRcFYsRUFBSSxHQUFJb1YsRUFBUXBWLEVBQUksR0FBSW9WLEVBQVFwVixFQUFJLElBSW5FLElBSUl5eEIsRUFBR3RpQixFQUFHa0UsRUFKTnFlLEVBQU0sSUFBSTV6QixFQUFBQSxRQUNWNnpCLEVBQU8sSUFBSTd6QixFQUFBQSxRQUNYOHpCLEVBQUksSUFBSTl6QixFQUFBQSxRQUNSK3pCLEVBQUssSUFBSS96QixFQUFBQSxRQTBCYixJQUFTK0IsRUFBSSxFQUFHa1UsRUFBS3dkLEVBQU85eUIsT0FBUW9CLEVBQUlrVSxJQUFNbFUsRUFDMUMsS0FBSTRoQixFQUVBbm9CLEVBR0osSUFBUzBHLEVBSEwxRyxHQUZBbW9CLEVBQVE4UCxFQUFPMXhCLElBRUR2RyxNQUdFMkcsRUFBSzNHLEVBRmJtb0IsRUFBTTVpQixNQUVzQm1CLEVBQUlDLEVBQUlELEdBQUssRUFDakQ4eEIsRUFBYTFjLEVBQVFwVixFQUFJLElBQ3pCOHhCLEVBQWExYyxFQUFRcFYsRUFBSSxJQUN6Qjh4QixFQUFhMWMsRUFBUXBWLEVBQUksR0FSUixDQXJIekIsTUFKSXZVLFFBQVFnTixNQUNKLHFIQW1DUixTQUFTKzRCLEVBQWVPLEVBQUdDLEVBQUc1MEIsR0FDMUIyekIsRUFBR3pyQixVQUFVdkcsRUFBZSxFQUFKZ3pCLEdBQ3hCZixFQUFHMXJCLFVBQVV2RyxFQUFlLEVBQUppekIsR0FDeEJmLEVBQUczckIsVUFBVXZHLEVBQWUsRUFBSjNCLEdBRXhCOHpCLEVBQUk1ckIsVUFBVW9yQixFQUFTLEVBQUpxQixHQUNuQlosRUFBSTdyQixVQUFVb3JCLEVBQVMsRUFBSnNCLEdBQ25CWixFQUFJOXJCLFVBQVVvckIsRUFBUyxFQUFKdHpCLEdBRW5CNHpCLEVBQUdpQixJQUFJbEIsR0FDUEUsRUFBR2dCLElBQUlsQixHQUVQSSxFQUFJYyxJQUFJZixHQUNSRSxFQUFJYSxJQUFJZixHQUVSLElBQUlwNUIsRUFBSSxHQUFPcTVCLEVBQUk1aEMsRUFBSTZoQyxFQUFJdjhCLEVBQUl1OEIsRUFBSTdoQyxFQUFJNGhDLEVBQUl0OEIsR0FJdENxOUIsU0FBU3A2QixLQUVkdTVCLEVBQUtqeEIsS0FBSzR3QixHQUFJeHdCLGVBQWU0d0IsRUFBSXY4QixHQUFHczlCLGdCQUFnQmxCLEdBQUtFLEVBQUl0OEIsR0FBRzJMLGVBQWUxSSxHQUMvRXc1QixFQUFLbHhCLEtBQUs2d0IsR0FBSXp3QixlQUFlMndCLEVBQUk1aEMsR0FBRzRpQyxnQkFBZ0JuQixHQUFLSSxFQUFJN2hDLEdBQUdpUixlQUFlMUksR0FFL0UrNEIsRUFBS2tCLEdBQUc3aUMsSUFBSW1pQyxHQUNaUixFQUFLbUIsR0FBRzlpQyxJQUFJbWlDLEdBQ1pSLEVBQUt6ekIsR0FBR2xPLElBQUltaUMsR0FFWlAsRUFBS2lCLEdBQUc3aUMsSUFBSW9pQyxHQUNaUixFQUFLa0IsR0FBRzlpQyxJQUFJb2lDLEdBQ1pSLEVBQUsxekIsR0FBR2xPLElBQUlvaUMsR0FDaEIsQ0E4QkEsU0FBU1EsRUFBYTFuQixHQUNsQnduQixFQUFFdHNCLFVBQVVtckIsRUFBYSxFQUFKcm1CLEdBQ3JCeW5CLEVBQUd6eEIsS0FBS3d4QixHQUVSemlCLEVBQUkwaEIsRUFBS3ptQixHQUlUc25CLEVBQUl0eEIsS0FBSytPLEdBQ1R1aUIsRUFBSU8sSUFBSUwsRUFBRXB4QixlQUFlb3hCLEVBQUVRLElBQUlqakIsS0FBSzVPLFlBSXBDb3hCLEVBQUtVLGFBQWFSLEVBQUkxaUIsR0FDdEJrRSxFQUFPc2UsRUFBS1MsSUFBSXRCLEVBQUsxbUIsSUFDckJxbkIsRUFBSXBlLEVBQU8sR0FBTyxFQUFNLEVBRXhCdWQsRUFBYSxFQUFKeG1CLEdBQVNzbkIsRUFBSW5pQyxFQUN0QnFoQyxFQUFhLEVBQUp4bUIsRUFBUSxHQUFLc25CLEVBQUk3OEIsRUFDMUIrN0IsRUFBYSxFQUFKeG1CLEVBQVEsR0FBS3NuQixFQUFJNThCLEVBQzFCODdCLEVBQWEsRUFBSnhtQixFQUFRLEdBQUtxbkIsQ0FDMUIsQ0FjSixFQU9BYSxzQkFBdUIsU0FBVXRSLEVBQVl1UixHQWV6QyxJQWRBLElBQUlDLEVBQW9DLE9BQXhCeFIsRUFBVyxHQUFHdFMsTUFFMUIrakIsRUFBaUIsSUFBSUMsSUFBSWgvQixPQUFPMmdCLEtBQUsyTSxFQUFXLEdBQUdyaUIsYUFDbkRnMEIsRUFBc0IsSUFBSUQsSUFBSWgvQixPQUFPMmdCLEtBQUsyTSxFQUFXLEdBQUdqSyxrQkFFeERwWSxFQUFhLENBQUMsRUFDZG9ZLEVBQWtCLENBQUMsRUFFbkJDLEVBQXVCZ0ssRUFBVyxHQUFHaEsscUJBRXJDNGIsRUFBaUIsSUFBSTl6QixFQUFBQSxlQUVyQnVQLEVBQVMsRUFFSnhPLEVBQUksRUFBR0EsRUFBSW1oQixFQUFXdmlCLFNBQVVvQixFQUFHLENBQ3hDLElBQUlyUixFQUFXd3lCLEVBQVduaEIsR0FDdEJnekIsRUFBa0IsRUFJdEIsR0FBSUwsS0FBa0MsT0FBbkJoa0MsRUFBU2tnQixPQU14QixPQUxBampCLFFBQVFnTixNQUNKLHFGQUNJb0gsRUFDQSxnSUFFRCxLQUtYLElBQUssSUFBSXZPLEtBQVE5QyxFQUFTbVEsV0FBWSxDQUNsQyxJQUFLOHpCLEVBQWVLLElBQUl4aEMsR0FRcEIsT0FQQTdGLFFBQVFnTixNQUNKLHFGQUNJb0gsRUFDQSxnRUFDQXZPLEVBQ0EsZ0VBRUQsVUFHY0wsSUFBckIwTixFQUFXck4sS0FBcUJxTixFQUFXck4sR0FBUSxJQUV2RHFOLEVBQVdyTixHQUFNMlYsS0FBS3pZLEVBQVNtUSxXQUFXck4sSUFFMUN1aEMsR0FDSixDQUlBLEdBQUlBLElBQW9CSixFQUFldDBCLEtBTW5DLE9BTEExUyxRQUFRZ04sTUFDSixxRkFDSW9ILEVBQ0Esa0VBRUQsS0FLWCxHQUFJbVgsSUFBeUJ4b0IsRUFBU3dvQixxQkFNbEMsT0FMQXZyQixRQUFRZ04sTUFDSixxRkFDSW9ILEVBQ0EseUVBRUQsS0FHWCxJQUFLLElBQUl2TyxLQUFROUMsRUFBU3VvQixnQkFBaUIsQ0FDdkMsSUFBSzRiLEVBQW9CRyxJQUFJeGhDLEdBTXpCLE9BTEE3RixRQUFRZ04sTUFDSixxRkFDSW9ILEVBQ0EscUVBRUQsVUFHbUI1TyxJQUExQjhsQixFQUFnQnpsQixLQUFxQnlsQixFQUFnQnpsQixHQUFRLElBRWpFeWxCLEVBQWdCemxCLEdBQU0yVixLQUFLelksRUFBU3VvQixnQkFBZ0J6bEIsR0FDeEQsQ0FPQSxHQUhBc2hDLEVBQWVoa0MsU0FBU21rQyxlQUFpQkgsRUFBZWhrQyxTQUFTbWtDLGdCQUFrQixHQUNuRkgsRUFBZWhrQyxTQUFTbWtDLGVBQWU5ckIsS0FBS3pZLEVBQVNJLFVBRWpEMmpDLEVBQVcsQ0FDWCxJQUFJMXpCLEVBRUosR0FBSTJ6QixFQUNBM3pCLEVBQVFyUSxFQUFTa2dCLE1BQU03UCxVQUNwQixTQUFxQzVOLElBQWpDekMsRUFBU21RLFdBQVdqUyxTQVEzQixPQUxBakIsUUFBUWdOLE1BQ0oscUZBQ0lvSCxFQUNBLG9FQUVELEtBUFBoQixFQUFRclEsRUFBU21RLFdBQVdqUyxTQUFTbVMsS0FRekMsQ0FFQSt6QixFQUFlSSxTQUFTM2tCLEVBQVF4UCxFQUFPZ0IsR0FFdkN3TyxHQUFVeFAsQ0FDZCxDQUNKLENBSUEsR0FBSTJ6QixFQUFXLENBQ1gsSUFBSVMsRUFBYyxFQUNkQyxFQUFjLEdBRWxCLElBQVNyekIsRUFBSSxFQUFHQSxFQUFJbWhCLEVBQVd2aUIsU0FBVW9CLEVBQUcsQ0FHeEMsSUFGQSxJQUFJNk8sRUFBUXNTLEVBQVduaEIsR0FBRzZPLE1BRWpCMU8sRUFBSSxFQUFHQSxFQUFJME8sRUFBTTdQLFFBQVNtQixFQUMvQmt6QixFQUFZanNCLEtBQUt5SCxFQUFNOU4sS0FBS1osR0FBS2l6QixHQUdyQ0EsR0FBZWpTLEVBQVduaEIsR0FBR2xCLFdBQVdqUyxTQUFTbVMsS0FDckQsQ0FFQSt6QixFQUFldmQsU0FBUzZkLEVBQzVCLENBSUEsSUFBSyxJQUFJNWhDLEtBQVFxTixFQUFZLENBQ3pCLElBQUl3MEIsRUFBa0I1bUMsS0FBSzZtQyxzQkFBc0J6MEIsRUFBV3JOLElBRTVELElBQUs2aEMsRUFNRCxPQUxBMW5DLFFBQVFnTixNQUNKLHdGQUNJbkgsRUFDQSxlQUVELEtBR1hzaEMsRUFBZXg0QixhQUFhOUksRUFBTTZoQyxFQUN0QyxDQUlBLElBQUssSUFBSTdoQyxLQUFReWxCLEVBQWlCLENBQzlCLElBQUlzYyxFQUFrQnRjLEVBQWdCemxCLEdBQU0sR0FBR21OLE9BRS9DLEdBQXdCLElBQXBCNDBCLEVBQXVCLE1BRTNCVCxFQUFlN2IsZ0JBQWtCNmIsRUFBZTdiLGlCQUFtQixDQUFDLEVBQ3BFNmIsRUFBZTdiLGdCQUFnQnpsQixHQUFRLEdBRXZDLElBQVN1TyxFQUFJLEVBQUdBLEVBQUl3ekIsSUFBbUJ4ekIsRUFBRyxDQUN0QyxJQUFJeXpCLEVBQXlCLEdBRTdCLElBQVN0ekIsRUFBSSxFQUFHQSxFQUFJK1csRUFBZ0J6bEIsR0FBTW1OLFNBQVV1QixFQUNoRHN6QixFQUF1QnJzQixLQUFLOFAsRUFBZ0J6bEIsR0FBTTBPLEdBQUdILElBR3pELElBQUkwekIsRUFBdUJobkMsS0FBSzZtQyxzQkFBc0JFLEdBRXRELElBQUtDLEVBTUQsT0FMQTluQyxRQUFRZ04sTUFDSix3RkFDSW5ILEVBQ0Esb0JBRUQsS0FHWHNoQyxFQUFlN2IsZ0JBQWdCemxCLEdBQU0yVixLQUFLc3NCLEVBQzlDLENBQ0osQ0FFQSxPQUFPWCxDQUNYLEVBTUFRLHNCQUF1QixTQUFVejBCLEdBTTdCLElBTEEsSUFBSWdjLEVBQ0FELEVBQ0E5TSxFQUNBNGxCLEVBQWMsRUFFVDN6QixFQUFJLEVBQUdBLEVBQUlsQixFQUFXRixTQUFVb0IsRUFBRyxDQUN4QyxJQUFJbU8sRUFBWXJQLEVBQVdrQixHQUUzQixHQUFJbU8sRUFBVXlsQiw2QkFJVixPQUhBaG9DLFFBQVFnTixNQUNKLDhHQUVHLEtBSVgsUUFEbUJ4SCxJQUFmMHBCLElBQTBCQSxFQUFhM00sRUFBVWpILE1BQU14SCxhQUN2RG9iLElBQWUzTSxFQUFVakgsTUFBTXhILFlBSS9CLE9BSEE5VCxRQUFRZ04sTUFDSixtSkFFRyxLQUlYLFFBRGlCeEgsSUFBYnlwQixJQUF3QkEsRUFBVzFNLEVBQVUwTSxVQUM3Q0EsSUFBYTFNLEVBQVUwTSxTQUl2QixPQUhBanZCLFFBQVFnTixNQUNKLHVJQUVHLEtBSVgsUUFEbUJ4SCxJQUFmMmMsSUFBMEJBLEVBQWFJLEVBQVVKLFlBQ2pEQSxJQUFlSSxFQUFVSixXQUl6QixPQUhBbmlCLFFBQVFnTixNQUNKLHlJQUVHLEtBR1grNkIsR0FBZXhsQixFQUFVakgsTUFBTXRJLE1BQ25DLENBRUEsSUFBSXNJLEVBQVEsSUFBSTRULEVBQVc2WSxHQUN2Qm5sQixFQUFTLEVBRWIsSUFBU3hPLEVBQUksRUFBR0EsRUFBSWxCLEVBQVdGLFNBQVVvQixFQUNyQ2tILEVBQU1wYSxJQUFJZ1MsRUFBV2tCLEdBQUdrSCxNQUFPc0gsR0FFL0JBLEdBQVUxUCxFQUFXa0IsR0FBR2tILE1BQU10SSxPQUdsQyxPQUFPLElBQUk0YyxFQUFBQSxnQkFBZ0J0VSxFQUFPMlQsRUFBVTlNLEVBQ2hELEVBTUE4bEIscUJBQXNCLFNBQVUvMEIsR0FRNUIsSUFMQSxJQUFJZ2MsRUFDQTZZLEVBQWMsRUFDZG5rQixFQUFTLEVBR0p4UCxFQUFJLEVBQUdDLEVBQUluQixFQUFXRixPQUFRb0IsRUFBSUMsSUFBS0QsRUFBRyxDQUMvQyxJQUFJbU8sRUFBWXJQLEVBQVdrQixHQUczQixRQURtQjVPLElBQWYwcEIsSUFBMEJBLEVBQWEzTSxFQUFVakgsTUFBTXhILGFBQ3ZEb2IsSUFBZTNNLEVBQVVqSCxNQUFNeEgsWUFFL0IsT0FEQTlULFFBQVFnTixNQUFNLDZEQUNQLEtBR1grNkIsR0FBZXhsQixFQUFVakgsTUFBTXRJLE9BQy9CNFEsR0FBVXJCLEVBQVUwTSxRQUN4QixDQUdBLElBQUlpWixFQUFvQixJQUFJeFksRUFBQUEsa0JBQWtCLElBQUlSLEVBQVc2WSxHQUFjbmtCLEdBQ3ZFaEIsRUFBUyxFQUNUdWxCLEVBQU0sR0FDTkMsRUFBVSxDQUFDLE9BQVEsT0FBUSxPQUFRLFFBQ25DQyxFQUFVLENBQUMsT0FBUSxPQUFRLE9BQVEsUUFFOUI5ekIsRUFBSSxFQUFiLElBQWdCRixFQUFJbkIsRUFBV0YsT0FBUXVCLEVBQUlGLEVBQUdFLElBQUssQ0FDL0MsSUFDSTBhLEdBREExTSxFQUFZclAsRUFBV3FCLElBQ0YwYSxTQUNyQjdiLEVBQVFtUCxFQUFVblAsTUFDbEJrMUIsRUFBTSxJQUFJM1ksRUFBQUEsMkJBQTJCdVksRUFBbUJqWixFQUFVck0sRUFBUUwsRUFBVUosWUFDeEZnbUIsRUFBSTNzQixLQUFLOHNCLEdBRVQxbEIsR0FBVXFNLEVBSVYsSUFBSyxJQUFJdGQsRUFBSSxFQUFHQSxFQUFJeUIsRUFBT3pCLElBQ3ZCLElBQUssSUFBSTQyQixFQUFJLEVBQUdBLEVBQUl0WixFQUFVc1osSUFDMUJELEVBQUlELEVBQVFFLElBQUk1MkIsRUFBRzRRLEVBQVU2bEIsRUFBUUcsSUFBSTUyQixHQUdyRCxDQUVBLE9BQU93MkIsQ0FDWCxFQU1BSyxrQkFBbUIsU0FBVXpsQyxHQUl6QixJQUFJMGxDLEVBQU0sRUFDVixJQUFLLElBQUk1aUMsS0FBUTlDLEVBQVNtUSxXQUFZLENBQ2xDLElBQUl3MUIsRUFBTzNsQyxFQUFTNm9CLGFBQWEvbEIsR0FDakM0aUMsR0FBT0MsRUFBS3QxQixNQUFRczFCLEVBQUt6WixTQUFXeVosRUFBS3B0QixNQUFNOFQsaUJBQ25ELENBRUEsSUFBSXpGLEVBQVU1bUIsRUFBUzRvQixXQUV2QixPQURBOGMsR0FBTzllLEVBQVVBLEVBQVF2VyxNQUFRdVcsRUFBUXNGLFNBQVd0RixFQUFRck8sTUFBTThULGtCQUFvQixDQUUxRixFQU9BdVosY0FBZSxTQUFVNWxDLEdBQTRCLElBQWxCNmxDLEVBQVksVUFBSCw2Q0FBRyxLQUMzQ0EsRUFBWWpsQyxLQUFLK0ksSUFBSWs4QixFQUFXQyxPQUFPQyxTQW9CdkMsSUFoQkEsSUFBSUMsRUFBYyxDQUFDLEVBQ2ZwZixFQUFVNW1CLEVBQVM0b0IsV0FDbkJyWSxFQUFZdlEsRUFBUzZvQixhQUFhLFlBQ2xDb2QsRUFBY3JmLEVBQVVBLEVBQVF2VyxNQUFRRSxFQUFVRixNQUdsRDYxQixFQUFZLEVBR1pDLEVBQWlCamhDLE9BQU8yZ0IsS0FBSzdsQixFQUFTbVEsWUFDdENpMkIsRUFBYSxDQUFDLEVBQ2RDLEVBQW1CLENBQUMsRUFDcEJ0ZCxFQUFhLEdBQ2JzYyxFQUFVLENBQUMsT0FBUSxPQUFRLE9BQVEsUUFHOUJoMEIsRUFBSSxFQUFHQyxFQUFJNjBCLEVBQWVsMkIsT0FBUW9CLEVBQUlDLEVBQUdELElBQUssQ0FHbkQrMEIsRUFGSXRqQyxFQUFPcWpDLEVBQWU5MEIsSUFFUCxJQUVmaTFCLEVBQVl0bUMsRUFBU3VvQixnQkFBZ0J6bEIsTUFFckN1akMsRUFBaUJ2akMsR0FBUSxJQUFJc1YsTUFBTWt1QixFQUFVcjJCLFFBQVFzMkIsT0FBTzUzQixLQUFJLGlCQUFNLEVBQUUsSUFFaEYsQ0FHQSxJQUFJNjNCLEVBQWU1bEMsS0FBSzZsQyxNQUFNLEVBQUlaLEdBQzlCYSxFQUFrQjlsQyxLQUFLNEosSUFBSSxHQUFJZzhCLEdBQ25DLElBQVNuMUIsRUFBSSxFQUFHQSxFQUFJNDBCLEVBQWE1MEIsSUFBSyxDQUNsQyxJQUFJNk8sRUFBUTBHLEVBQVVBLEVBQVF4VSxLQUFLZixHQUFLQSxFQUdwQ3MxQixFQUFPLEdBQ0ZuMUIsRUFBSSxFQUFiLElBQWdCRixFQUFJNjBCLEVBQWVsMkIsT0FBUXVCLEVBQUlGLEVBQUdFLElBSzlDLElBSkEsSUFBSTFPLEVBQU9xakMsRUFBZTMwQixHQUV0QjBhLEdBREExTSxFQUFZeGYsRUFBUzZvQixhQUFhL2xCLElBQ2JvcEIsU0FFaEJzWixFQUFJLEVBQUdBLEVBQUl0WixFQUFVc1osSUFFMUJtQixHQUFRLEdBQUosVUFBVW5uQixFQUFVNmxCLEVBQVFHLElBQUl0bEIsR0FBU3dtQixHQUFnQixLQU1yRSxHQUFJQyxLQUFRWCxFQUNSamQsRUFBV3RRLEtBQUt1dEIsRUFBWVcsUUFDekIsQ0FFSCxJQUFTbjFCLEVBQUksRUFBR0YsRUFBSTYwQixFQUFlbDJCLE9BQVF1QixFQUFJRixFQUFHRSxJQUM5QyxDQUFJMU8sRUFBT3FqQyxFQUFlMzBCLEdBQTFCLElBQ0lnTyxFQUFZeGYsRUFBUzZvQixhQUFhL2xCLEdBQ2xDd2pDLEVBQVl0bUMsRUFBU3VvQixnQkFBZ0J6bEIsR0FFckM4akMsR0FEQTFhLEVBQVcxTSxFQUFVME0sU0FDVmthLEVBQVd0akMsSUFDdEIrakMsRUFBaUJSLEVBQWlCdmpDLEdBRXRDLElBQVMwaUMsRUFBSSxFQUFHQSxFQUFJdFosRUFBVXNaLElBQUssQ0FDL0IsSUFBSXNCLEVBQWF6QixFQUFRRyxHQUd6QixHQUZBb0IsRUFBU251QixLQUFLK0csRUFBVXNuQixHQUFZNW1CLElBRWhDb21CLEVBQ0EsSUFBSyxJQUFJbC9CLEVBQUksRUFBRzIvQixFQUFLVCxFQUFVcjJCLE9BQVE3SSxFQUFJMi9CLEVBQUkzL0IsSUFDM0N5L0IsRUFBZXovQixHQUFHcVIsS0FBSzZ0QixFQUFVbC9CLEdBQUcwL0IsR0FBWTVtQixHQUc1RCxDQWhCNEIsQ0FtQmhDOGxCLEVBQVlXLEdBQVFULEVBQ3BCbmQsRUFBV3RRLEtBQUt5dEIsR0FDaEJBLEdBQ0osQ0FDSixDQUlBLElBQU0vbEIsRUFBU25nQixFQUFTNGYsUUFDeEIsSUFBU3ZPLEVBQUksRUFBR0MsRUFBSTYwQixFQUFlbDJCLE9BQVFvQixFQUFJQyxFQUFHRCxJQUFLLENBQy9Ddk8sRUFBT3FqQyxFQUFlOTBCLEdBQTFCLElBQ0kyMUIsRUFBZWhuQyxFQUFTNm9CLGFBQWEvbEIsR0FFckNncEIsRUFBUyxJQUFJa2IsRUFBYXp1QixNQUFNeEgsWUFBWXExQixFQUFXdGpDLElBQ3ZEMGMsRUFBWSxJQUFJcU4sRUFBQUEsZ0JBQWdCZixFQUFRa2IsRUFBYTlhLFNBQVU4YSxFQUFhNW5CLFlBS2hGLEdBSEFlLEVBQU92VSxhQUFhOUksRUFBTTBjLEdBR3RCMWMsS0FBUXVqQyxFQUNSLElBQVM3MEIsRUFBSSxFQUFHQSxFQUFJNjBCLEVBQWlCdmpDLEdBQU1tTixPQUFRdUIsSUFBSyxDQUNwRCxJQUFJeTFCLEVBQW9Cam5DLEVBQVN1b0IsZ0JBQWdCemxCLEdBQU0wTyxHQUduRDAxQixHQURBcGIsRUFBUyxJQUFJbWIsRUFBa0IxdUIsTUFBTXhILFlBQVlzMUIsRUFBaUJ2akMsR0FBTTBPLElBQ3ZELElBQUlxYixFQUFBQSxnQkFDckJmLEVBQ0FtYixFQUFrQi9hLFNBQ2xCK2EsRUFBa0I3bkIsYUFFdEJlLEVBQU9vSSxnQkFBZ0J6bEIsR0FBTTBPLEdBQUswMUIsQ0FDdEMsQ0FFUixDQU1BLE9BRkEvbUIsRUFBTzBHLFNBQVNrQyxHQUVUNUksQ0FDWCxFQU9BdUksb0JBQXFCLFNBQVUxb0IsRUFBVTJvQixHQUNyQyxHQUFJQSxJQUFhd2UsRUFBQUEsa0JBRWIsT0FEQWxxQyxRQUFRbVosS0FBSywyRkFDTnBXLEVBR1gsR0FBSTJvQixJQUFhSyxFQUFBQSxxQkFBdUJMLElBQWFrSyxFQUFBQSxzQkFBdUIsQ0FDeEUsSUFBSTNTLEVBQVFsZ0IsRUFBUzRvQixXQUlyQixHQUFjLE9BQVYxSSxFQUFnQixDQUNoQixJQUFJMEcsRUFBVSxHQUVWMW9CLEVBQVc4QixFQUFTNm9CLGFBQWEsWUFFckMsUUFBaUJwbUIsSUFBYnZFLEVBV0EsT0FIQWpCLFFBQVFnTixNQUNKLDJHQUVHakssRUFWUCxJQUFLLElBQUlxUixFQUFJLEVBQUdBLEVBQUluVCxFQUFTbVMsTUFBT2dCLElBQ2hDdVYsRUFBUW5PLEtBQUtwSCxHQUdqQnJSLEVBQVM2bUIsU0FBU0QsR0FDbEIxRyxFQUFRbGdCLEVBQVM0b0IsVUFPekIsQ0FJQSxJQUFJRSxFQUFvQjVJLEVBQU03UCxNQUFRLEVBQ2xDMFksRUFBYSxHQUVqQixHQUFJSixJQUFhSyxFQUFBQSxvQkFHYixJQUFTM1gsRUFBSSxFQUFHQSxHQUFLeVgsRUFBbUJ6WCxJQUNwQzBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUssSUFDM0IyVyxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixJQUMzQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksU0FLbkMsSUFBU0EsRUFBSSxFQUFHQSxFQUFJeVgsRUFBbUJ6WCxJQUMvQkEsRUFBSSxHQUFNLEdBQ1YwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixJQUMzQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksSUFDL0IwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixFQUFJLE1BRS9CMFgsRUFBV3RRLEtBQUt5SCxFQUFNOU4sS0FBS2YsRUFBSSxJQUMvQjBYLEVBQVd0USxLQUFLeUgsRUFBTTlOLEtBQUtmLEVBQUksSUFDL0IwWCxFQUFXdFEsS0FBS3lILEVBQU05TixLQUFLZixLQUtuQzBYLEVBQVc5WSxPQUFTLElBQU02WSxHQUMxQjdyQixRQUFRZ04sTUFDSixvR0FNUixJQUFJZ2YsRUFBY2pwQixFQUFTNGYsUUFJM0IsT0FIQXFKLEVBQVlwQyxTQUFTa0MsR0FDckJFLEVBQVltZSxjQUVMbmUsQ0FDWCxDQUdBLE9BREFoc0IsUUFBUWdOLE1BQU0sc0VBQXVFMGUsR0FDOUUzb0IsQ0FDWCx5RUM5cUJKLFNBQ0lxbkMsU0FBVS9vQyxPQUFPZ3BDLHlCQUNqQkMsTUFBUSxXQUNKLElBQ0ksSUFBSUYsRUFBUy9wQyxTQUFTcUYsY0FBYyxVQUVwQyxTQUNJckUsT0FBT2twQyx3QkFDTkgsRUFBT0ksV0FBVyxXQUFZSixFQUFPSSxXQUFXLHNCQUl6RCxDQUZFLE1BQU8vekIsR0FDTCxPQUFPLENBQ1gsQ0FDSixDQVhRLEdBYVJnMEIsVUFBV3BwQyxPQUFPcXBDLE9BQ2xCQyxRQUFTdHBDLE9BQU91cEMsTUFBUXZwQyxPQUFPd3BDLFlBQWN4cEMsT0FBT3lwQyxVQUFZenBDLE9BQU8wdkIsS0FFdkVnYSxxQkFBc0IsV0FDbEIsSUFBSXRsQyxFQUFVcEYsU0FBU3FGLGNBQWMsT0F3QnJDLE9BdkJBRCxFQUFRUyxHQUFLLHNCQUNiVCxFQUFRVixNQUFNaW1DLFdBQWEsWUFDM0J2bEMsRUFBUVYsTUFBTWttQyxTQUFXLE9BQ3pCeGxDLEVBQVFWLE1BQU1tbUMsV0FBYSxTQUMzQnpsQyxFQUFRVixNQUFNb21DLFVBQVksU0FDMUIxbEMsRUFBUVYsTUFBTXFtQyxXQUFhLE9BQzNCM2xDLEVBQVFWLE1BQU05QixNQUFRLE9BQ3RCd0MsRUFBUVYsTUFBTXNtQyxRQUFVLFFBQ3hCNWxDLEVBQVFWLE1BQU1wRSxNQUFRLFFBQ3RCOEUsRUFBUVYsTUFBTXVtQyxPQUFTLGFBRWxCeHFDLEtBQUt3cEMsUUFDTjdrQyxFQUFRMDdCLFVBQVk5L0IsT0FBT2twQyxzQkFDckIsQ0FDSSw0SkFDQSwwRkFDRno0QixLQUFLLE1BQ1AsQ0FDSSxxSkFDQSwwRkFDRkEsS0FBSyxPQUdWck0sQ0FDWCxFQUVBOGxDLG1CQUFvQixTQUFVN1QsR0FDMUIsSUFBSThULEVBQVF0bEMsRUFBSVQsRUFJaEIrbEMsT0FBK0JobUMsS0FGL0JreUIsRUFBYUEsR0FBYyxDQUFDLEdBRVI4VCxPQUF1QjlULEVBQVc4VCxPQUFTbnJDLFNBQVNtYyxLQUN4RXRXLE9BQXVCVixJQUFsQmt5QixFQUFXeHhCLEdBQW1Cd3hCLEVBQVd4eEIsR0FBSyxTQUVuRFQsRUFBVTNFLEtBQUtpcUMsd0JBQ1A3a0MsR0FBS0EsRUFFYnNsQyxFQUFPdmdDLFlBQVl4RixFQUN2QixxeEJDL0RKLElBQ3FCNDRCLEVBQU8sd0lBdUV2QixTQXZFdUIsMkJBQ3hCLFNBQWdCb04sRUFBSUMsRUFBWXIxQixHQUU1QixJQUFJczFCLEVBQU1DLEVBRVYsT0FIQUYsSUFBZUEsRUFBYSxLQUdyQixXQUNILElBQU1HLEVBQVV4MUIsR0FBU3ZWLEtBRW5CZ3JDLEdBQU8sSUFBSUMsS0FDYkMsRUFBT0MsVUFFUE4sR0FBUUcsRUFBTUgsRUFBT0QsR0FDckJoTixhQUFha04sR0FDYkEsRUFBYTU4QixZQUFXLFdBQ3BCMjhCLEVBQU9HLEVBQ1BMLEVBQUdTLE1BQU1MLEVBQVNHLEVBQ3RCLEdBQUdOLEtBRUhDLEVBQU9HLEVBQ1BMLEVBQUdTLE1BQU1MLEVBQVNHLEdBRTFCLENBQ0osR0FBQyx5QkFFRCxXQUNJLE9BQU8sU0FBVXRKLEdBQ2IsR0FBSUEsRUFBSXlKLGlCQUFrQixDQUN0QixJQUFNQyxFQUFtQjFKLEVBQUk1RyxPQUFTNEcsRUFBSTNHLE1BQVMsSUFFbkQvN0IsUUFBUUMsSUFBSTBELEtBQUtDLE1BQU13b0MsRUFBaUIsR0FBSyxlQUNqRCxDQUNKLENBQ0osR0FBQyxzQkFFRCxXQUNJLE9BQU8sU0FBVTFKLEdBQ2IxaUMsUUFBUWdOLE1BQU0wMUIsRUFDbEIsQ0FDSixHQUFDLCtCQUVELFNBQXlCei9CLEdBQ3JCLE9BQU8sU0FBQ21OLEdBQ2lCLGlCQUFWQSxJQUNQQSxFQUFRQSxFQUFNRixRQUFRLElBQUssT0FHL0JqTixFQUFNZ2IsT0FBTzdOLEVBQ2pCLENBQ0osR0FBQyxvQkFFRCxTQUFjMUwsR0FDVjVELEtBQUt3VSxZQUFZNVEsRUFBSzFCLFNBQVUwQixFQUFLM0IsU0FDekMsR0FBQyx5QkFFRCxTQUFtQkMsRUFBVUQsR0FDekIsT0FBTyxXQUNIQyxFQUFTd0UsU0FBV3hFLEVBQVN3RSxRQUM3QnhFLEVBQVNpd0IsY0FBZ0Jqd0IsRUFBU2l3QixhQUNsQ2p3QixFQUFTdUUsTUFBUXZFLEVBQVN1RSxLQUMxQnZFLEVBQVNzUyxhQUFjLEVBQ3ZCdlMsRUFBU3NwQyxvQkFBcUIsRUFDOUJ0cEMsRUFBU3VwQyxtQkFBb0IsRUFDN0J2cEMsRUFBU3dwQyxrQkFBbUIsQ0FDaEMsQ0FDSixHQUFDLDJCQUVELFNBQXFCdnBDLEVBQVV3cEMsRUFBYS9iLEdBQ3hDLE9BQU8sU0FBVXRnQixHQUNibk4sRUFBU3dwQyxHQUFlL2IsRUFBU3RnQixHQUNqQ25OLEVBQVNzUyxhQUFjLENBQzNCLENBQ0osT0F2RXdCLHFGQXVFdkIsRUF2RXVCLHN4QkNENUIsSUFBTW0zQixFQUFRLENBQ1YxbEMsS0FBTSxHQUNONUYsR0FBSSxHQUNKNkYsTUFBTyxHQUNQMGxDLEtBQU0sR0FDTkMsTUFBTyxHQUNQQyxJQUFLLEVBQ0xDLE9BQVEsSUFHU3pPLEVBQVEsV0FDekIsV0FBWXg5QixHQUFZLGlIQUNwQkUsS0FBS0YsV0FBYUEsR0FBY1AsU0FDaENTLEtBQUtnc0MsU0FBVyxDQUFDLEVBR2pCaHNDLEtBQUtGLFdBQVdVLGlCQUFpQixXQUFXLFNBQUMrNkIsR0FBSyxPQUFLLEVBQUswUSxZQUFZMVEsRUFBTSxJQUFFLEdBQ2hGdjdCLEtBQUtGLFdBQVdVLGlCQUFpQixTQUFTLFNBQUMrNkIsR0FBSyxPQUFLLEVBQUswUSxZQUFZMVEsRUFBTSxJQUFFLEdBRzlFaDdCLE9BQU9DLGlCQUFpQixRQUFRLGtCQUFNLEVBQUswckMsTUFBTSxJQUFFLEVBQ3ZELFdBaUVDLFNBakVBLDJCQUVELFdBQVUsV0FDTmxzQyxLQUFLRixXQUFXcXNDLG9CQUFvQixXQUFXLFNBQUM1USxHQUFLLE9BQUssRUFBSzBRLFlBQVkxUSxFQUFNLElBQUUsR0FDbkZ2N0IsS0FBS0YsV0FBV3FzQyxvQkFBb0IsU0FBUyxTQUFDNVEsR0FBSyxPQUFLLEVBQUswUSxZQUFZMVEsRUFBTSxJQUFFLEdBR2pGaDdCLE9BQU80ckMsb0JBQW9CLFFBQVEsa0JBQU0sRUFBS0QsTUFBTSxJQUFFLEVBQzFELEdBQUMsb0JBRUQsV0FDSSxJQUFLLElBQU1FLEtBQVFwc0MsS0FBS2dzQyxTQUFVaHNDLEtBQUtnc0MsU0FBU0ksSUFBUSxDQUM1RCxHQUFDLHlCQUVELFNBQVk3USxHQUtSLElBQU04USxFQUFVOVEsRUFBTThRLFFBQ3RCcnNDLEtBQUtnc0MsU0FBU0ssR0FBMEIsWUFBZjlRLEVBQU1qNEIsSUFDbkMsR0FBQyxxQkFFRCxTQUFRZ3BDLEdBRUosSUFEQSxJQUFNeGtCLEVBQU93a0IsRUFBUTc3QixNQUFNLEtBQ2xCNkMsRUFBSSxFQUFHQSxFQUFJd1UsRUFBSzVWLE9BQVFvQixJQUFLLENBQ2xDLElBQU1qRSxFQUFNeVksRUFBS3hVLEdBQ2JpNUIsR0FBVSxFQU1kLEdBSklBLEdBRG9DLEdBQXBDcGxDLE9BQU8yZ0IsS0FBSzZqQixHQUFPeDhCLFFBQVFFLEdBQ2pCclAsS0FBS2dzQyxTQUFTTCxFQUFNdDhCLElBRXBCclAsS0FBS2dzQyxTQUFTMzhCLEVBQUltOUIsY0FBYzE3QixXQUFXLEtBRXBEeTdCLEVBQVMsT0FBTyxDQUN6QixDQUVBLE9BQU8sQ0FDWCxHQUFDLDBCQUVELFNBQWFoUixFQUFPK1EsR0FNaEIsSUFMQSxJQUFNRyxFQUFVZCxFQUNWZSxFQUFZdmxDLE9BQU8yZ0IsS0FBSzJrQixHQUN4QjNrQixFQUFPd2tCLEVBQVE3N0IsTUFBTSxLQUdsQjZDLEVBQUksRUFBR0EsRUFBSXdVLEVBQUs1VixPQUFRb0IsSUFBSyxDQUNsQyxJQUFNakUsRUFBTXlZLEVBQUt4VSxHQUNiaTVCLEdBQVUsRUFjZCxHQWJZLFVBQVJsOUIsRUFDQWs5QixJQUFVaFIsRUFBTW9SLFNBQ0QsU0FBUnQ5QixFQUNQazlCLElBQVVoUixFQUFNcVIsUUFDRCxRQUFSdjlCLEVBQ1BrOUIsSUFBVWhSLEVBQU1zUixPQUNELFNBQVJ4OUIsRUFDUGs5QixJQUFVaFIsRUFBTXVSLFNBQ21CLElBQTVCSixFQUFVdjlCLFFBQVFFLEdBQ3pCazlCLEVBQVVoUixFQUFNOFEsVUFBWUksRUFBUXA5QixHQUM3QmtzQixFQUFNOFEsVUFBWWg5QixFQUFJbTlCLGNBQWMxN0IsV0FBVyxLQUN0RHk3QixHQUFVLElBRVRBLEVBQVMsT0FBTyxDQUN6QixDQUVBLE9BQU8sQ0FDWCxvRkFBQyxFQTVFd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9jYW1lcmEuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2NvbnRyb2xzLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9lbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL2NvbXBvbmVudHMvZ2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL2xhYmVsLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9saWdodC5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL2NvbXBvbmVudHMvbWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9jb21wb25lbnRzL29ic3RhY2xlLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy9hcHAvY29tcG9uZW50cy9yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL2NvbXBvbmVudHMvcm9ib3QuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9oZWxwZXJzL21lc2hIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9oZWxwZXJzL3VybEhlbHBlci5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL2hlbHBlcnMvdmVydGV4Tm9ybWFsc0hlbHBlci5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL2xvYWRlcnMvR0xURkxvYWRlci5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL21haW4uanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9tYW5hZ2Vycy9kYXRHVUkuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9tYW5hZ2Vycy9pbnRlcmFjdGlvbi5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL21hbmFnZXJzL21xdHRDbGllbnQuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2FwcC9tb2RlbC9tb2RlbC5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvYXBwL21vZGVsL3RleHR1cmUuanMiLCJ3ZWJwYWNrOi8vcGVyYS1zd2FybS12aXN1YWxpemVyLy4vc3JjL2pzL2RhdGEvY29uZmlnLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy91dGlscy9idWZmZXJHZW9tZXRyeVV0aWxzLmpzIiwid2VicGFjazovL3BlcmEtc3dhcm0tdmlzdWFsaXplci8uL3NyYy9qcy91dGlscy9kZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9wZXJhLXN3YXJtLXZpc3VhbGl6ZXIvLi9zcmMvanMvdXRpbHMva2V5Ym9hcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbmZpZyBmcm9tICcuL2RhdGEvY29uZmlnJztcbmltcG9ydCBEZXRlY3RvciBmcm9tICcuL3V0aWxzL2RldGVjdG9yJztcbmltcG9ydCBNYWluIGZyb20gJy4vYXBwL21haW4nO1xuXG4vLyBTdHlsZXNcbmltcG9ydCAnLi8uLi9jc3MvYXBwLnNjc3MnO1xuLy8gQ2hlY2sgZW52aXJvbm1lbnQgYW5kIHNldCB0aGUgQ29uZmlnIGhlbHBlclxuaWYgKF9fRU5WX18gPT09ICdkZXYnKSB7XG4gICAgY29uc29sZS5sb2coJy0tLS0tIFJVTk5JTkcgSU4gREVWIEVOVklST05NRU5UISAtLS0tLScpO1xuICAgIENvbmZpZy5pc0RldiA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gQ2hlY2sgZm9yIHdlYkdMIGNhcGFiaWxpdGllc1xuICAgIGlmICghRGV0ZWN0b3Iud2ViZ2wpIHtcbiAgICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcENvbnRhaW5lcicpO1xuICAgICAgICBuZXcgTWFpbihjb250YWluZXIpO1xuICAgIH1cbn1cblxuaW5pdCgpO1xuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcblxuLy8gQ2xhc3MgdGhhdCBjcmVhdGVzIGFuZCB1cGRhdGVzIHRoZSBtYWluIGNhbWVyYVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhIHtcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuaGVpZ2h0O1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgcG9zaXRpb24gYSBQZXJzcGVjdGl2ZSBDYW1lcmFcbiAgICAgICAgdGhpcy50aHJlZUNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgICAgIENvbmZpZy5jYW1lcmEuZm92LFxuICAgICAgICAgICAgd2lkdGggLyBoZWlnaHQsXG4gICAgICAgICAgICBDb25maWcuY2FtZXJhLm5lYXIsXG4gICAgICAgICAgICBDb25maWcuY2FtZXJhLmZhclxuICAgICAgICApO1xuICAgICAgICB0aGlzLnRocmVlQ2FtZXJhLnBvc2l0aW9uLnNldChDb25maWcuY2FtZXJhLnBvc1gsIENvbmZpZy5jYW1lcmEucG9zWSwgQ29uZmlnLmNhbWVyYS5wb3NaKTtcbiAgICAgICAgdGhpcy50aHJlZUNhbWVyYS51cC5zZXQoMCwgMCwgMSk7XG5cbiAgICAgICAgLy8gSW5pdGlhbCBzaXppbmdcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKHJlbmRlcmVyKTtcblxuICAgICAgICAvLyBMaXN0ZW5lcnNcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMudXBkYXRlU2l6ZShyZW5kZXJlciksIGZhbHNlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTaXplKHJlbmRlcmVyKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBjYW1lcmEgYXNwZWN0IHJhdGlvIHdpdGggd2luZG93IGFzcGVjdCByYXRpb1xuICAgICAgICB0aGlzLnRocmVlQ2FtZXJhLmFzcGVjdCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQud2lkdGggLyByZW5kZXJlci5kb21FbGVtZW50LmhlaWdodDtcblxuICAgICAgICAvLyBBbHdheXMgY2FsbCB1cGRhdGVQcm9qZWN0aW9uTWF0cml4IG9uIGNhbWVyYSBjaGFuZ2VcbiAgICAgICAgdGhpcy50aHJlZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIENvbnRyb2xzIGJhc2VkIG9uIG9yYml0IGNvbnRyb2xzXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9scyB7XG4gICAgY29uc3RydWN0b3IoY2FtZXJhLCBjb250YWluZXIpIHtcbiAgICAgICAgdGhpcy50aHJlZUNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCBjb250YWluZXIpO1xuXG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy50YXJnZXQuc2V0KENvbmZpZy5jb250cm9scy50YXJnZXQueCwgQ29uZmlnLmNvbnRyb2xzLnRhcmdldC55LCBDb25maWcuY29udHJvbHMudGFyZ2V0LnopO1xuICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMuYXV0b1JvdGF0ZSA9IENvbmZpZy5jb250cm9scy5hdXRvUm90YXRlO1xuICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gQ29uZmlnLmNvbnRyb2xzLmF1dG9Sb3RhdGVTcGVlZDtcbiAgICAgICAgdGhpcy50aHJlZUNvbnRyb2xzLnJvdGF0ZVNwZWVkID0gQ29uZmlnLmNvbnRyb2xzLnJvdGF0ZVNwZWVkO1xuICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMuem9vbVNwZWVkID0gQ29uZmlnLmNvbnRyb2xzLnpvb21TcGVlZDtcbiAgICAgICAgdGhpcy50aHJlZUNvbnRyb2xzLm1pbkRpc3RhbmNlID0gQ29uZmlnLmNvbnRyb2xzLm1pbkRpc3RhbmNlO1xuICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMubWF4RGlzdGFuY2UgPSBDb25maWcuY29udHJvbHMubWF4RGlzdGFuY2U7XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy5taW5Qb2xhckFuZ2xlID0gQ29uZmlnLmNvbnRyb2xzLm1pblBvbGFyQW5nbGU7XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy5tYXhQb2xhckFuZ2xlID0gQ29uZmlnLmNvbnRyb2xzLm1heFBvbGFyQW5nbGU7XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy5lbmFibGVEYW1waW5nID0gQ29uZmlnLmNvbnRyb2xzLmVuYWJsZURhbXBpbmc7XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy5lbmFibGVab29tID0gQ29uZmlnLmNvbnRyb2xzLmVuYWJsZVpvb207XG4gICAgICAgIHRoaXMudGhyZWVDb250cm9scy5kYW1waW5nRmFjdG9yID0gQ29uZmlnLmNvbnRyb2xzLmRhbXBpbmdGYWN0b3I7XG5cbiAgICAgICAgdGhpcy50aHJlZUNvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG5cbiAgICAgICAgLy8gQXZvaWQgbnVsbCBzaXR1YXRpb25zXG4gICAgICAgIGlmIChDb25maWcuY29udHJvbHMubWluQXppbXV0aEFuZ2xlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudGhyZWVDb250cm9scy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMubWluQXppbXV0aEFuZ2xlID0gQ29uZmlnLmNvbnRyb2xzLm1pbkF6aW11dGhBbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF2b2lkIG51bGwgc2l0dWF0aW9uc1xuICAgICAgICBpZiAoQ29uZmlnLmNvbnRyb2xzLm1heEF6aW11dGhBbmdsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRocmVlQ29udHJvbHMubWF4QXppbXV0aEFuZ2xlID0gQ29uZmlnLmNvbnRyb2xzLm1heEF6aW11dGhBbmdsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qdGhpcy50aHJlZUNvbnRyb2xzLm1vdXNlQnV0dG9ucyA9IHtcbiAgICAgICAgICAgIExFRlQ6IFRIUkVFLk1PVVNFLlJPVEFURSxcbiAgICAgICAgICAgIE1JRERMRTogVEhSRUUuTU9VU0UuRE9MTFksXG4gICAgICAgICAgICBSSUdIVDogVEhSRUUuTU9VU0UuUEFOXG4gICAgICAgIH0qL1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudmlyb25tZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVudmlyb25tZW50OiBTY2FsZTogJHtzY2VuZV9zY2FsZX0sIGFyZW5hU2l6ZToke0NvbmZpZy5hcmVuYS5zaXplfWApO1xuXG4gICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUJ1ZmZlckdlb21ldHJ5KENvbmZpZy5hcmVuYS5zaXplLCBDb25maWcuYXJlbmEuc2l6ZSk7XG4gICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICBjb2xvcjogMHg5OTk5OTksXG4gICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgbWF0ZXJpYWwudXNlckRhdGEub3JpZ2luYWxDb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweDk5OTk5OSk7XG5cbiAgICAgICAgLy8gR3JvdW5kXG4gICAgICAgIHZhciBncm91bmQgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICBncm91bmQuc2NhbGUuc2V0KHNjZW5lX3NjYWxlLCBzY2VuZV9zY2FsZSwgc2NlbmVfc2NhbGUpO1xuICAgICAgICBncm91bmQucG9zaXRpb24uc2V0KDAsIDAsIDApO1xuICAgICAgICBncm91bmQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICAgIHNjZW5lLmFkZChncm91bmQpO1xuXG4gICAgICAgIC8vIEdyaWRcbiAgICAgICAgdmFyIGdyaWQgPSBuZXcgVEhSRUUuR3JpZEhlbHBlcihDb25maWcuYXJlbmEuc2l6ZSwgTWF0aC5yb3VuZChDb25maWcuYXJlbmEuc2l6ZSAvIDEwKSwgMHgwMDAwMDAsIDB4NWI1YjViKTtcbiAgICAgICAgZ3JpZC5yb3RhdGlvbi54ID0gLU1hdGguUEkgLyAyO1xuICAgICAgICBncmlkLnNjYWxlLnNldChzY2VuZV9zY2FsZSwgc2NlbmVfc2NhbGUsIHNjZW5lX3NjYWxlKTtcbiAgICAgICAgZ3JpZC5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgICAgIGdyaWQubWF0ZXJpYWwub3BhY2l0eSA9IDAuMzU7XG4gICAgICAgIGdyaWQubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICBzY2VuZS5hZGQoZ3JpZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi9tYXRlcmlhbCc7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcblxuLy8gVGhpcyBoZWxwZXIgY2xhc3MgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGFuZCB0aGVuIHBsYWNlIGdlb21ldHJ5IGluIHRoZSBzY2VuZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VvbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgdGhpcy5nZW8gPSBudWxsO1xuICAgIH1cblxuICAgIG1ha2UodHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3BsYW5lJykge1xuICAgICAgICAgICAgcmV0dXJuICh3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW8gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSh3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzcGhlcmUnKSB7XG4gICAgICAgICAgICByZXR1cm4gKHJhZGl1cywgd2lkdGhTZWdtZW50cyA9IDMyLCBoZWlnaHRTZWdtZW50cyA9IDMyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkocmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxhY2UocG9zaXRpb24sIHJvdGF0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKDB4ZWVlZWVlKS5zdGFuZGFyZDtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuZ2VvLCBtYXRlcmlhbCk7XG5cbiAgICAgICAgLy8gVXNlIEVTNiBzcHJlYWQgdG8gc2V0IHBvc2l0aW9uIGFuZCByb3RhdGlvbiBmcm9tIHBhc3NlZCBpbiBhcnJheVxuICAgICAgICBtZXNoLnBvc2l0aW9uLnNldCguLi5wb3NpdGlvbik7XG4gICAgICAgIG1lc2gucm90YXRpb24uc2V0KC4uLnJvdGF0aW9uKTtcblxuICAgICAgICBpZiAoQ29uZmlnLnNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY2VuZS5hZGQobWVzaCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzLmpzJztcbmltcG9ydCB7IENTUzJEUmVuZGVyZXIsIENTUzJET2JqZWN0IH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL3JlbmRlcmVycy9DU1MyRFJlbmRlcmVyLmpzJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgQ1NTMkRSZW5kZXJlcigpO1xuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAnMHB4JztcbiAgICByZW5kZXJlci5pc1Nob3dpbmdMYWJsZXMgPSBDb25maWcuaXNTaG93aW5nTGFibGVzO1xuICAgIHJlbmRlcmVyLmlzU2hvd2luZ09ic3RhY2xlTGFibGVzID0gQ29uZmlnLmxhYmVsc1Zpc2liaWxpdHkub2JzdGFjbGVzO1xuICAgIHJlbmRlcmVyLmlzU2hvd2luZ1JvYm90TGFibGVzID0gQ29uZmlnLmxhYmVsc1Zpc2liaWxpdHkucm9ib3RzO1xuICAgIHJlbmRlcmVyLnVwZGF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gcmVuZGVyZXIudXBkYXRlU2l6ZSgpLCBmYWxzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHJlbmRlcmVyLnVwZGF0ZVNpemUoKSwgZmFsc2UpO1xuICAgIHJldHVybiByZW5kZXJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGFkZExhYmVsID0gKHByZWZpeCwgb2JqZWN0LCBtZXNoLCB2aXNpYmlsaXR5KSA9PiB7XG4gICAgaWYgKG1lc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gJ2xhYmVsJztcblxuICAgICAgICAvLyBUT0RPOiB1c2UgbmFtZXMsIGluc3RlZCBvZiBJRHNcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IG9iamVjdC5uYW1lICsgJyBbJyArIG1lc2gucmVhbGl0eSArICddJztcblxuICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpblRvcCA9ICctMS4yZW0nO1xuICAgICAgICBjb25zdCBlbGVtZW50TGFiZWwgPSBuZXcgQ1NTMkRPYmplY3QoZWxlbWVudCk7XG4gICAgICAgIGVsZW1lbnRMYWJlbC5uYW1lID0gYExhYmVsWyR7b2JqZWN0LmlkfV1gO1xuICAgICAgICBlbGVtZW50TGFiZWwucG9zaXRpb24uc2V0KDAsIDEsIDApO1xuICAgICAgICBlbGVtZW50TGFiZWwudmlzaWJsZSA9IHZpc2liaWxpdHk7XG4gICAgICAgIG1lc2guYWRkKGVsZW1lbnRMYWJlbCk7XG4gICAgICAgIG1lc2gucmVtb3ZlTGFiZWwgPSAoKSA9PiB7XG4gICAgICAgICAgICBtZXNoLnJlbW92ZShlbGVtZW50TGFiZWwpO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVMYWJlbCA9IChtZXNoKSA9PiB7XG4gICAgaWYgKG1lc2ggIT09IHVuZGVmaW5lZCAmJiBtZXNoLnJlbW92ZUxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVzaC5yZW1vdmVMYWJlbCgpO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG4vLyBTZXRzIHVwIGFuZCBwbGFjZXMgYWxsIGxpZ2h0cyBpbiBzY2VuZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHQge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICAvLyBBbWJpZW50XG4gICAgICAgIHRoaXMuYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodChDb25maWcuYW1iaWVudExpZ2h0LmNvbG9yKTtcbiAgICAgICAgdGhpcy5hbWJpZW50TGlnaHQudmlzaWJsZSA9IENvbmZpZy5hbWJpZW50TGlnaHQuZW5hYmxlZDtcblxuICAgICAgICAvLyBQb2ludCBsaWdodFxuICAgICAgICB0aGlzLnBvaW50TGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodChcbiAgICAgICAgICAgIENvbmZpZy5wb2ludExpZ2h0LmNvbG9yLFxuICAgICAgICAgICAgQ29uZmlnLnBvaW50TGlnaHQuaW50ZW5zaXR5LFxuICAgICAgICAgICAgQ29uZmlnLnBvaW50TGlnaHQuZGlzdGFuY2VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wb2ludExpZ2h0LnBvc2l0aW9uLnNldChDb25maWcucG9pbnRMaWdodC54LCBDb25maWcucG9pbnRMaWdodC55LCBDb25maWcucG9pbnRMaWdodC56KTtcbiAgICAgICAgdGhpcy5wb2ludExpZ2h0LnZpc2libGUgPSBDb25maWcucG9pbnRMaWdodC5lbmFibGVkO1xuXG4gICAgICAgIC8vIERpcmVjdGlvbmFsIGxpZ2h0XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KFxuICAgICAgICAgICAgQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuY29sb3IsXG4gICAgICAgICAgICBDb25maWcuZGlyZWN0aW9uYWxMaWdodC5pbnRlbnNpdHlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldChcbiAgICAgICAgICAgIENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LngsXG4gICAgICAgICAgICBDb25maWcuZGlyZWN0aW9uYWxMaWdodC55LFxuICAgICAgICAgICAgQ29uZmlnLmRpcmVjdGlvbmFsTGlnaHQuelxuICAgICAgICApO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQudmlzaWJsZSA9IENvbmZpZy5kaXJlY3Rpb25hbExpZ2h0LmVuYWJsZWQ7XG5cbiAgICAgICAgLy8gU2hhZG93IG1hcFxuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuY2FzdFNoYWRvdyA9IENvbmZpZy5zaGFkb3cuZW5hYmxlZDtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5iaWFzID0gQ29uZmlnLnNoYWRvdy5iaWFzO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gQ29uZmlnLnNoYWRvdy5uZWFyO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSBDb25maWcuc2hhZG93LmZhcjtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEubGVmdCA9IENvbmZpZy5zaGFkb3cubGVmdDtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSBDb25maWcuc2hhZG93LnJpZ2h0O1xuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSBDb25maWcuc2hhZG93LnRvcDtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gQ29uZmlnLnNoYWRvdy5ib3R0b207XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IENvbmZpZy5zaGFkb3cubWFwV2lkdGg7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSBDb25maWcuc2hhZG93Lm1hcEhlaWdodDtcblxuICAgICAgICAvLyBTaGFkb3cgY2FtZXJhIGhlbHBlclxuICAgICAgICB0aGlzLmRpcmVjdGlvbmFsTGlnaHRIZWxwZXIgPSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKHRoaXMuZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhKTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25hbExpZ2h0SGVscGVyLnZpc2libGUgPSBDb25maWcuc2hhZG93LmhlbHBlckVuYWJsZWQ7XG5cbiAgICAgICAgLy8gSGVtaXNwaGVyZSBsaWdodFxuICAgICAgICB0aGlzLmhlbWlMaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoXG4gICAgICAgICAgICBDb25maWcuaGVtaUxpZ2h0LmNvbG9yLFxuICAgICAgICAgICAgQ29uZmlnLmhlbWlMaWdodC5ncm91bmRDb2xvcixcbiAgICAgICAgICAgIENvbmZpZy5oZW1pTGlnaHQuaW50ZW5zaXR5XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuaGVtaUxpZ2h0LnBvc2l0aW9uLnNldChDb25maWcuaGVtaUxpZ2h0LngsIENvbmZpZy5oZW1pTGlnaHQueSwgQ29uZmlnLmhlbWlMaWdodC56KTtcbiAgICAgICAgdGhpcy5oZW1pTGlnaHQudmlzaWJsZSA9IENvbmZpZy5oZW1pTGlnaHQuZW5hYmxlZDtcbiAgICB9XG5cbiAgICBwbGFjZShsaWdodE5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChsaWdodE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FtYmllbnQnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZGlyZWN0aW9uYWwnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuZGlyZWN0aW9uYWxMaWdodCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5kaXJlY3Rpb25hbExpZ2h0SGVscGVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncG9pbnQnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMucG9pbnRMaWdodCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2hlbWknOlxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuaGVtaUxpZ2h0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLy8gVVNlIHRoaXMgY2xhc3MgYXMgYSBoZWxwZXIgdG8gc2V0IHVwIHNvbWUgZGVmYXVsdCBtYXRlcmlhbHNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGVyaWFsIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xvcikge1xuICAgICAgICB0aGlzLmJhc2ljID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN0YW5kYXJkID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmcsXG4gICAgICAgICAgICByb3VnaG5lc3M6IDEsXG4gICAgICAgICAgICBtZXRhbG5lc3M6IDAsXG4gICAgICAgICAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMud2lyZSA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IHdpcmVmcmFtZTogdHJ1ZSB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuaW1wb3J0IHsgYWRkTGFiZWwsIHJlbW92ZUxhYmVsIH0gZnJvbSAnLi9sYWJlbCc7XG5cbmNvbnN0IE9CU1RBQ0xFX1BSRUZJWCA9ICdPYnN0YWNsZV8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYnN0YWNsZSB7XG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgY29uc29sZS5sb2coJ09ic3RhY2xlIFJlYWxpdHk6JywgQ29uZmlnLm1peGVkUmVhbGl0eS5vYnN0YWNsZXMpO1xuXG4gICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgZ2l2ZW4gbGlzdCBvZiBvYnN0YWNsZXNcbiAgICBjcmVhdGVMaXN0KG9ic3RhY2xlcykge1xuICAgICAgICBPYmplY3QuZW50cmllcyhvYnN0YWNsZXMpLmZvckVhY2goKG9icykgPT4ge1xuICAgICAgICAgICAgaWYgKG9icyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhvYnNbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlKG9ic1sxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIG9ic3RhY2xlXG4gICAgY3JlYXRlKG9ic3RhY2xlKSB7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5jcmVhdGVHZW9tZXRyeShvYnN0YWNsZS5nZW9tZXRyeSk7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5jcmVhdGVNYXRlcmlhbChvYnN0YWNsZS5tYXRlcmlhbCk7XG4gICAgICAgIG1hdGVyaWFsLnVzZXJEYXRhLm9yaWdpbmFsQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHg2NjY2NjYpO1xuICAgICAgICBtYXRlcmlhbC51c2VyRGF0YS5sYWJlbFZpc2liaWxpdHkgPSBDb25maWcuaXNTaG93aW5nTGFibGVzICYmIENvbmZpZy5sYWJlbHNWaXNpYmlsaXR5Lm9ic3RhY2xlcztcbiAgICAgICAgbWF0ZXJpYWwudXNlckRhdGEub3JpZ2luYWxFbW1pc2l2ZSA9IG1hdGVyaWFsLmVtaXNzaXZlLmdldEhleCgpO1xuICAgICAgICBtYXRlcmlhbC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGlkID0gb2JzdGFjbGUuaWQgfHwgMTAwMCArIE1hdGguZmxvb3IoOTAwICogTWF0aC5yYW5kb20oKSk7XG5cbiAgICAgICAgY29uc3QgcmVhbGl0eSA9IG9ic3RhY2xlLnJlYWxpdHkgPT0gdW5kZWZpbmVkID8gJ1YnIDogb2JzdGFjbGUucmVhbGl0eTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHRoZSBuYW1lIGRlZmluZWQgaW4gZW52LmNvbmZpZy5qc29uIGFzIGRpc2N1c3NlZCBvbiAyMDIxLTAyLTE4XG4gICAgICAgIC8vICAgICAgTmVlZCBzb21lIG9ic3RhY2xlIHByb3RvY29sIHJldmlzaW9uICsgc2ltdWxhdG9yIHVwZGF0ZXNcbiAgICAgICAgY29uc3QgbmFtZV90ZW1wID0gJ09ic18nICsgaWQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgOCkgKyAnLi4uJztcblxuICAgICAgICBtZXNoLm5hbWUgPSBPQlNUQUNMRV9QUkVGSVggKyBpZDtcbiAgICAgICAgbWVzaC5yZWFsaXR5ID0gcmVhbGl0eTsgLy8gc2V0IHJlYWxpdHkgZmxhZ1xuXG4gICAgICAgIGlmIChtZXNoLnJlYWxpdHkgPT09ICdWJykge1xuICAgICAgICAgICAgLy8gbWF0ZXJpYWwudmlzaWJsZSA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy52aXJ0dWFsO1xuICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy52aXJ0dWFsID8gMS4wIDogQ29uZmlnLmhpZGRlbk9wYWNpdHk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzaC5yZWFsaXR5ID09PSAnUicpIHtcbiAgICAgICAgICAgIC8vIG1hdGVyaWFsLnZpc2libGUgPSBDb25maWcuc2VsZWN0ZWRSZWFsaXRpZXMucmVhbDtcbiAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBDb25maWcuc2VsZWN0ZWRSZWFsaXRpZXMucmVhbCA/IDEuMCA6IENvbmZpZy5oaWRkZW5PcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIGlmIG9iamVjdCBpcyBhbHJlYWR5IGRlZmluZWRcbiAgICAgICAgdGhpcy5kZWxldGVJZkV4aXN0cyhpZCk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBtZXNoIG9iamVjdCB0byBhcmVuYVxuICAgICAgICB0aGlzLnNjZW5lLmFkZChtZXNoKTtcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3RcbiAgICAgICAgaWYgKG9ic3RhY2xlLnBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gb2JzdGFjbGUucG9zaXRpb247XG4gICAgICAgICAgICBjb25zdCB6ID0gdGhpcy5jYWxjdWxhdGVaKG9ic3RhY2xlKTtcblxuICAgICAgICAgICAgbWVzaC5zY2FsZS5zZXQoc2NlbmVfc2NhbGUsIHNjZW5lX3NjYWxlLCBzY2VuZV9zY2FsZSk7XG4gICAgICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChzY2VuZV9zY2FsZSAqIHgsIHNjZW5lX3NjYWxlICogeSwgc2NlbmVfc2NhbGUgKiB6KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJvdGF0ZSB0aGUgb2JqZWN0LCBhZnRlciB0cmFuc2xhdGUgZGVncmVlcyBpbnRvIHJhZGlhbnNcbiAgICAgICAgaWYgKG9ic3RhY2xlLnJvdGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gb2JzdGFjbGUucm90YXRpb247XG4gICAgICAgICAgICBjb25zdCByYWRYID0gKCg5MCArIHgpIC8gMzYwKSAqIDIgKiBNYXRoLlBJOyAvLyB0cmFuc2Zvcm1hdGlvbiBkdWUgdG8gY29vcmRpbmF0ZSBzeXN0ZW1cbiAgICAgICAgICAgIGNvbnN0IHJhZFkgPSAoeSAvIDM2MCkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgICAgIGNvbnN0IHJhZFogPSAoeiAvIDM2MCkgKiAyICogTWF0aC5QSTtcblxuICAgICAgICAgICAgbWVzaC5yb3RhdGlvbi5zZXQocmFkWCwgcmFkWSwgcmFkWik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHNoYWRvd3Mgb2YgdGhlIG9iamVjdCBpZiBlbmFibGVkXG4gICAgICAgIGlmIChDb25maWcuc2hhZG93LmVuYWJsZWQpIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICAgICAgLy8gQWRkIGxhYmVscyB0byBldmVyeSBvYnN0YWNsZSwgaW1tZWRpYXRlbHkgZGlzcGxheWVkIGlmIGVuYWJsZWRcbiAgICAgICAgYWRkTGFiZWwoT0JTVEFDTEVfUFJFRklYLCB7IGlkOiBvYnN0YWNsZS5pZCwgbmFtZTogbmFtZV90ZW1wIH0sIG1lc2gsIENvbmZpZy5sYWJlbHNWaXNpYmlsaXR5Lm9ic3RhY2xlcyk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0NyZWF0ZWQ+JywgbWVzaC5uYW1lKTtcbiAgICB9XG5cbiAgICBjcmVhdGVHZW9tZXRyeShnKSB7XG4gICAgICAgIGlmIChnLnR5cGUgPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd0eXBlIHVuc3BlY2lmaWVkJyk7XG5cbiAgICAgICAgaWYgKGcudHlwZSA9PSAnQm94R2VvbWV0cnknKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCb3hHZW9tZXRyeShnLndpZHRoLCBnLmhlaWdodCwgZy5kZXB0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZy50eXBlID09ICdDeWxpbmRlckdlb21ldHJ5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ3lsaW5kZXJHZW9tZXRyeShnLnJhZGl1c1RvcCwgZy5yYWRpdXNCb3R0b20sIGcuaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIGlmIChnLnR5cGUgPT0gJ1NwaGVyZUdlb21ldHJ5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU3BoZXJlR2VvbWV0cnkoZy5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUnKTtcbiAgICB9XG5cbiAgICBjcmVhdGVCb3hHZW9tZXRyeSh3aWR0aCwgaGVpZ2h0LCBkZXB0aCkge1xuICAgICAgICBpZiAod2lkdGggPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKCd3aWR0aCB1bnNwZWNpZmllZCcpO1xuICAgICAgICBpZiAoaGVpZ2h0ID09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaGVpZ2h0IHVuc3BlY2lmaWVkJyk7XG4gICAgICAgIGlmIChkZXB0aCA9PSB1bmRlZmluZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlcHRoIHVuc3BlY2lmaWVkJyk7XG5cbiAgICAgICAgLy8gaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vZ2VvbWV0cmllcy9Cb3hHZW9tZXRyeVxuICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkJveEdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDeWxpbmRlckdlb21ldHJ5KHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKHJhZGl1c1RvcCA9PSB1bmRlZmluZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JhZGl1c1RvcCB1bnNwZWNpZmllZCcpO1xuICAgICAgICBpZiAocmFkaXVzQm90dG9tID09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcigncmFkaXVzQm90dG9tIHVuc3BlY2lmaWVkJyk7XG4gICAgICAgIGlmIChoZWlnaHQgPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdoZWlnaHQgdW5zcGVjaWZpZWQnKTtcblxuICAgICAgICAvLyBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9nZW9tZXRyaWVzL0N5bGluZGVyR2VvbWV0cnlcbiAgICAgICAgY29uc3QgaGVpZ2h0U2VnbWVudHMgPSBoZWlnaHRTZWdtZW50cyB8fCAyO1xuICAgICAgICBjb25zdCByYWRpYWxTZWdtZW50cyA9IHJhZGlhbFNlZ21lbnRzIHx8IDE2O1xuXG4gICAgICAgIHJldHVybiBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeShyYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMpO1xuICAgIH1cblxuICAgIGNyZWF0ZVNwaGVyZUdlb21ldHJ5KHJhZGl1cykge1xuICAgICAgICBpZiAocmFkaXVzID09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcigncmFkaXVzIHVuc3BlY2lmaWVkJyk7XG5cbiAgICAgICAgLy8gaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vZ2VvbWV0cmllcy9TcGhlcmVHZW9tZXRyeVxuICAgICAgICBjb25zdCB3aWR0aFNlZ21lbnRzID0gd2lkdGhTZWdtZW50cyB8fCAxNjtcbiAgICAgICAgY29uc3QgaGVpZ2h0U2VnbWVudHMgPSBoZWlnaHRTZWdtZW50cyB8fCAxNjtcbiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShyYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKTtcbiAgICB9XG5cbiAgICBjcmVhdGVNYXRlcmlhbChtKSB7XG4gICAgICAgIGxldCBtYXRlcmlhbDtcbiAgICAgICAgaWYgKG0udHlwZSA9PSAnTWVzaEJhc2ljTWF0ZXJpYWwnKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRlcmlhbHMvTWVzaEJhc2ljTWF0ZXJpYWxcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwobS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChtLnR5cGUgPT0gJ01lc2hOb3JtYWxNYXRlcmlhbCcpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy9hcGkvZW4vbWF0ZXJpYWxzL01lc2hOb3JtYWxNYXRlcmlhbC5odG1sXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbChtLnByb3BlcnRpZXMpO1xuICAgICAgICB9IGVsc2UgaWYgKG0udHlwZSA9PSAnTWVzaFBob25nTWF0ZXJpYWwnKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRlcmlhbHMvTWVzaFBob25nTWF0ZXJpYWxcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwobS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChtLnR5cGUgPT0gJ01lc2hQaHlzaWNhbE1hdGVyaWFsJykge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vbWF0ZXJpYWxzL01lc2hQaHlzaWNhbE1hdGVyaWFsXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKG0ucHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSBpZiAobS50eXBlID09ICdNZXNoU3RhbmRhcmRNYXRlcmlhbCcpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGVyaWFscy9NZXNoU3RhbmRhcmRNYXRlcmlhbFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbChtLnByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlZmF1bHQgbWF0ZXJpYWwgdHlwZVxuICAgICAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKG0ucHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlWihvYnN0YWNsZSkge1xuICAgICAgICAvLyBJZiB6IGlzIHVuZGVmaW5lZCwgcGxhY2UgdGhlIG9iamVjdCBpbiB0b3Agb2YgdGhlIGFyZW5hXG4gICAgICAgIGlmIChvYnN0YWNsZS5wb3NpdGlvbi56ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKG9ic3RhY2xlLmdlb21ldHJ5LmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQm94IGFuZCBDeWxpbmRlciBvYmplY3RzXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic3RhY2xlLmdlb21ldHJ5LmhlaWdodCAvIDI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9ic3RhY2xlLmdlb21ldHJ5LnJhZGl1cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gU3BoZXJlIG9iamVjdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzdGFjbGUuZ2VvbWV0cnkucmFkaXVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ic3RhY2xlLnBvc2l0aW9uLno7XG4gICAgfVxuXG4gICAgZGVsZXRlSWZFeGlzdHMoaWQpIHtcbiAgICAgICAgLy8gRGVsZXRlIG9ic3RhY2xlIGlmIGl0IGFscmVhZHkgZXhpc3RzXG4gICAgICAgIGNvbnN0IG5hbWUgPSBPQlNUQUNMRV9QUkVGSVggKyBpZDtcbiAgICAgICAgY29uc3Qgb2JzdGFjbGUgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZShuYW1lKTtcbiAgICAgICAgaWYgKG9ic3RhY2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKG9ic3RhY2xlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWxldGVkPicsIG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlQWxsKCkge1xuICAgICAgICAvLyBEZWxldGUgYWxsIG9ic3RhY2xlc1xuICAgICAgICBjb25zdCBvYmplY3RzID0gdGhpcy5zY2VuZS5jaGlsZHJlbjtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqZWN0cykuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gb2JqWzFdWyduYW1lJ107XG4gICAgICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKE9CU1RBQ0xFX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRlZD4nLCBuYW1lKTtcbiAgICAgICAgICAgICAgICByZW1vdmVMYWJlbChvYmpbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKG9ialsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIE1haW4gd2ViR0wgcmVuZGVyZXIgY2xhc3NcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSwgY29udGFpbmVyKSB7XG4gICAgICAgIC8vIFByb3BlcnRpZXNcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgICAgICAvLyBDcmVhdGUgV2ViR0wgcmVuZGVyZXIgYW5kIHNldCBpdHMgYW50aWFsaWFzXG4gICAgICAgIHRoaXMudGhyZWVSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgYW50aWFsaWFzOiB0cnVlIH0pO1xuXG4gICAgICAgIC8vIFNldCBjbGVhciBjb2xvciB0byBmb2cgdG8gZW5hYmxlIGZvZyBvciB0byBoZXggY29sb3IgZm9yIG5vIGZvZ1xuICAgICAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihzY2VuZS5mb2cuY29sb3IpO1xuICAgICAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7IC8vIEZvciByZXRpbmFcblxuICAgICAgICAvLyBBcHBlbmRzIGNhbnZhc1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy50aHJlZVJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgICAgIC8vIFNoYWRvdyBtYXAgb3B0aW9uc1xuICAgICAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xuXG4gICAgICAgIC8vIEdldCBhbmlzb3Ryb3B5IGZvciB0ZXh0dXJlc1xuICAgICAgICBDb25maWcubWF4QW5pc290cm9weSA9IHRoaXMudGhyZWVSZW5kZXJlci5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpO1xuXG4gICAgICAgIC8vIEluaXRpYWwgc2l6ZSB1cGRhdGUgc2V0IHRvIGNhbnZhcyBjb250YWluZXJcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG5cbiAgICAgICAgLy8gTGlzdGVuZXJzXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB0aGlzLnVwZGF0ZVNpemUoKSwgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy51cGRhdGVTaXplKCksIGZhbHNlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTaXplKCkge1xuICAgICAgICB0aGlzLnRocmVlUmVuZGVyZXIuc2V0U2l6ZSh0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCwgdGhpcy5jb250YWluZXIub2Zmc2V0SGVpZ2h0KTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NlbmUsIGNhbWVyYSkge1xuICAgICAgICAvLyBSZW5kZXJzIHNjZW5lIHRvIGNhbnZhcyB0YXJnZXRcbiAgICAgICAgdGhpcy50aHJlZVJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgVFdFRU4sIHsgdXBkYXRlIH0gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnO1xuXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL2RhdGEvY29uZmlnJztcbmltcG9ydCB7IGFkZExhYmVsLCByZW1vdmVMYWJlbCB9IGZyb20gJy4vbGFiZWwnO1xuXG52YXIgU1RMTG9hZGVyID0gcmVxdWlyZSgndGhyZWUtc3RsLWxvYWRlcicpKFRIUkVFKTtcblxuY29uc3QgUk9CT1RfUFJFRklYID0gJ1JvYm90Xyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvYm90IHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSb2JvdCBSZWFsaXR5OicsIENvbmZpZy5taXhlZFJlYWxpdHkucm9ib3RzKTtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgY2hlY2sgZm9yIGR1cGxpY2F0ZWQgaW5zdGFuY2VzIG9mIHJvYm90cyBhbmQgZGVsZXRlIHRoZW1cbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IHRydWU7XG4gICAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNyZWF0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2FsbCBwcnVuZScpO1xuICAgICAgICAgICAgICAgIHRoYXQucHJ1bmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMjUwMCk7XG4gICAgfVxuXG4gICAgY2hhbmdlQ29sb3IoaWQsIFIsIEcsIEIsIGFtYmllbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5zY2VuZS5nZXRPYmplY3RCeU5hbWUoUk9CT1RfUFJFRklYICsgaWQpO1xuICAgICAgICBpZiAociAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHIubWF0ZXJpYWwuY29sb3Iuc2V0UkdCKFIgLyAyNTYsIEcgLyAyNTYsIEIgLyAyNjUpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkNvbG9yPiBpZDpcIiwgaWQsIFwiIHwgUjpcIiwgUiwgXCJHOlwiLCBHLCBcIkI6XCIsIEIpO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgY2FsbGJhY2soJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfSBlbHNlIGlmIChjYWxsYmFjayAhPSBudWxsKSBjYWxsYmFjaygndW5kZWZpbmVkJyk7XG5cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgY3JlYXRlKGlkLCB4LCB5LCBoZWFkaW5nLCByZWFsaXR5ID0gJ1YnLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgciA9IHRoaXMuc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKFJPQk9UX1BSRUZJWCArIGlkKTtcbiAgICAgICAgY29uc3QgUkVBTElUWSA9IENvbmZpZy5taXhlZFJlYWxpdHkucm9ib3RzO1xuXG4gICAgICAgIGlmIChyID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIG9ubHkgaWYgbm90IGV4aXN0c1xuXG4gICAgICAgICAgICBpZiAocmVhbGl0eSA9PT0gUkVBTElUWSB8fCBSRUFMSVRZID09PSAnTScpIHtcbiAgICAgICAgICAgICAgICAvLyBDYW4gY3JlYXRlXG4gICAgICAgICAgICAgICAgLy8gTGltaXQgdGhlIGFyZW5hIHRoYXQgcm9ib3QgY2FuIGdvXG4gICAgICAgICAgICAgICAgeCA9IHNjZW5lX3NjYWxlICogTWF0aC5taW4oTWF0aC5tYXgoeCwgQ29uZmlnLmFyZW5hLm1pblgpLCBDb25maWcuYXJlbmEubWF4WCk7XG4gICAgICAgICAgICAgICAgeSA9IHNjZW5lX3NjYWxlICogTWF0aC5taW4oTWF0aC5tYXgoeSwgQ29uZmlnLmFyZW5hLm1pblkpLCBDb25maWcuYXJlbmEubWF4WSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbG9hZGVyID0gbmV3IFNUTExvYWRlcigpO1xuICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKCcuL2Fzc2V0cy9tb2RlbHMvbW9kZWwuc3RsJywgZnVuY3Rpb24gKGdlb21ldHJ5LCBzY2VuZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbGVzcyBvcGFjaXR5IGZvciB2aXJ0dWFsIHJvYm90c1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGFjaXR5ID0gMTsgLy8gcmVhbGl0eSA9PSAnVicgPyAwLjUgOiAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAweDY2NjY2NixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudXNlckRhdGEub3JpZ2luYWxDb2xvciA9IG5ldyBUSFJFRS5Db2xvcigweDY2NjY2Nik7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnVzZXJEYXRhLmxhYmVsVmlzaWJpbGl0eSA9IENvbmZpZy5pc1Nob3dpbmdMYWJsZXMgJiYgQ29uZmlnLmxhYmVsc1Zpc2liaWxpdHkucm9ib3RzO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgci5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgci5yb2JvdElkID0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIHIubmFtZSA9IFJPQk9UX1BSRUZJWCArIGlkO1xuICAgICAgICAgICAgICAgICAgICByLnNjYWxlLnNldChzY2VuZV9zY2FsZSwgc2NlbmVfc2NhbGUsIHNjZW5lX3NjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgci5wb3NpdGlvbi5zZXQoeCwgeSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHIucm90YXRpb24ueCA9IDkwICogVEhSRUUuTWF0aC5ERUcyUkFEO1xuICAgICAgICAgICAgICAgICAgICByLnJvdGF0aW9uLnkgPSAoaGVhZGluZyAtIDkwKSAqIFRIUkVFLk1hdGguREVHMlJBRDtcbiAgICAgICAgICAgICAgICAgICAgci5yZWFsaXR5ID0gcmVhbGl0eTsgLy8gc2V0IHJlYWxpdHkgZmxhZ1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWFsaXR5ID09PSAnVicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGVyaWFsLnZpc2libGUgPSBDb25maWcuc2VsZWN0ZWRSZWFsaXRpZXMudmlydHVhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBDb25maWcuc2VsZWN0ZWRSZWFsaXRpZXMudmlydHVhbCA/IDEuMCA6IENvbmZpZy5oaWRkZW5PcGFjaXR5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlYWxpdHkgPT09ICdSJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0ZXJpYWwudmlzaWJsZSA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy5yZWFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwub3BhY2l0eSA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy5yZWFsID8gMS4wIDogQ29uZmlnLmhpZGRlbk9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgcm9ib3QgdG8gdGhlIHNjZW5lXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY2VuZS5hZGQocik7XG5cbiAgICAgICAgICAgICAgICAgICAgci5jbGlja0V2ZW50ID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdC5hbGVydChtKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbGFiZWxzIHRvIGV2ZXJ5IHJvYm90LCBpbW1lZGlhdGVseSBkaXNwbGF5ZWQgaWYgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICBhZGRMYWJlbChST0JPVF9QUkVGSVgsIHsgaWQsIG5hbWU6IHIubmFtZSB9LCByLCBDb25maWcubGFiZWxzVmlzaWJpbGl0eS5yb2JvdHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDcmVhdGVkPiBSb2JvdDogaWQ6JHtpZH0gfCB4OiR7eH0geTogJHt5fSBoZWFkaW5nOiAke2hlYWRpbmd9IHwgcmVhbGl0eTogJHtyZWFsaXR5fWApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSB1bmRlZmluZWQpIGNhbGxiYWNrKCdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENyZWF0aW9uIEZhaWxlZD4gUm9ib3Q6IGlkOiR7aWR9ICByZWFsaXR5OiAke3JlYWxpdHl9IT0ke1JFQUxJVFl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVhbGl0eSA9PT0gUkVBTElUWSB8fCBSRUFMSVRZID09PSAnTScpIHtcbiAgICAgICAgICAgIC8vIFJlYWxpdHkgbWF0Y2hlc1xuXG4gICAgICAgICAgICB0aGlzLnNldFJlYWxpdHkoaWQsIHJlYWxpdHkpO1xuICAgICAgICAgICAgdGhpcy5tb3ZlKGlkLCB4LCB5LCBoZWFkaW5nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IHVuZGVmaW5lZCkgY2FsbGJhY2soJ2FscmVhZHkgZGVmaW5lZCwgc28gbW92ZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUm9ib3QgcmVhbGl0eSBub3QgbWF0Y2hpbmcgd2l0aCBlbnZpcm9ubWVudCByZWFsaXR5XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShpZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNyZWF0ZWQgPSB0cnVlOyAvLyBhc2tlZCB0byBwcnVuZSBpbiBuZXh0IGN5Y2xlXG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIGRlbGV0ZShpZCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGlkICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZShST0JPVF9QUkVGSVggKyBpZCk7XG5cbiAgICAgICAgICAgIGlmIChyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxhYmVsKHIpO1xuICAgICAgICAgICAgICAgIHNjZW5lLnJlbW92ZShyKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRlZD4gaWQ6JywgaWQpO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSB1bmRlZmluZWQpIGNhbGxiYWNrKCdzdWNjZXNzJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrICE9IHVuZGVmaW5lZCkgY2FsbGJhY2soJ25vdCBmb3VuZCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrICE9IHVuZGVmaW5lZCkgY2FsbGJhY2soJ2lkIG5vdCBzcGVjaWZpZWQnKTtcbiAgICB9XG5cbiAgICBkZWxldGVBbGwoKSB7XG4gICAgICAgIC8vIERlbGV0ZSBhbGwgcm9ib3RzXG4gICAgICAgIGNvbnN0IG9iamVjdHMgPSB0aGlzLnNjZW5lLmNoaWxkcmVuO1xuXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9iamVjdHMpLmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9ialsxXVsnbmFtZSddO1xuXG4gICAgICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKFJPQk9UX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRlZD4nLCBuYW1lKTtcbiAgICAgICAgICAgICAgICByZW1vdmVMYWJlbChvYmpbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKG9ialsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFJlYWxpdHkoaWQsIHJlYWxpdHkpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZShST0JPVF9QUkVGSVggKyBpZCk7XG4gICAgICAgIGlmIChyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgci5yZWFsaXR5ID0gcmVhbGl0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBleGlzdHMoaWQpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnNjZW5lLmdldE9iamVjdEJ5TmFtZShST0JPVF9QUkVGSVggKyBpZCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIG1vdmUoaWQsIHgsIHksIGhlYWRpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5zY2VuZS5nZXRPYmplY3RCeU5hbWUoUk9CT1RfUFJFRklYICsgaWQpO1xuICAgICAgICBpZiAociAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRIZWFkaW5nID0gci5yb3RhdGlvbi55O1xuICAgICAgICAgICAgY29uc3QgbmV3SGVhZGluZyA9IChoZWFkaW5nIC0gOTApICogVEhSRUUuTWF0aC5ERUcyUkFEO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0geyB4OiByLnBvc2l0aW9uLngsIHk6IHIucG9zaXRpb24ueSwgaGVhZGluZzogci5yb3RhdGlvbi55IH07XG5cbiAgICAgICAgICAgIC8vIFRPRE86IG5lZWQgYSBzbW9vdGhlciB3YXkgdGhhbiB0aGlzIHJvdWdoIHRyaWNrXG4gICAgICAgICAgICAvLyBJZiBjdXJyZW50IGFuZCB0YXJnZXQgcm90YXRpb25zIGluIGRpZmZlcmVudCBzaWduc1xuICAgICAgICAgICAgY29uc3Qgcm90YXRpb25GbGFnID0gY3VycmVudEhlYWRpbmcgKiBuZXdIZWFkaW5nID49IDAgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIExpbWl0IHRoZSBhcmVuYSB0aGF0IHJvYm90IGNhbiBnb1xuICAgICAgICAgICAgeCA9IHNjZW5lX3NjYWxlICogTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5yb3VuZCh4ICogMTApIC8gMTAsIENvbmZpZy5hcmVuYS5taW5YKSwgQ29uZmlnLmFyZW5hLm1heFgpO1xuICAgICAgICAgICAgeSA9IHNjZW5lX3NjYWxlICogTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5yb3VuZCh5ICogMTApIC8gMTAsIENvbmZpZy5hcmVuYS5taW5ZKSwgQ29uZmlnLmFyZW5hLm1heFkpO1xuICAgICAgICAgICAgaGVhZGluZyA9IE1hdGgucm91bmQoaGVhZGluZyAqIDEwKSAvIDEwO1xuXG4gICAgICAgICAgICAvLyBjb25zdCBzcGVlZCA9IDEwO1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIHBvc2l0aW9uLngsIDIpICsgTWF0aC5wb3coeSAtIHBvc2l0aW9uLnksIDIpKTtcblxuICAgICAgICAgICAgY29uc3QgbW92ZVRpbWUgPSAxOyAvL2Rpc3RhbmNlIC8gc3BlZWQ7XG4gICAgICAgICAgICAvLyBUT0RPOiBJZiBkaXN0YW5jZSBpcyAwLCBuZWVkIHRvIGhhbmRsZSBvbmx5IHRoZSByb3RhdGlvblxuXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgIT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciB0d2VlbiA9IG5ldyBUV0VFTi5Ud2Vlbihwb3NpdGlvbilcbiAgICAgICAgICAgICAgICAgICAgLnRvKHsgeDogeCwgeTogeSwgaGVhZGluZzogbmV3SGVhZGluZyB9LCAxMDAwICogbW92ZVRpbWUpXG4gICAgICAgICAgICAgICAgICAgIC8qLmVhc2luZyhUV0VFTi5FYXNpbmcuUXVhcnRpYy5Jbk91dCkqL1xuICAgICAgICAgICAgICAgICAgICAub25VcGRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgci5wb3NpdGlvbi54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucG9zaXRpb24ueSA9IHBvc2l0aW9uLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGlvbkZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnJvdGF0aW9uLnkgPSBwb3NpdGlvbi5oZWFkaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGN1cnJlbnRIZWFkaW5nLCBuZXdIZWFkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ29tcGxldGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnTW92ZWQ+IGlkOicsaWQsJ3g6Jyx4LCd5OicseSwnaGVhZGluZzonLGhlYWRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgci5yb3RhdGlvbi55ID0gcG9zaXRpb24uaGVhZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSBjYWxsYmFjaygnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZGVsYXkoNTApXG4gICAgICAgICAgICAgICAgICAgIC5zdGFydCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBObyBtb3ZlLCBvbmx5IHRoZSByb3RhdGlvblxuICAgICAgICAgICAgICAgIHIucm90YXRpb24ueSA9IG5ld0hlYWRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgY2FsbGJhY2soJ3VuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIGdldF9jb29yZGluYXRlcyhpZCkge1xuICAgICAgICB2YXIgciA9IHRoaXMuc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKFJPQk9UX1BSRUZJWCArIGlkKTtcbiAgICAgICAgaWYgKHIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHtyLnBvc2l0aW9uLnh9LCR7ci5wb3NpdGlvbi55fSwke3IucG9zaXRpb24uen1gKTtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgVFdFRU4udXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdFNuYXBzaG90KG1lc2gpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcSA9IHdpbmRvdy5tcXR0LnB1Ymxpc2goXG4gICAgICAgICAgICAgICAgd2luZG93LmNoYW5uZWwgKyAnL21ndC9yb2JvdHMvc25hcHNob3QnLFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHsgaWQ6IG1lc2gucm9ib3RJZCB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc29sdmUoIXJlcSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFsZXJ0KG1lc2gpIHtcbiAgICAgICAgLy8gRGlzcGxheSBhbiBhbGVydCBvbiB3aW5kb3dcbiAgICAgICAgY29uc3QgZGlzcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtc2ctYm94Jyk7XG4gICAgICAgIGNvbnN0IHByZXZDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21zZy1jb250ZW50Jyk7XG4gICAgICAgIGxldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdpZCcsICdtc2ctY29udGVudCcpO1xuICAgICAgICBsZXQgbm9kZUNvbnRlbnQ7XG4gICAgICAgIGlmIChDb25maWcuaXNTaG93aW5nUm9ib3RTbmFwc2hvdHMpIHtcbiAgICAgICAgICAgIG5vZGVDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCR7bWVzaC5uYW1lfSBTbmFwc2hvdCBMb2FkaW5nLi4uYCk7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RTbmFwc2hvdChtZXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVDb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCR7bWVzaC5uYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZUNvbnRlbnQpO1xuICAgICAgICBkaXNwLnJlcGxhY2VDaGlsZChjb250ZW50LCBwcmV2Q29udGVudCk7XG4gICAgICAgIGRpc3Auc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGlzcC5zdHlsZS5vcGFjaXR5ID0gJzEuMCc7XG4gICAgICAgICAgICBkaXNwLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0sIDEwMDAwKTtcbiAgICB9XG5cbiAgICBwcnVuZSgpIHtcbiAgICAgICAgLy8gRGVsZXRlIGFsbCBkdXBsaWNhdGUgcm9ib3RzXG4gICAgICAgIGNvbnN0IG9iamVjdHMgPSB0aGlzLnNjZW5lLmNoaWxkcmVuO1xuICAgICAgICBsZXQgdmFsaWQgPSBbXTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqZWN0cykuZm9yRWFjaCgob2JqKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gb2JqWzFdWyduYW1lJ107XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tpbmc6ICcsIG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKFJPQk9UX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsaWRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIHZhbGlkXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkW25hbWVdID0gJ3ZhbGlkJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgZHVwbGljYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG9ialsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUxhYmVsKG9ialsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUucmVtb3ZlKG9ialsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5hbWUsICc6IGR1cGxpY2F0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgVmVydGV4Tm9ybWFsc0hlbHBlciB9IGZyb20gJy4vdmVydGV4Tm9ybWFsc0hlbHBlcic7XG5cbi8vIFNpbXBsZSBtZXNoIGhlbHBlciB0aGF0IHNob3dzIGVkZ2VzLCB3aXJlZnJhbWVzLCBhbmQgZmFjZSBhbmQgdmVydGV4IG5vcm1hbHNcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc2hIZWxwZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCBtZXNoKSB7XG4gICAgICAgIHRoaXMubWVzaCA9IG1lc2g7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcblxuICAgICAgICBjb25zdCB3aXJlZnJhbWUgPSBuZXcgVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkodGhpcy5tZXNoLmdlb21ldHJ5KTtcbiAgICAgICAgdGhpcy53aXJlTGluZSA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMod2lyZWZyYW1lKTtcbiAgICAgICAgdGhpcy53aXJlTGluZS5tYXRlcmlhbC5kZXB0aFRlc3QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aXJlTGluZS5tYXRlcmlhbC5vcGFjaXR5ID0gMC4yNTtcbiAgICAgICAgdGhpcy53aXJlTGluZS5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgZWRnZXMgPSBuZXcgVEhSRUUuRWRnZXNHZW9tZXRyeSh0aGlzLm1lc2guZ2VvbWV0cnkpO1xuICAgICAgICB0aGlzLmVkZ2VzTGluZSA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoZWRnZXMpO1xuICAgICAgICB0aGlzLmVkZ2VzTGluZS5tYXRlcmlhbC5kZXB0aFRlc3QgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lZGdlc0xpbmUubWF0ZXJpYWwub3BhY2l0eSA9IDAuMjU7XG4gICAgICAgIHRoaXMuZWRnZXNMaW5lLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLnZlcnRleEhlbHBlciA9IG5ldyBWZXJ0ZXhOb3JtYWxzSGVscGVyKHRoaXMubWVzaCwgMik7XG4gICAgICAgIHRoaXMuYm94SGVscGVyID0gbmV3IFRIUkVFLkJveEhlbHBlcih0aGlzLm1lc2gpO1xuICAgIH1cblxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5tZXNoLmFkZCh0aGlzLndpcmVMaW5lKTtcbiAgICAgICAgdGhpcy5tZXNoLmFkZCh0aGlzLmVkZ2VzTGluZSk7XG5cbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy52ZXJ0ZXhIZWxwZXIpO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmJveEhlbHBlcik7XG4gICAgfVxuXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5tZXNoLnJlbW92ZSh0aGlzLndpcmVMaW5lKTtcbiAgICAgICAgdGhpcy5tZXNoLnJlbW92ZSh0aGlzLmVkZ2VzTGluZSk7XG5cbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy52ZXJ0ZXhIZWxwZXIpO1xuICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLmJveEhlbHBlcik7XG4gICAgfVxufVxuIiwiZnVuY3Rpb24gZ2V0VXJsVmFycygpIHtcclxuICAgIHZhciB2YXJzID0ge307XHJcbiAgICB2YXIgcGFydHMgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC9bPyZdKyhbXj0mXSspPShbXiZdKikvZ2ksIGZ1bmN0aW9uIChtLCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyc1trZXldID0gdmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB2YXJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRVcmxQYXJhbShwYXJhbWV0ZXIsIGRlZmF1bHR2YWx1ZSkge1xyXG4gICAgdmFyIHVybHBhcmFtZXRlciA9IGRlZmF1bHR2YWx1ZTtcclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKHBhcmFtZXRlcikgPiAtMSkge1xyXG4gICAgICAgIHVybHBhcmFtZXRlciA9IGdldFVybFZhcnMoKVtwYXJhbWV0ZXJdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybHBhcmFtZXRlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKCkge1xyXG4gICAgLy8gVE9ETzogQWRkIGNoYW5uZWwsIGhvc3QgYW5kIHBvcnQgaW50byBVUkwgKGFzIG9wdGlvbmFsIHBhcmFtZXRlcnMpXHJcbiAgICAvLyBTdWdnZXN0aW9uOiBVc2UgSldUIGluc3RlZCBvZiBleHBvc2VkIGNyZWRlbnRpYWxzXHJcbiAgICAvLyBTaW11bGF0b3Igc2VydmVyIGNhbiBwcm92aWRlIHRoZSBKV1QgdG9rZW5cclxuICAgIGNvbnN0IHN0b3JlZENyZWRlbnRpYWxzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BlcmEtc3dhcm0tY3JlZGVudGlhbHMnKTtcclxuICAgIGNvbnN0IGtleSA9IGdldFVybFBhcmFtKCdrZXknLCBmYWxzZSk7XHJcblxyXG4gICAgY29uc3QgdXNlcm5hbWUgPSBnZXRVcmxQYXJhbSgndXNlcm5hbWUnLCBmYWxzZSk7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9IGdldFVybFBhcmFtKCdwYXNzd29yZCcsIGZhbHNlKTtcclxuICAgIGNvbnN0IGNoYW5uZWwgPSBnZXRVcmxQYXJhbSgnY2hhbm5lbCcsIGZhbHNlKTtcclxuICAgIGNvbnN0IHBvcnQgPSBnZXRVcmxQYXJhbSgncG9ydCcsIGZhbHNlKTtcclxuICAgIGNvbnN0IHNlcnZlciA9IGdldFVybFBhcmFtKCdzZXJ2ZXInLCBmYWxzZSk7XHJcbiAgICBjbGVhclBhcmFtcygpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZXJ2ZXIgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwZXJhLXN3YXJtLXNlcnZlcicsIHNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFubmVsICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVyYS1zd2FybS1jaGFubmVsJywgY2hhbm5lbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb3J0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVyYS1zd2FybS1wb3J0JywgcG9ydCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXkgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwZXJhLXN3YXJtLWtleScsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgMjAwMCk7XHJcblxyXG4gICAgLy8gTG9hZCB0aGUgY3JlZGVudGFpbHNcclxuICAgIGlmIChrZXkgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gSGF2aW5nIEpXVCBUb2tlblxyXG4gICAgICAgIC8vIFRPRE86IG1hbmFnZSB0b2tlbiBleHBpcmluZ1xyXG5cclxuICAgICAgICAvLyBEZWZhdWx0OiBleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpTVXpJMU5pSjkuZXlKamNtVmhkR1ZrUVhRaU9pSXlNREl4TFRBMExURTFJREV5T2pVME9qSTBJaXdpWlhod2FYSmxaRUYwSWpvaU1qQXlNUzB3TkMweE5TQXdNVG8xTkRveU5DSXNJbWh2YzNRaU9pSjNaV0p6WlhKMmFXTmxjeTVqWlhscmIyUXVZMjl0SWl3aWNHOXlkQ0k2T0RnNE15d2ljR0YwYUNJNklsd3ZiWEYwZENJc0ltTm9ZVzV1Wld3aU9pSjJNU0lzSW5WelpYSWlPaUp6ZDJGeWJWOTFjMlZ5SWl3aWNHRnpjeUk2SW5OM1lYSnRYM1Z6WlhKbE1UVWlmUS5GMWpxSHl1MWpFMHpUYTAzeVlUd3dkeThBSm9mQkxYV0x2WU1ZTE5sbmE2ZFVqVGt6NldkdHdqQmNyRl96REFSTTk1cjY3UnlrT2lXSkNIRGlXTTUyTVFGeDNFaXZxVFlVTm5BNWZ5TmZzZEpnckJSMHE3ZUVTTTI4TVRTRm94blZpN21lbUlLQ1Nua2p1M3FEUlp1WlpkQjVqYUxQMkJZZzdpcGdFRnp0N0VcclxuICAgICAgICBjb25zb2xlLmxvZygnQ3JlZGVudGFpbHM6IExvYWRlZCBmcm9tIEpXVCcpO1xyXG5cclxuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IHBhcnNlSnd0KGtleSk7XHJcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBjcmVkZW50aWFscy51c2VyO1xyXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gY3JlZGVudGlhbHMucGFzcztcclxuICAgICAgICBjb25zdCBjaGFubmVsID0gY3JlZGVudGlhbHMuY2hhbm5lbDtcclxuXHJcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLmhvc3QgIT09IHVuZGVmaW5lZCkgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BlcmEtc3dhcm0tc2VydmVyJywgY3JlZGVudGlhbHMuaG9zdCk7XHJcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLnBvcnQgIT09IHVuZGVmaW5lZCkgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BlcmEtc3dhcm0tcG9ydCcsIHBhcnNlSW50KGNyZWRlbnRpYWxzLnBvcnQpKTtcclxuICAgICAgICBpZiAoY3JlZGVudGlhbHMucGF0aCAhPT0gdW5kZWZpbmVkKSBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVyYS1zd2FybS1wYXRoJywgY3JlZGVudGlhbHMucGF0aCk7XHJcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzLmNoYW5uZWwgIT09IHVuZGVmaW5lZCkgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BlcmEtc3dhcm0tY2hhbm5lbCcsIGNyZWRlbnRpYWxzLmNoYW5uZWwpO1xyXG5cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVyYS1zd2FybS1jcmVkZW50aWFscycsIEpTT04uc3RyaW5naWZ5KHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBjaGFubmVsIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkLFxyXG4gICAgICAgICAgICBjaGFubmVsXHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSBpZiAodXNlcm5hbWUgIT09IGZhbHNlICYmIHBhc3N3b3JkICE9PSBmYWxzZSkge1xyXG4gICAgICAgIC8vIEhhdmluZyBVUkwgcGFyYW1ldGVyc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdDcmVkZW50YWlsczogTG9hZGVkIGZyb20gVVJMIHBhcmFtZXRlcnMnKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVyYS1zd2FybS1jcmVkZW50aWFscycsIEpTT04uc3RyaW5naWZ5KHsgdXNlcm5hbWUsIHBhc3N3b3JkLCBjaGFubmVsIH0pKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VybmFtZSxcclxuICAgICAgICAgICAgcGFzc3dvcmQsXHJcbiAgICAgICAgICAgIGNoYW5uZWxcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmICh1c2VybmFtZSA9PT0gZmFsc2UgJiYgcGFzc3dvcmQgPT09IGZhbHNlICYmIHN0b3JlZENyZWRlbnRpYWxzICE9PSBudWxsKSB7XHJcbiAgICAgICAgLy8gSGF2aW5nIHN0b3JlZCBjcmVkZW50aWFsc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdDcmVkZW50YWlsczogTG9hZGVkIGZyb20gbG9jYWwgc3RvcmFnZScpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0b3JlZENyZWRlbnRpYWxzKTtcclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VKd3QodG9rZW4pIHtcclxuICAgIHZhciBiYXNlNjRVcmwgPSB0b2tlbi5zcGxpdCgnLicpWzFdO1xyXG4gICAgdmFyIGJhc2U2NCA9IGJhc2U2NFVybC5yZXBsYWNlKC8tL2csICcrJykucmVwbGFjZSgvXy9nLCAnLycpO1xyXG4gICAgdmFyIGpzb25QYXlsb2FkID0gZGVjb2RlVVJJQ29tcG9uZW50KFxyXG4gICAgICAgIGF0b2IoYmFzZTY0KVxyXG4gICAgICAgICAgICAuc3BsaXQoJycpXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJScgKyAoJzAwJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmpvaW4oJycpXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25QYXlsb2FkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJQYXJhbXMoKSB7XHJcbiAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxuICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIHBhdGgpO1xyXG59XHJcbiIsIi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5LCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBMaW5lU2VnbWVudHMsIExpbmVCYXNpY01hdGVyaWFsLCBNYXRyaXgzLCBWZWN0b3IzIH0gZnJvbSAndGhyZWUnO1xuXG5jb25zdCBfdjEgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuY29uc3QgX2tleXMgPSBbJ2EnLCAnYicsICdjJ107XG5cbmZ1bmN0aW9uIFZlcnRleE5vcm1hbHNIZWxwZXIob2JqZWN0LCBzaXplLCBoZXgpIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLnNpemUgPSBzaXplICE9PSB1bmRlZmluZWQgPyBzaXplIDogMC4xO1xuXG4gICAgY29uc3QgY29sb3IgPSBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmYwMDAwO1xuXG4gICAgLy9cblxuICAgIGxldCBuTm9ybWFscyA9IDA7XG5cbiAgICBjb25zdCBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG4gICAgaWYgKG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcbiAgICAgICAgbk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGggKiAzO1xuICAgIH0gZWxzZSBpZiAob2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xuICAgICAgICBuTm9ybWFscyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsLmNvdW50O1xuICAgIH1cblxuICAgIC8vXG5cbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5Ob3JtYWxzICogMiAqIDMsIDMpO1xuXG4gICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIHBvc2l0aW9ucyk7XG5cbiAgICBMaW5lU2VnbWVudHMuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9KSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnVmVydGV4Tm9ybWFsc0hlbHBlcic7XG5cbiAgICAvL1xuXG4gICAgdGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cbiAgICB0aGlzLnVwZGF0ZSgpO1xufVxuXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7XG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZlcnRleE5vcm1hbHNIZWxwZXI7XG5cblZlcnRleE5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaWR4O1xuICAgIHRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xuXG4gICAgX25vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO1xuXG4gICAgY29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuICAgIC8vXG5cbiAgICBjb25zdCBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xuXG4gICAgaWYgKG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcbiAgICAgICAgY29uc3QgdmVydGljZXMgPSBvYmpHZW9tZXRyeS52ZXJ0aWNlcztcblxuICAgICAgICBjb25zdCBmYWNlcyA9IG9iakdlb21ldHJ5LmZhY2VzO1xuXG4gICAgICAgIGlkeCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGZhY2UgPSBmYWNlc1tpXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0ZXggPSB2ZXJ0aWNlc1tmYWNlW19rZXlzW2pdXV07XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzW2pdO1xuXG4gICAgICAgICAgICAgICAgX3YxLmNvcHkodmVydGV4KS5hcHBseU1hdHJpeDQobWF0cml4V29ybGQpO1xuICAgICAgICAgICAgICAgIF92Mi5jb3B5KG5vcm1hbCkuYXBwbHlNYXRyaXgzKF9ub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSkuYWRkKF92MSk7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjEueCwgX3YxLnksIF92MS56KTtcblxuICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDE7XG5cbiAgICAgICAgICAgICAgICBwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjIueCwgX3YyLnksIF92Mi56KTtcblxuICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iakdlb21ldHJ5ICYmIG9iakdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpIHtcbiAgICAgICAgY29uc3Qgb2JqUG9zID0gb2JqR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICAgICAgY29uc3Qgb2JqTm9ybSA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuXG4gICAgICAgIGlkeCA9IDA7XG5cbiAgICAgICAgLy8gZm9yIHNpbXBsaWNpdHksIGlnbm9yZSBpbmRleCBhbmQgZHJhd2NhbGxzLCBhbmQgcmVuZGVyIGV2ZXJ5IG5vcm1hbFxuXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IG9ialBvcy5jb3VudDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICAgIF92MS5zZXQob2JqUG9zLmdldFgoaiksIG9ialBvcy5nZXRZKGopLCBvYmpQb3MuZ2V0WihqKSkuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkKTtcbiAgICAgICAgICAgIF92Mi5zZXQob2JqTm9ybS5nZXRYKGopLCBvYmpOb3JtLmdldFkoaiksIG9iak5vcm0uZ2V0WihqKSk7XG4gICAgICAgICAgICBfdjIuYXBwbHlNYXRyaXgzKF9ub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSkuYWRkKF92MSk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnNldFhZWihpZHgsIF92MS54LCBfdjEueSwgX3YxLnopO1xuXG4gICAgICAgICAgICBpZHggPSBpZHggKyAxO1xuXG4gICAgICAgICAgICBwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjIueCwgX3YyLnksIF92Mi56KTtcblxuICAgICAgICAgICAgaWR4ID0gaWR4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCB7IFZlcnRleE5vcm1hbHNIZWxwZXIgfTtcbiIsIi8qKlxuICogQGF1dGhvciBSaWNoIFRpYmJldHQgLyBodHRwczovL2dpdGh1Yi5jb20vcmljaHRyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBUb255IFBhcmlzaSAvIGh0dHA6Ly93d3cudG9ueXBhcmlzaS5jb20vXG4gKiBAYXV0aG9yIFRha2FoaXJvIC8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICogQGF1dGhvciBEb24gTWNDdXJkeSAvIGh0dHBzOi8vd3d3LmRvbm1jY3VyZHkuY29tXG4gKi9cblxuaW1wb3J0IHtcbiAgICBBbmltYXRpb25DbGlwLFxuICAgIEJvbmUsXG4gICAgQm94MyxcbiAgICBCdWZmZXJBdHRyaWJ1dGUsXG4gICAgQnVmZmVyR2VvbWV0cnksXG4gICAgQ2xhbXBUb0VkZ2VXcmFwcGluZyxcbiAgICBDb2xvcixcbiAgICBEaXJlY3Rpb25hbExpZ2h0LFxuICAgIERvdWJsZVNpZGUsXG4gICAgRmlsZUxvYWRlcixcbiAgICBGcm9udFNpZGUsXG4gICAgR3JvdXAsXG4gICAgSW50ZXJsZWF2ZWRCdWZmZXIsXG4gICAgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsXG4gICAgSW50ZXJwb2xhbnQsXG4gICAgSW50ZXJwb2xhdGVEaXNjcmV0ZSxcbiAgICBJbnRlcnBvbGF0ZUxpbmVhcixcbiAgICBMaW5lLFxuICAgIExpbmVCYXNpY01hdGVyaWFsLFxuICAgIExpbmVMb29wLFxuICAgIExpbmVTZWdtZW50cyxcbiAgICBMaW5lYXJGaWx0ZXIsXG4gICAgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuICAgIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsXG4gICAgTG9hZGVyLFxuICAgIExvYWRlclV0aWxzLFxuICAgIE1hdGVyaWFsLFxuICAgIE1hdGhVdGlscyxcbiAgICBNYXRyaXg0LFxuICAgIE1lc2gsXG4gICAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gICAgTWVzaFBoeXNpY2FsTWF0ZXJpYWwsXG4gICAgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG4gICAgTWlycm9yZWRSZXBlYXRXcmFwcGluZyxcbiAgICBOZWFyZXN0RmlsdGVyLFxuICAgIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG4gICAgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG4gICAgTnVtYmVyS2V5ZnJhbWVUcmFjayxcbiAgICBPYmplY3QzRCxcbiAgICBPcnRob2dyYXBoaWNDYW1lcmEsXG4gICAgUGVyc3BlY3RpdmVDYW1lcmEsXG4gICAgUG9pbnRMaWdodCxcbiAgICBQb2ludHMsXG4gICAgUG9pbnRzTWF0ZXJpYWwsXG4gICAgUHJvcGVydHlCaW5kaW5nLFxuICAgIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLFxuICAgIFJHQkFGb3JtYXQsXG4gICAgUkdCRm9ybWF0LFxuICAgIFJlcGVhdFdyYXBwaW5nLFxuICAgIFNrZWxldG9uLFxuICAgIFNraW5uZWRNZXNoLFxuICAgIFNwaGVyZSxcbiAgICBTcG90TGlnaHQsXG4gICAgVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICAgIFRleHR1cmVMb2FkZXIsXG4gICAgVHJpYW5nbGVGYW5EcmF3TW9kZSxcbiAgICBUcmlhbmdsZVN0cmlwRHJhd01vZGUsXG4gICAgVmVjdG9yMixcbiAgICBWZWN0b3IzLFxuICAgIFZlY3RvcktleWZyYW1lVHJhY2ssXG4gICAgc1JHQkVuY29kaW5nXG59IGZyb20gJ3RocmVlJztcblxuY29uc3QgR0xURkxvYWRlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR0xURkxvYWRlcihtYW5hZ2VyKSB7XG4gICAgICAgIExvYWRlci5jYWxsKHRoaXMsIG1hbmFnZXIpO1xuXG4gICAgICAgIHRoaXMuZHJhY29Mb2FkZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmRkc0xvYWRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgR0xURkxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcbiAgICAgICAgY29uc3RydWN0b3I6IEdMVEZMb2FkZXIsXG5cbiAgICAgICAgbG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgcmVzb3VyY2VQYXRoO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yZXNvdXJjZVBhdGggIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VQYXRoID0gdGhpcy5yZXNvdXJjZVBhdGg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGF0aCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZVBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc291cmNlUGF0aCA9IExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKHVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRlbGxzIHRoZSBMb2FkaW5nTWFuYWdlciB0byB0cmFjayBhbiBleHRyYSBpdGVtLCB3aGljaCByZXNvbHZlcyBhZnRlclxuICAgICAgICAgICAgLy8gdGhlIG1vZGVsIGlzIGZ1bGx5IGxvYWRlZC4gVGhpcyBtZWFucyB0aGUgY291bnQgb2YgaXRlbXMgbG9hZGVkIHdpbGxcbiAgICAgICAgICAgIC8vIGJlIGluY29ycmVjdCwgYnV0IGVuc3VyZXMgbWFuYWdlci5vbkxvYWQoKSBkb2VzIG5vdCBmaXJlIGVhcmx5LlxuICAgICAgICAgICAgc2NvcGUubWFuYWdlci5pdGVtU3RhcnQodXJsKTtcblxuICAgICAgICAgICAgdmFyIF9vbkVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUubWFuYWdlci5pdGVtRXJyb3IodXJsKTtcbiAgICAgICAgICAgICAgICBzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlcihzY29wZS5tYW5hZ2VyKTtcblxuICAgICAgICAgICAgbG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcbiAgICAgICAgICAgIGxvYWRlci5zZXRSZXNwb25zZVR5cGUoJ2FycmF5YnVmZmVyJyk7XG5cbiAgICAgICAgICAgIGlmIChzY29wZS5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycpIHtcbiAgICAgICAgICAgICAgICBsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2FkZXIubG9hZChcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VQYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChnbHRmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTG9hZChnbHRmKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vbkVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfb25FcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBfb25FcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXREUkFDT0xvYWRlcjogZnVuY3Rpb24gKGRyYWNvTG9hZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWNvTG9hZGVyID0gZHJhY29Mb2FkZXI7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRERFNMb2FkZXI6IGZ1bmN0aW9uIChkZHNMb2FkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGRzTG9hZGVyID0gZGRzTG9hZGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChkYXRhLCBwYXRoLCBvbkxvYWQsIG9uRXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBjb250ZW50O1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB7fTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFnaWMgPSBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KG5ldyBVaW50OEFycmF5KGRhdGEsIDAsIDQpKTtcblxuICAgICAgICAgICAgICAgIGlmIChtYWdpYyA9PT0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEZdID0gbmV3IEdMVEZCaW5hcnlFeHRlbnNpb24oZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25FcnJvcikgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURl0uY29udGVudDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dChuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoY29udGVudCk7XG5cbiAgICAgICAgICAgIGlmIChqc29uLmFzc2V0ID09PSB1bmRlZmluZWQgfHwganNvbi5hc3NldC52ZXJzaW9uWzBdIDwgMikge1xuICAgICAgICAgICAgICAgIGlmIChvbkVycm9yKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgYXNzZXQuIGdsVEYgdmVyc2lvbnMgPj0yLjAgYXJlIHN1cHBvcnRlZC4nKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoanNvbi5leHRlbnNpb25zVXNlZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbi5leHRlbnNpb25zVXNlZC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ZW5zaW9uTmFtZSA9IGpzb24uZXh0ZW5zaW9uc1VzZWRbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb25zUmVxdWlyZWQgPSBqc29uLmV4dGVuc2lvbnNSZXF1aXJlZCB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV4dGVuc2lvbk5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURkxpZ2h0c0V4dGVuc2lvbihqc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfQ0xFQVJDT0FUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURk1hdGVyaWFsc0NsZWFyY29hdEV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19VTkxJVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gbmV3IEdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gbmV3IEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0ZW5zaW9uTmFtZV0gPSBuZXcgR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKGpzb24sIHRoaXMuZHJhY29Mb2FkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gbmV3IEdMVEZUZXh0dXJlRERTRXh0ZW5zaW9uKHRoaXMuZGRzTG9hZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zW2V4dGVuc2lvbk5hbWVdID0gbmV3IEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRVhURU5TSU9OUy5LSFJfTUVTSF9RVUFOVElaQVRJT046XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXSA9IG5ldyBHTFRGTWVzaFF1YW50aXphdGlvbkV4dGVuc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlbnNpb25zUmVxdWlyZWQuaW5kZXhPZihleHRlbnNpb25OYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVEhSRUUuR0xURkxvYWRlcjogVW5rbm93biBleHRlbnNpb24gXCInICsgZXh0ZW5zaW9uTmFtZSArICdcIi4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBuZXcgR0xURlBhcnNlcihqc29uLCBleHRlbnNpb25zLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCB8fCB0aGlzLnJlc291cmNlUGF0aCB8fCAnJyxcbiAgICAgICAgICAgICAgICBjcm9zc09yaWdpbjogdGhpcy5jcm9zc09yaWdpbixcbiAgICAgICAgICAgICAgICBtYW5hZ2VyOiB0aGlzLm1hbmFnZXJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwYXJzZXIucGFyc2Uob25Mb2FkLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogR0xURlJFR0lTVFJZICovXG5cbiAgICBmdW5jdGlvbiBHTFRGUmVnaXN0cnkoKSB7XG4gICAgICAgIHZhciBvYmplY3RzID0ge307XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RzW2tleV07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChrZXksIG9iamVjdCkge1xuICAgICAgICAgICAgICAgIG9iamVjdHNba2V5XSA9IG9iamVjdDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RzW2tleV07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBvYmplY3RzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKioqKioqKioqKiBFWFRFTlNJT05TICoqKioqKioqKioqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICB2YXIgRVhURU5TSU9OUyA9IHtcbiAgICAgICAgS0hSX0JJTkFSWV9HTFRGOiAnS0hSX2JpbmFyeV9nbFRGJyxcbiAgICAgICAgS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT046ICdLSFJfZHJhY29fbWVzaF9jb21wcmVzc2lvbicsXG4gICAgICAgIEtIUl9MSUdIVFNfUFVOQ1RVQUw6ICdLSFJfbGlnaHRzX3B1bmN0dWFsJyxcbiAgICAgICAgS0hSX01BVEVSSUFMU19DTEVBUkNPQVQ6ICdLSFJfbWF0ZXJpYWxzX2NsZWFyY29hdCcsXG4gICAgICAgIEtIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1M6ICdLSFJfbWF0ZXJpYWxzX3BiclNwZWN1bGFyR2xvc3NpbmVzcycsXG4gICAgICAgIEtIUl9NQVRFUklBTFNfVU5MSVQ6ICdLSFJfbWF0ZXJpYWxzX3VubGl0JyxcbiAgICAgICAgS0hSX1RFWFRVUkVfVFJBTlNGT1JNOiAnS0hSX3RleHR1cmVfdHJhbnNmb3JtJyxcbiAgICAgICAgS0hSX01FU0hfUVVBTlRJWkFUSU9OOiAnS0hSX21lc2hfcXVhbnRpemF0aW9uJyxcbiAgICAgICAgTVNGVF9URVhUVVJFX0REUzogJ01TRlRfdGV4dHVyZV9kZHMnXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEREUyBUZXh0dXJlIEV4dGVuc2lvblxuICAgICAqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL1ZlbmRvci9NU0ZUX3RleHR1cmVfZGRzXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBHTFRGVGV4dHVyZUREU0V4dGVuc2lvbihkZHNMb2FkZXIpIHtcbiAgICAgICAgaWYgKCFkZHNMb2FkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogQXR0ZW1wdGluZyB0byBsb2FkIC5kZHMgdGV4dHVyZSB3aXRob3V0IGltcG9ydGluZyBERFNMb2FkZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUztcbiAgICAgICAgdGhpcy5kZHNMb2FkZXIgPSBkZHNMb2FkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVuY3R1YWwgTGlnaHRzIEV4dGVuc2lvblxuICAgICAqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX2xpZ2h0c19wdW5jdHVhbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEdMVEZMaWdodHNFeHRlbnNpb24oanNvbikge1xuICAgICAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUw7XG5cbiAgICAgICAgdmFyIGV4dGVuc2lvbiA9IChqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0pIHx8IHt9O1xuICAgICAgICB0aGlzLmxpZ2h0RGVmcyA9IGV4dGVuc2lvbi5saWdodHMgfHwgW107XG4gICAgfVxuXG4gICAgR0xURkxpZ2h0c0V4dGVuc2lvbi5wcm90b3R5cGUubG9hZExpZ2h0ID0gZnVuY3Rpb24gKGxpZ2h0SW5kZXgpIHtcbiAgICAgICAgdmFyIGxpZ2h0RGVmID0gdGhpcy5saWdodERlZnNbbGlnaHRJbmRleF07XG4gICAgICAgIHZhciBsaWdodE5vZGU7XG5cbiAgICAgICAgdmFyIGNvbG9yID0gbmV3IENvbG9yKDB4ZmZmZmZmKTtcbiAgICAgICAgaWYgKGxpZ2h0RGVmLmNvbG9yICE9PSB1bmRlZmluZWQpIGNvbG9yLmZyb21BcnJheShsaWdodERlZi5jb2xvcik7XG5cbiAgICAgICAgdmFyIHJhbmdlID0gbGlnaHREZWYucmFuZ2UgIT09IHVuZGVmaW5lZCA/IGxpZ2h0RGVmLnJhbmdlIDogMDtcblxuICAgICAgICBzd2l0Y2ggKGxpZ2h0RGVmLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGlvbmFsJzpcbiAgICAgICAgICAgICAgICBsaWdodE5vZGUgPSBuZXcgRGlyZWN0aW9uYWxMaWdodChjb2xvcik7XG4gICAgICAgICAgICAgICAgbGlnaHROb2RlLnRhcmdldC5wb3NpdGlvbi5zZXQoMCwgMCwgLTEpO1xuICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5hZGQobGlnaHROb2RlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgICBsaWdodE5vZGUgPSBuZXcgUG9pbnRMaWdodChjb2xvcik7XG4gICAgICAgICAgICAgICAgbGlnaHROb2RlLmRpc3RhbmNlID0gcmFuZ2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3Nwb3QnOlxuICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBTcG90TGlnaHQoY29sb3IpO1xuICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBzcG90bGlnaHQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgICBsaWdodERlZi5zcG90ID0gbGlnaHREZWYuc3BvdCB8fCB7fTtcbiAgICAgICAgICAgICAgICBsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlID1cbiAgICAgICAgICAgICAgICAgICAgbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAhPT0gdW5kZWZpbmVkID8gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSA6IDA7XG4gICAgICAgICAgICAgICAgbGlnaHREZWYuc3BvdC5vdXRlckNvbmVBbmdsZSA9XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgIT09IHVuZGVmaW5lZCA/IGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgOiBNYXRoLlBJIC8gNC4wO1xuICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5hbmdsZSA9IGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGU7XG4gICAgICAgICAgICAgICAgbGlnaHROb2RlLnBlbnVtYnJhID0gMS4wIC0gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAvIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGU7XG4gICAgICAgICAgICAgICAgbGlnaHROb2RlLnRhcmdldC5wb3NpdGlvbi5zZXQoMCwgMCwgLTEpO1xuICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5hZGQobGlnaHROb2RlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBVbmV4cGVjdGVkIGxpZ2h0IHR5cGUsIFwiJyArIGxpZ2h0RGVmLnR5cGUgKyAnXCIuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21lIGxpZ2h0cyAoZS5nLiBzcG90KSBkZWZhdWx0IHRvIGEgcG9zaXRpb24gb3RoZXIgdGhhbiB0aGUgb3JpZ2luLiBSZXNldCB0aGUgcG9zaXRpb25cbiAgICAgICAgLy8gaGVyZSwgYmVjYXVzZSBub2RlLWxldmVsIHBhcnNpbmcgd2lsbCBvbmx5IG92ZXJyaWRlIHBvc2l0aW9uIGlmIGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxuICAgICAgICBsaWdodE5vZGUucG9zaXRpb24uc2V0KDAsIDAsIDApO1xuXG4gICAgICAgIGxpZ2h0Tm9kZS5kZWNheSA9IDI7XG5cbiAgICAgICAgaWYgKGxpZ2h0RGVmLmludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSBsaWdodE5vZGUuaW50ZW5zaXR5ID0gbGlnaHREZWYuaW50ZW5zaXR5O1xuXG4gICAgICAgIGxpZ2h0Tm9kZS5uYW1lID0gbGlnaHREZWYubmFtZSB8fCAnbGlnaHRfJyArIGxpZ2h0SW5kZXg7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShsaWdodE5vZGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVbmxpdCBNYXRlcmlhbHMgRXh0ZW5zaW9uXG4gICAgICpcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfbWF0ZXJpYWxzX3VubGl0XG4gICAgICovXG4gICAgZnVuY3Rpb24gR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uKCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQ7XG4gICAgfVxuXG4gICAgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uLnByb3RvdHlwZS5nZXRNYXRlcmlhbFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNZXNoQmFzaWNNYXRlcmlhbDtcbiAgICB9O1xuXG4gICAgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uLnByb3RvdHlwZS5leHRlbmRQYXJhbXMgPSBmdW5jdGlvbiAobWF0ZXJpYWxQYXJhbXMsIG1hdGVyaWFsRGVmLCBwYXJzZXIpIHtcbiAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcblxuICAgICAgICB2YXIgbWV0YWxsaWNSb3VnaG5lc3MgPSBtYXRlcmlhbERlZi5wYnJNZXRhbGxpY1JvdWdobmVzcztcblxuICAgICAgICBpZiAobWV0YWxsaWNSb3VnaG5lc3MpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvcikpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvci5mcm9tQXJyYXkoYXJyYXkpO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSBhcnJheVszXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ21hcCcsIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJjb2F0IE1hdGVyaWFscyBFeHRlbnNpb25cbiAgICAgKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9tYXRlcmlhbHNfY2xlYXJjb2F0XG4gICAgICovXG4gICAgZnVuY3Rpb24gR0xURk1hdGVyaWFsc0NsZWFyY29hdEV4dGVuc2lvbigpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX0NMRUFSQ09BVDtcbiAgICB9XG5cbiAgICBHTFRGTWF0ZXJpYWxzQ2xlYXJjb2F0RXh0ZW5zaW9uLnByb3RvdHlwZS5nZXRNYXRlcmlhbFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNZXNoUGh5c2ljYWxNYXRlcmlhbDtcbiAgICB9O1xuXG4gICAgR0xURk1hdGVyaWFsc0NsZWFyY29hdEV4dGVuc2lvbi5wcm90b3R5cGUuZXh0ZW5kUGFyYW1zID0gZnVuY3Rpb24gKG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyKSB7XG4gICAgICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICAgICAgdmFyIGV4dGVuc2lvbiA9IG1hdGVyaWFsRGVmLmV4dGVuc2lvbnNbdGhpcy5uYW1lXTtcblxuICAgICAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdEZhY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jbGVhcmNvYXQgPSBleHRlbnNpb24uY2xlYXJjb2F0RmFjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4dGVuc2lvbi5jbGVhcmNvYXRUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ2NsZWFyY29hdE1hcCcsIGV4dGVuc2lvbi5jbGVhcmNvYXRUZXh0dXJlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdFJvdWdobmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSBleHRlbnNpb24uY2xlYXJjb2F0Um91Z2huZXNzRmFjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4dGVuc2lvbi5jbGVhcmNvYXRSb3VnaG5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgICAgICAgICBwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ2NsZWFyY29hdFJvdWdobmVzc01hcCcsIGV4dGVuc2lvbi5jbGVhcmNvYXRSb3VnaG5lc3NUZXh0dXJlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHRlbnNpb24uY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwZW5kaW5nLnB1c2gocGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdjbGVhcmNvYXROb3JtYWxNYXAnLCBleHRlbnNpb24uY2xlYXJjb2F0Tm9ybWFsVGV4dHVyZSkpO1xuXG4gICAgICAgICAgICBpZiAoZXh0ZW5zaW9uLmNsZWFyY29hdE5vcm1hbFRleHR1cmUuc2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IGV4dGVuc2lvbi5jbGVhcmNvYXROb3JtYWxUZXh0dXJlLnNjYWxlO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMihzY2FsZSwgc2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpO1xuICAgIH07XG5cbiAgICAvKiBCSU5BUlkgRVhURU5TSU9OICovXG4gICAgdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDID0gJ2dsVEYnO1xuICAgIHZhciBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggPSAxMjtcbiAgICB2YXIgQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUyA9IHsgSlNPTjogMHg0ZTRmNTM0YSwgQklOOiAweDAwNGU0OTQyIH07XG5cbiAgICBmdW5jdGlvbiBHTFRGQmluYXJ5RXh0ZW5zaW9uKGRhdGEpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEY7XG4gICAgICAgIHRoaXMuY29udGVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuYm9keSA9IG51bGw7XG5cbiAgICAgICAgdmFyIGhlYWRlclZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSwgMCwgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIKTtcblxuICAgICAgICB0aGlzLmhlYWRlciA9IHtcbiAgICAgICAgICAgIG1hZ2ljOiBMb2FkZXJVdGlscy5kZWNvZGVUZXh0KG5ldyBVaW50OEFycmF5KGRhdGEuc2xpY2UoMCwgNCkpKSxcbiAgICAgICAgICAgIHZlcnNpb246IGhlYWRlclZpZXcuZ2V0VWludDMyKDQsIHRydWUpLFxuICAgICAgICAgICAgbGVuZ3RoOiBoZWFkZXJWaWV3LmdldFVpbnQzMig4LCB0cnVlKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLmhlYWRlci5tYWdpYyAhPT0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgZ2xURi1CaW5hcnkgaGVhZGVyLicpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaGVhZGVyLnZlcnNpb24gPCAyLjApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogTGVnYWN5IGJpbmFyeSBmaWxlIGRldGVjdGVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNodW5rVmlldyA9IG5ldyBEYXRhVmlldyhkYXRhLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEgpO1xuICAgICAgICB2YXIgY2h1bmtJbmRleCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGNodW5rSW5kZXggPCBjaHVua1ZpZXcuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNodW5rTGVuZ3RoID0gY2h1bmtWaWV3LmdldFVpbnQzMihjaHVua0luZGV4LCB0cnVlKTtcbiAgICAgICAgICAgIGNodW5rSW5kZXggKz0gNDtcblxuICAgICAgICAgICAgdmFyIGNodW5rVHlwZSA9IGNodW5rVmlldy5nZXRVaW50MzIoY2h1bmtJbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICBjaHVua0luZGV4ICs9IDQ7XG5cbiAgICAgICAgICAgIGlmIChjaHVua1R5cGUgPT09IEJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMuSlNPTikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4LCBjaHVua0xlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dChjb250ZW50QXJyYXkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVua1R5cGUgPT09IEJJTkFSWV9FWFRFTlNJT05fQ0hVTktfVFlQRVMuQklOKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuYm9keSA9IGRhdGEuc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGNodW5rTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xpZW50cyBtdXN0IGlnbm9yZSBjaHVua3Mgd2l0aCB1bmtub3duIHR5cGVzLlxuXG4gICAgICAgICAgICBjaHVua0luZGV4ICs9IGNodW5rTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBKU09OIGNvbnRlbnQgbm90IGZvdW5kLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRFJBQ08gTWVzaCBDb21wcmVzc2lvbiBFeHRlbnNpb25cbiAgICAgKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9kcmFjb19tZXNoX2NvbXByZXNzaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKGpzb24sIGRyYWNvTG9hZGVyKSB7XG4gICAgICAgIGlmICghZHJhY29Mb2FkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogTm8gRFJBQ09Mb2FkZXIgaW5zdGFuY2UgcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OO1xuICAgICAgICB0aGlzLmpzb24gPSBqc29uO1xuICAgICAgICB0aGlzLmRyYWNvTG9hZGVyID0gZHJhY29Mb2FkZXI7XG4gICAgICAgIHRoaXMuZHJhY29Mb2FkZXIucHJlbG9hZCgpO1xuICAgIH1cblxuICAgIEdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbi5wcm90b3R5cGUuZGVjb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gKHByaW1pdGl2ZSwgcGFyc2VyKSB7XG4gICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICB2YXIgZHJhY29Mb2FkZXIgPSB0aGlzLmRyYWNvTG9hZGVyO1xuICAgICAgICB2YXIgYnVmZmVyVmlld0luZGV4ID0gcHJpbWl0aXZlLmV4dGVuc2lvbnNbdGhpcy5uYW1lXS5idWZmZXJWaWV3O1xuICAgICAgICB2YXIgZ2x0ZkF0dHJpYnV0ZU1hcCA9IHByaW1pdGl2ZS5leHRlbnNpb25zW3RoaXMubmFtZV0uYXR0cmlidXRlcztcbiAgICAgICAgdmFyIHRocmVlQXR0cmlidXRlTWFwID0ge307XG4gICAgICAgIHZhciBhdHRyaWJ1dGVOb3JtYWxpemVkTWFwID0ge307XG4gICAgICAgIHZhciBhdHRyaWJ1dGVUeXBlTWFwID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBnbHRmQXR0cmlidXRlTWFwKSB7XG4gICAgICAgICAgICB2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1thdHRyaWJ1dGVOYW1lXSB8fCBhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIHRocmVlQXR0cmlidXRlTWFwW3RocmVlQXR0cmlidXRlTmFtZV0gPSBnbHRmQXR0cmlidXRlTWFwW2F0dHJpYnV0ZU5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChhdHRyaWJ1dGVOYW1lIGluIHByaW1pdGl2ZS5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1thdHRyaWJ1dGVOYW1lXSB8fCBhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmIChnbHRmQXR0cmlidXRlTWFwW2F0dHJpYnV0ZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWNjZXNzb3JEZWYgPSBqc29uLmFjY2Vzc29yc1twcmltaXRpdmUuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXV07XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFR5cGUgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbYWNjZXNzb3JEZWYuY29tcG9uZW50VHlwZV07XG5cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVUeXBlTWFwW3RocmVlQXR0cmlidXRlTmFtZV0gPSBjb21wb25lbnRUeXBlO1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbdGhyZWVBdHRyaWJ1dGVOYW1lXSA9IGFjY2Vzc29yRGVmLm5vcm1hbGl6ZWQgPT09IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VyLmdldERlcGVuZGVuY3koJ2J1ZmZlclZpZXcnLCBidWZmZXJWaWV3SW5kZXgpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlclZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGRyYWNvTG9hZGVyLmRlY29kZURyYWNvRmlsZShcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyVmlldyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGdlb21ldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZCA9IGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbYXR0cmlidXRlTmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZCAhPT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGUubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZ2VvbWV0cnkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0aHJlZUF0dHJpYnV0ZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlVHlwZU1hcFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRleHR1cmUgVHJhbnNmb3JtIEV4dGVuc2lvblxuICAgICAqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX3RleHR1cmVfdHJhbnNmb3JtXG4gICAgICovXG4gICAgZnVuY3Rpb24gR0xURlRleHR1cmVUcmFuc2Zvcm1FeHRlbnNpb24oKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNO1xuICAgIH1cblxuICAgIEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uLnByb3RvdHlwZS5leHRlbmRUZXh0dXJlID0gZnVuY3Rpb24gKHRleHR1cmUsIHRyYW5zZm9ybSkge1xuICAgICAgICB0ZXh0dXJlID0gdGV4dHVyZS5jbG9uZSgpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0ub2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSh0cmFuc2Zvcm0ub2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0ucm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGV4dHVyZS5yb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0uc2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KHRyYW5zZm9ybS5zY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNmb3JtLnRleENvb3JkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVEhSRUUuR0xURkxvYWRlcjogQ3VzdG9tIFVWIHNldHMgaW4gXCInICsgdGhpcy5uYW1lICsgJ1wiIGV4dGVuc2lvbiBub3QgeWV0IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjdWxhci1HbG9zc2luZXNzIEV4dGVuc2lvblxuICAgICAqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3NcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgc3ViIGNsYXNzIG9mIFN0YW5kYXJkTWF0ZXJpYWwgd2l0aCBzb21lIG9mIHRoZSBmdW5jdGlvbmFsaXR5XG4gICAgICogY2hhbmdlZCB2aWEgdGhlIGBvbkJlZm9yZUNvbXBpbGVgIGNhbGxiYWNrXG4gICAgICogQHBhaWxoZWFkXG4gICAgICovXG5cbiAgICBmdW5jdGlvbiBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbChwYXJhbXMpIHtcbiAgICAgICAgTWVzaFN0YW5kYXJkTWF0ZXJpYWwuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsID0gdHJ1ZTtcblxuICAgICAgICAvL3ZhcmlvdXMgY2h1bmtzIHRoYXQgbmVlZCByZXBsYWNpbmdcbiAgICAgICAgdmFyIHNwZWN1bGFyTWFwUGFyc0ZyYWdtZW50Q2h1bmsgPSBbJyNpZmRlZiBVU0VfU1BFQ1VMQVJNQVAnLCAnXHR1bmlmb3JtIHNhbXBsZXIyRCBzcGVjdWxhck1hcDsnLCAnI2VuZGlmJ10uam9pbihcbiAgICAgICAgICAgICdcXG4nXG4gICAgICAgICk7XG5cbiAgICAgICAgdmFyIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuICAgICAgICAgICAgJ1x0dW5pZm9ybSBzYW1wbGVyMkQgZ2xvc3NpbmVzc01hcDsnLFxuICAgICAgICAgICAgJyNlbmRpZidcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgICB2YXIgc3BlY3VsYXJNYXBGcmFnbWVudENodW5rID0gW1xuICAgICAgICAgICAgJ3ZlYzMgc3BlY3VsYXJGYWN0b3IgPSBzcGVjdWxhcjsnLFxuICAgICAgICAgICAgJyNpZmRlZiBVU0VfU1BFQ1VMQVJNQVAnLFxuICAgICAgICAgICAgJ1x0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7JyxcbiAgICAgICAgICAgICdcdHRleGVsU3BlY3VsYXIgPSBzUkdCVG9MaW5lYXIoIHRleGVsU3BlY3VsYXIgKTsnLFxuICAgICAgICAgICAgJ1x0Ly8gcmVhZHMgY2hhbm5lbCBSR0IsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG4gICAgICAgICAgICAnXHRzcGVjdWxhckZhY3RvciAqPSB0ZXhlbFNwZWN1bGFyLnJnYjsnLFxuICAgICAgICAgICAgJyNlbmRpZidcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgICB2YXIgZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsgPSBbXG4gICAgICAgICAgICAnZmxvYXQgZ2xvc3NpbmVzc0ZhY3RvciA9IGdsb3NzaW5lc3M7JyxcbiAgICAgICAgICAgICcjaWZkZWYgVVNFX0dMT1NTSU5FU1NNQVAnLFxuICAgICAgICAgICAgJ1x0dmVjNCB0ZXhlbEdsb3NzaW5lc3MgPSB0ZXh0dXJlMkQoIGdsb3NzaW5lc3NNYXAsIHZVdiApOycsXG4gICAgICAgICAgICAnXHQvLyByZWFkcyBjaGFubmVsIEEsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG4gICAgICAgICAgICAnXHRnbG9zc2luZXNzRmFjdG9yICo9IHRleGVsR2xvc3NpbmVzcy5hOycsXG4gICAgICAgICAgICAnI2VuZGlmJ1xuICAgICAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIHZhciBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICdQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsOycsXG4gICAgICAgICAgICAnbWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjsnLFxuICAgICAgICAgICAgJ3ZlYzMgZHh5ID0gbWF4KCBhYnMoIGRGZHgoIGdlb21ldHJ5Tm9ybWFsICkgKSwgYWJzKCBkRmR5KCBnZW9tZXRyeU5vcm1hbCApICkgKTsnLFxuICAgICAgICAgICAgJ2Zsb2F0IGdlb21ldHJ5Um91Z2huZXNzID0gbWF4KCBtYXgoIGR4eS54LCBkeHkueSApLCBkeHkueiApOycsXG4gICAgICAgICAgICAnbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtYXgoIDEuMCAtIGdsb3NzaW5lc3NGYWN0b3IsIDAuMDUyNSApOy8vIDAuMDUyNSBjb3JyZXNwb25kcyB0byB0aGUgYmFzZSBtaXAgb2YgYSAyNTYgY3ViZW1hcC4nLFxuICAgICAgICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzOycsXG4gICAgICAgICAgICAnbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCAxLjAgKTsnLFxuICAgICAgICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhckZhY3Rvci5yZ2I7J1xuICAgICAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIHZhciB1bmlmb3JtcyA9IHtcbiAgICAgICAgICAgIHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoKS5zZXRIZXgoMHhmZmZmZmYpIH0sXG4gICAgICAgICAgICBnbG9zc2luZXNzOiB7IHZhbHVlOiAxIH0sXG4gICAgICAgICAgICBzcGVjdWxhck1hcDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgZ2xvc3NpbmVzc01hcDogeyB2YWx1ZTogbnVsbCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZXh0cmFVbmlmb3JtcyA9IHVuaWZvcm1zO1xuXG4gICAgICAgIC8vIHBsZWFzZSBzZWUgIzE0MDMxIG9yICMxMzE5OCBmb3IgYW4gYWx0ZXJuYXRlIGFwcHJvYWNoXG4gICAgICAgIHRoaXMub25CZWZvcmVDb21waWxlID0gZnVuY3Rpb24gKHNoYWRlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgdW5pZm9ybU5hbWUgaW4gdW5pZm9ybXMpIHtcbiAgICAgICAgICAgICAgICBzaGFkZXIudW5pZm9ybXNbdW5pZm9ybU5hbWVdID0gdW5pZm9ybXNbdW5pZm9ybU5hbWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaGFkZXIuZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXIucmVwbGFjZSgndW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7JywgJ3VuaWZvcm0gdmVjMyBzcGVjdWxhcjsnKTtcbiAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICd1bmlmb3JtIGZsb2F0IG1ldGFsbmVzczsnLFxuICAgICAgICAgICAgICAgICd1bmlmb3JtIGZsb2F0IGdsb3NzaW5lc3M7J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+JyxcbiAgICAgICAgICAgICAgICBzcGVjdWxhck1hcFBhcnNGcmFnbWVudENodW5rXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2hhZGVyLmZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudD4nLFxuICAgICAgICAgICAgICAgIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVua1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PicsXG4gICAgICAgICAgICAgICAgc3BlY3VsYXJNYXBGcmFnbWVudENodW5rXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2hhZGVyLmZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgJyNpbmNsdWRlIDxtZXRhbG5lc3NtYXBfZnJhZ21lbnQ+JyxcbiAgICAgICAgICAgICAgICBnbG9zc2luZXNzTWFwRnJhZ21lbnRDaHVua1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNoYWRlci5mcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlci5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICcjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PicsXG4gICAgICAgICAgICAgICAgbGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmtcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyplc2xpbnQtZGlzYWJsZSovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgICAgIHNwZWN1bGFyOiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuc3BlY3VsYXIudmFsdWUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzcGVjdWxhck1hcDoge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2xvc3NpbmVzczoge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5pZm9ybXMuZ2xvc3NpbmVzcy52YWx1ZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZ2xvc3NpbmVzcy52YWx1ZSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdsb3NzaW5lc3NNYXA6IHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgPSB2O1xuICAgICAgICAgICAgICAgICAgICAvL2hvdyBhYm91dCBzb21ldGhpbmcgbGlrZSB0aGlzIC0gQHBhaWxoZWFkXG4gICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBVU0VfUk9VR0hORVNTTUFQIHRvIGVuYWJsZSB2VXZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfUk9VR0hORVNTTUFQID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVA7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvKmVzbGludC1lbmFibGUqL1xuICAgICAgICBkZWxldGUgdGhpcy5tZXRhbG5lc3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJvdWdobmVzcztcbiAgICAgICAgZGVsZXRlIHRoaXMubWV0YWxuZXNzTWFwO1xuICAgICAgICBkZWxldGUgdGhpcy5yb3VnaG5lc3NNYXA7XG5cbiAgICAgICAgdGhpcy5zZXRWYWx1ZXMocGFyYW1zKTtcbiAgICB9XG5cbiAgICBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZSk7XG4gICAgR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWw7XG5cbiAgICBHTFRGTWVzaFN0YW5kYXJkU0dNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xuICAgICAgICB0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuICAgICAgICB0aGlzLnNwZWN1bGFyLmNvcHkoc291cmNlLnNwZWN1bGFyKTtcbiAgICAgICAgdGhpcy5nbG9zc2luZXNzTWFwID0gc291cmNlLmdsb3NzaW5lc3NNYXA7XG4gICAgICAgIHRoaXMuZ2xvc3NpbmVzcyA9IHNvdXJjZS5nbG9zc2luZXNzO1xuICAgICAgICBkZWxldGUgdGhpcy5tZXRhbG5lc3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJvdWdobmVzcztcbiAgICAgICAgZGVsZXRlIHRoaXMubWV0YWxuZXNzTWFwO1xuICAgICAgICBkZWxldGUgdGhpcy5yb3VnaG5lc3NNYXA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBHTFRGTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0ZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTLFxuXG4gICAgICAgICAgICBzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXM6IFtcbiAgICAgICAgICAgICAgICAnY29sb3InLFxuICAgICAgICAgICAgICAgICdtYXAnLFxuICAgICAgICAgICAgICAgICdsaWdodE1hcCcsXG4gICAgICAgICAgICAgICAgJ2xpZ2h0TWFwSW50ZW5zaXR5JyxcbiAgICAgICAgICAgICAgICAnYW9NYXAnLFxuICAgICAgICAgICAgICAgICdhb01hcEludGVuc2l0eScsXG4gICAgICAgICAgICAgICAgJ2VtaXNzaXZlJyxcbiAgICAgICAgICAgICAgICAnZW1pc3NpdmVJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICdlbWlzc2l2ZU1hcCcsXG4gICAgICAgICAgICAgICAgJ2J1bXBNYXAnLFxuICAgICAgICAgICAgICAgICdidW1wU2NhbGUnLFxuICAgICAgICAgICAgICAgICdub3JtYWxNYXAnLFxuICAgICAgICAgICAgICAgICdub3JtYWxNYXBUeXBlJyxcbiAgICAgICAgICAgICAgICAnZGlzcGxhY2VtZW50TWFwJyxcbiAgICAgICAgICAgICAgICAnZGlzcGxhY2VtZW50U2NhbGUnLFxuICAgICAgICAgICAgICAgICdkaXNwbGFjZW1lbnRCaWFzJyxcbiAgICAgICAgICAgICAgICAnc3BlY3VsYXJNYXAnLFxuICAgICAgICAgICAgICAgICdzcGVjdWxhcicsXG4gICAgICAgICAgICAgICAgJ2dsb3NzaW5lc3NNYXAnLFxuICAgICAgICAgICAgICAgICdnbG9zc2luZXNzJyxcbiAgICAgICAgICAgICAgICAnYWxwaGFNYXAnLFxuICAgICAgICAgICAgICAgICdlbnZNYXAnLFxuICAgICAgICAgICAgICAgICdlbnZNYXBJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICdyZWZyYWN0aW9uUmF0aW8nXG4gICAgICAgICAgICBdLFxuXG4gICAgICAgICAgICBnZXRNYXRlcmlhbFR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBleHRlbmRQYXJhbXM6IGZ1bmN0aW9uIChtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlcikge1xuICAgICAgICAgICAgICAgIHZhciBwYnJTcGVjdWxhckdsb3NzaW5lc3MgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zW3RoaXMubmFtZV07XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gMS4wO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlRmFjdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjtcblxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5jb2xvci5mcm9tQXJyYXkoYXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gYXJyYXlbM107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuYXNzaWduVGV4dHVyZShtYXRlcmlhbFBhcmFtcywgJ21hcCcsIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IENvbG9yKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmdsb3NzaW5lc3MgPVxuICAgICAgICAgICAgICAgICAgICBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmdsb3NzaW5lc3NGYWN0b3IgOiAxLjA7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyLmZyb21BcnJheShwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGVjR2xvc3NNYXBEZWYgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZTtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnZ2xvc3NpbmVzc01hcCcsIHNwZWNHbG9zc01hcERlZikpO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2gocGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdzcGVjdWxhck1hcCcsIHNwZWNHbG9zc01hcERlZikpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNyZWF0ZU1hdGVyaWFsOiBmdW5jdGlvbiAobWF0ZXJpYWxQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWwobWF0ZXJpYWxQYXJhbXMpO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmZvZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5jb2xvciA9IG1hdGVyaWFsUGFyYW1zLmNvbG9yO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwubWFwID0gbWF0ZXJpYWxQYXJhbXMubWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMubWFwO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwubGlnaHRNYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuYW9NYXAgPSBtYXRlcmlhbFBhcmFtcy5hb01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLmFvTWFwO1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmUgPSBtYXRlcmlhbFBhcmFtcy5lbWlzc2l2ZTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmVNYXA7XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5idW1wTWFwID0gbWF0ZXJpYWxQYXJhbXMuYnVtcE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLmJ1bXBNYXA7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuYnVtcFNjYWxlID0gMTtcblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcCA9IG1hdGVyaWFsUGFyYW1zLm5vcm1hbE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLm5vcm1hbE1hcDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlKSBtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlO1xuXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMuc3BlY3VsYXJNYXA7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXIgPSBtYXRlcmlhbFBhcmFtcy5zcGVjdWxhcjtcblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmdsb3NzaW5lc3NNYXAgPVxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5nbG9zc2luZXNzTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogbWF0ZXJpYWxQYXJhbXMuZ2xvc3NpbmVzc01hcDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5nbG9zc2luZXNzID0gbWF0ZXJpYWxQYXJhbXMuZ2xvc3NpbmVzcztcblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmFscGhhTWFwID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVudk1hcCA9IG1hdGVyaWFsUGFyYW1zLmVudk1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hdGVyaWFsUGFyYW1zLmVudk1hcDtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lc2ggUXVhbnRpemF0aW9uIEV4dGVuc2lvblxuICAgICAqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21lc2hfcXVhbnRpemF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gR0xURk1lc2hRdWFudGl6YXRpb25FeHRlbnNpb24oKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX01FU0hfUVVBTlRJWkFUSU9OO1xuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyoqKioqKioqKiogSU5URVJQT0xBVElPTiAqKioqKioqKi9cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgLy8gU3BsaW5lIEludGVycG9sYXRpb25cbiAgICAvLyBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2FwcGVuZGl4LWMtc3BsaW5lLWludGVycG9sYXRpb25cbiAgICBmdW5jdGlvbiBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudChwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyKSB7XG4gICAgICAgIEludGVycG9sYW50LmNhbGwodGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlcik7XG4gICAgfVxuXG4gICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbnRlcnBvbGFudC5wcm90b3R5cGUpO1xuICAgIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50O1xuXG4gICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8gPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgLy8gQ29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyLiBTZWUgZGVzY3JpcHRpb24gb2YgZ2xURlxuICAgICAgICAvLyBDVUJJQ1NQTElORSB2YWx1ZXMgbGF5b3V0IGluIGludGVycG9sYXRlXygpIGZ1bmN0aW9uIGJlbG93LlxuXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcbiAgICAgICAgICAgIHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuICAgICAgICAgICAgdmFsdWVTaXplID0gdGhpcy52YWx1ZVNpemUsXG4gICAgICAgICAgICBvZmZzZXQgPSBpbmRleCAqIHZhbHVlU2l6ZSAqIDMgKyB2YWx1ZVNpemU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgIT09IHZhbHVlU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRbaV0gPSB2YWx1ZXNbb2Zmc2V0ICsgaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuYmVmb3JlU3RhcnRfID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87XG5cbiAgICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuYWZ0ZXJFbmRfID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87XG5cbiAgICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuaW50ZXJwb2xhdGVfID0gZnVuY3Rpb24gKGkxLCB0MCwgdCwgdDEpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyO1xuICAgICAgICB2YXIgdmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXM7XG4gICAgICAgIHZhciBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTtcblxuICAgICAgICB2YXIgc3RyaWRlMiA9IHN0cmlkZSAqIDI7XG4gICAgICAgIHZhciBzdHJpZGUzID0gc3RyaWRlICogMztcblxuICAgICAgICB2YXIgdGQgPSB0MSAtIHQwO1xuXG4gICAgICAgIHZhciBwID0gKHQgLSB0MCkgLyB0ZDtcbiAgICAgICAgdmFyIHBwID0gcCAqIHA7XG4gICAgICAgIHZhciBwcHAgPSBwcCAqIHA7XG5cbiAgICAgICAgdmFyIG9mZnNldDEgPSBpMSAqIHN0cmlkZTM7XG4gICAgICAgIHZhciBvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZTM7XG5cbiAgICAgICAgdmFyIHMyID0gLTIgKiBwcHAgKyAzICogcHA7XG4gICAgICAgIHZhciBzMyA9IHBwcCAtIHBwO1xuICAgICAgICB2YXIgczAgPSAxIC0gczI7XG4gICAgICAgIHZhciBzMSA9IHMzIC0gcHAgKyBwO1xuXG4gICAgICAgIC8vIExheW91dCBvZiBrZXlmcmFtZSBvdXRwdXQgdmFsdWVzIGZvciBDVUJJQ1NQTElORSBhbmltYXRpb25zOlxuICAgICAgICAvLyAgIFsgaW5UYW5nZW50XzEsIHNwbGluZVZlcnRleF8xLCBvdXRUYW5nZW50XzEsIGluVGFuZ2VudF8yLCBzcGxpbmVWZXJ0ZXhfMiwgLi4uIF1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcDAgPSB2YWx1ZXNbb2Zmc2V0MCArIGkgKyBzdHJpZGVdOyAvLyBzcGxpbmVWZXJ0ZXhfa1xuICAgICAgICAgICAgdmFyIG0wID0gdmFsdWVzW29mZnNldDAgKyBpICsgc3RyaWRlMl0gKiB0ZDsgLy8gb3V0VGFuZ2VudF9rICogKHRfaysxIC0gdF9rKVxuICAgICAgICAgICAgdmFyIHAxID0gdmFsdWVzW29mZnNldDEgKyBpICsgc3RyaWRlXTsgLy8gc3BsaW5lVmVydGV4X2srMVxuICAgICAgICAgICAgdmFyIG0xID0gdmFsdWVzW29mZnNldDEgKyBpXSAqIHRkOyAvLyBpblRhbmdlbnRfaysxICogKHRfaysxIC0gdF9rKVxuXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBzMCAqIHAwICsgczEgKiBtMCArIHMyICogcDEgKyBzMyAqIG0xO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKioqKioqKioqKiBJTlRFUk5BTFMgKioqKioqKioqKioqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKiBDT05TVEFOVFMgKi9cblxuICAgIHZhciBXRUJHTF9DT05TVEFOVFMgPSB7XG4gICAgICAgIEZMT0FUOiA1MTI2LFxuICAgICAgICAvL0ZMT0FUX01BVDI6IDM1Njc0LFxuICAgICAgICBGTE9BVF9NQVQzOiAzNTY3NSxcbiAgICAgICAgRkxPQVRfTUFUNDogMzU2NzYsXG4gICAgICAgIEZMT0FUX1ZFQzI6IDM1NjY0LFxuICAgICAgICBGTE9BVF9WRUMzOiAzNTY2NSxcbiAgICAgICAgRkxPQVRfVkVDNDogMzU2NjYsXG4gICAgICAgIExJTkVBUjogOTcyOSxcbiAgICAgICAgUkVQRUFUOiAxMDQ5NyxcbiAgICAgICAgU0FNUExFUl8yRDogMzU2NzgsXG4gICAgICAgIFBPSU5UUzogMCxcbiAgICAgICAgTElORVM6IDEsXG4gICAgICAgIExJTkVfTE9PUDogMixcbiAgICAgICAgTElORV9TVFJJUDogMyxcbiAgICAgICAgVFJJQU5HTEVTOiA0LFxuICAgICAgICBUUklBTkdMRV9TVFJJUDogNSxcbiAgICAgICAgVFJJQU5HTEVfRkFOOiA2LFxuICAgICAgICBVTlNJR05FRF9CWVRFOiA1MTIxLFxuICAgICAgICBVTlNJR05FRF9TSE9SVDogNTEyM1xuICAgIH07XG5cbiAgICB2YXIgV0VCR0xfQ09NUE9ORU5UX1RZUEVTID0ge1xuICAgICAgICA1MTIwOiBJbnQ4QXJyYXksXG4gICAgICAgIDUxMjE6IFVpbnQ4QXJyYXksXG4gICAgICAgIDUxMjI6IEludDE2QXJyYXksXG4gICAgICAgIDUxMjM6IFVpbnQxNkFycmF5LFxuICAgICAgICA1MTI1OiBVaW50MzJBcnJheSxcbiAgICAgICAgNTEyNjogRmxvYXQzMkFycmF5XG4gICAgfTtcblxuICAgIHZhciBXRUJHTF9GSUxURVJTID0ge1xuICAgICAgICA5NzI4OiBOZWFyZXN0RmlsdGVyLFxuICAgICAgICA5NzI5OiBMaW5lYXJGaWx0ZXIsXG4gICAgICAgIDk5ODQ6IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxuICAgICAgICA5OTg1OiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuICAgICAgICA5OTg2OiBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLFxuICAgICAgICA5OTg3OiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJcbiAgICB9O1xuXG4gICAgdmFyIFdFQkdMX1dSQVBQSU5HUyA9IHtcbiAgICAgICAgMzMwNzE6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG4gICAgICAgIDMzNjQ4OiBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLFxuICAgICAgICAxMDQ5NzogUmVwZWF0V3JhcHBpbmdcbiAgICB9O1xuXG4gICAgdmFyIFdFQkdMX1RZUEVfU0laRVMgPSB7XG4gICAgICAgIFNDQUxBUjogMSxcbiAgICAgICAgVkVDMjogMixcbiAgICAgICAgVkVDMzogMyxcbiAgICAgICAgVkVDNDogNCxcbiAgICAgICAgTUFUMjogNCxcbiAgICAgICAgTUFUMzogOSxcbiAgICAgICAgTUFUNDogMTZcbiAgICB9O1xuXG4gICAgdmFyIEFUVFJJQlVURVMgPSB7XG4gICAgICAgIFBPU0lUSU9OOiAncG9zaXRpb24nLFxuICAgICAgICBOT1JNQUw6ICdub3JtYWwnLFxuICAgICAgICBUQU5HRU5UOiAndGFuZ2VudCcsXG4gICAgICAgIFRFWENPT1JEXzA6ICd1dicsXG4gICAgICAgIFRFWENPT1JEXzE6ICd1djInLFxuICAgICAgICBDT0xPUl8wOiAnY29sb3InLFxuICAgICAgICBXRUlHSFRTXzA6ICdza2luV2VpZ2h0JyxcbiAgICAgICAgSk9JTlRTXzA6ICdza2luSW5kZXgnXG4gICAgfTtcblxuICAgIHZhciBQQVRIX1BST1BFUlRJRVMgPSB7XG4gICAgICAgIHNjYWxlOiAnc2NhbGUnLFxuICAgICAgICB0cmFuc2xhdGlvbjogJ3Bvc2l0aW9uJyxcbiAgICAgICAgcm90YXRpb246ICdxdWF0ZXJuaW9uJyxcbiAgICAgICAgd2VpZ2h0czogJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcydcbiAgICB9O1xuXG4gICAgdmFyIElOVEVSUE9MQVRJT04gPSB7XG4gICAgICAgIENVQklDU1BMSU5FOiB1bmRlZmluZWQsIC8vIFdlIHVzZSBhIGN1c3RvbSBpbnRlcnBvbGFudCAoR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhdGlvbikgZm9yIENVQklDU1BMSU5FIHRyYWNrcy4gRWFjaFxuICAgICAgICAvLyBrZXlmcmFtZSB0cmFjayB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYSBkZWZhdWx0IGludGVycG9sYXRpb24gdHlwZSwgdGhlbiBtb2RpZmllZC5cbiAgICAgICAgTElORUFSOiBJbnRlcnBvbGF0ZUxpbmVhcixcbiAgICAgICAgU1RFUDogSW50ZXJwb2xhdGVEaXNjcmV0ZVxuICAgIH07XG5cbiAgICB2YXIgQUxQSEFfTU9ERVMgPSB7XG4gICAgICAgIE9QQVFVRTogJ09QQVFVRScsXG4gICAgICAgIE1BU0s6ICdNQVNLJyxcbiAgICAgICAgQkxFTkQ6ICdCTEVORCdcbiAgICB9O1xuXG4gICAgdmFyIE1JTUVfVFlQRV9GT1JNQVRTID0ge1xuICAgICAgICAnaW1hZ2UvcG5nJzogUkdCQUZvcm1hdCxcbiAgICAgICAgJ2ltYWdlL2pwZWcnOiBSR0JGb3JtYXRcbiAgICB9O1xuXG4gICAgLyogVVRJTElUWSBGVU5DVElPTlMgKi9cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsLCBwYXRoKSB7XG4gICAgICAgIC8vIEludmFsaWQgVVJMXG4gICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnKSByZXR1cm4gJyc7XG5cbiAgICAgICAgLy8gSG9zdCBSZWxhdGl2ZSBVUkxcbiAgICAgICAgaWYgKC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QocGF0aCkgJiYgL15cXC8vLnRlc3QodXJsKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC8oXmh0dHBzPzpcXC9cXC9bXlxcL10rKS4qL2ksICckMScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWJzb2x1dGUgVVJMIGh0dHA6Ly8saHR0cHM6Ly8sLy9cbiAgICAgICAgaWYgKC9eKGh0dHBzPzopP1xcL1xcLy9pLnRlc3QodXJsKSkgcmV0dXJuIHVybDtcblxuICAgICAgICAvLyBEYXRhIFVSSVxuICAgICAgICBpZiAoL15kYXRhOi4qLC4qJC9pLnRlc3QodXJsKSkgcmV0dXJuIHVybDtcblxuICAgICAgICAvLyBCbG9iIFVSTFxuICAgICAgICBpZiAoL15ibG9iOi4qJC9pLnRlc3QodXJsKSkgcmV0dXJuIHVybDtcblxuICAgICAgICAvLyBSZWxhdGl2ZSBVUkxcbiAgICAgICAgcmV0dXJuIHBhdGggKyB1cmw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNkZWZhdWx0LW1hdGVyaWFsXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE1hdGVyaWFsKGNhY2hlKSB7XG4gICAgICAgIGlmIChjYWNoZVsnRGVmYXVsdE1hdGVyaWFsJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FjaGVbJ0RlZmF1bHRNYXRlcmlhbCddID0gbmV3IE1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IDB4MDAwMDAwLFxuICAgICAgICAgICAgICAgIG1ldGFsbmVzczogMSxcbiAgICAgICAgICAgICAgICByb3VnaG5lc3M6IDEsXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRlcHRoVGVzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaWRlOiBGcm9udFNpZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlWydEZWZhdWx0TWF0ZXJpYWwnXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoa25vd25FeHRlbnNpb25zLCBvYmplY3QsIG9iamVjdERlZikge1xuICAgICAgICAvLyBBZGQgdW5rbm93biBnbFRGIGV4dGVuc2lvbnMgdG8gYW4gb2JqZWN0J3MgdXNlckRhdGEuXG5cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3REZWYuZXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgaWYgKGtub3duRXh0ZW5zaW9uc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnVzZXJEYXRhLmdsdGZFeHRlbnNpb25zID0gb2JqZWN0LnVzZXJEYXRhLmdsdGZFeHRlbnNpb25zIHx8IHt9O1xuICAgICAgICAgICAgICAgIG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9uc1tuYW1lXSA9IG9iamVjdERlZi5leHRlbnNpb25zW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3QzRHxNYXRlcmlhbHxCdWZmZXJHZW9tZXRyeX0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtHTFRGLmRlZmluaXRpb259IGdsdGZEZWZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKG9iamVjdCwgZ2x0ZkRlZikge1xuICAgICAgICBpZiAoZ2x0ZkRlZi5leHRyYXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBnbHRmRGVmLmV4dHJhcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG9iamVjdC51c2VyRGF0YSwgZ2x0ZkRlZi5leHRyYXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IElnbm9yaW5nIHByaW1pdGl2ZSB0eXBlIC5leHRyYXMsICcgKyBnbHRmRGVmLmV4dHJhcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI21vcnBoLXRhcmdldHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtBcnJheTxHTFRGLlRhcmdldD59IHRhcmdldHNcbiAgICAgKiBAcGFyYW0ge0dMVEZQYXJzZXJ9IHBhcnNlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QnVmZmVyR2VvbWV0cnk+fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZE1vcnBoVGFyZ2V0cyhnZW9tZXRyeSwgdGFyZ2V0cywgcGFyc2VyKSB7XG4gICAgICAgIHZhciBoYXNNb3JwaFBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNNb3JwaE5vcm1hbCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQuUE9TSVRJT04gIT09IHVuZGVmaW5lZCkgaGFzTW9ycGhQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkKSBoYXNNb3JwaE5vcm1hbCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChoYXNNb3JwaFBvc2l0aW9uICYmIGhhc01vcnBoTm9ybWFsKSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzTW9ycGhQb3NpdGlvbiAmJiAhaGFzTW9ycGhOb3JtYWwpIHJldHVybiBQcm9taXNlLnJlc29sdmUoZ2VvbWV0cnkpO1xuXG4gICAgICAgIHZhciBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMgPSBbXTtcbiAgICAgICAgdmFyIHBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoaGFzTW9ycGhQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBwZW5kaW5nQWNjZXNzb3IgPVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuUE9TSVRJT04gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnYWNjZXNzb3InLCB0YXJnZXQuUE9TSVRJT04pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cbiAgICAgICAgICAgICAgICBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMucHVzaChwZW5kaW5nQWNjZXNzb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzTW9ycGhOb3JtYWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGVuZGluZ0FjY2Vzc29yID1cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlci5nZXREZXBlbmRlbmN5KCdhY2Nlc3NvcicsIHRhcmdldC5OT1JNQUwpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuXG4gICAgICAgICAgICAgICAgcGVuZGluZ05vcm1hbEFjY2Vzc29ycy5wdXNoKHBlbmRpbmdBY2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1Byb21pc2UuYWxsKHBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyksIFByb21pc2UuYWxsKHBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMpXSkudGhlbihmdW5jdGlvbiAoXG4gICAgICAgICAgICBhY2Nlc3NvcnNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgbW9ycGhQb3NpdGlvbnMgPSBhY2Nlc3NvcnNbMF07XG4gICAgICAgICAgICB2YXIgbW9ycGhOb3JtYWxzID0gYWNjZXNzb3JzWzFdO1xuXG4gICAgICAgICAgICBpZiAoaGFzTW9ycGhQb3NpdGlvbikgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uID0gbW9ycGhQb3NpdGlvbnM7XG4gICAgICAgICAgICBpZiAoaGFzTW9ycGhOb3JtYWwpIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgPSBtb3JwaE5vcm1hbHM7XG4gICAgICAgICAgICBnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtNZXNofSBtZXNoXG4gICAgICogQHBhcmFtIHtHTFRGLk1lc2h9IG1lc2hEZWZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVNb3JwaFRhcmdldHMobWVzaCwgbWVzaERlZikge1xuICAgICAgICBtZXNoLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG4gICAgICAgIGlmIChtZXNoRGVmLndlaWdodHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbWVzaERlZi53ZWlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tpXSA9IG1lc2hEZWYud2VpZ2h0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC5leHRyYXMgaGFzIHVzZXItZGVmaW5lZCBkYXRhLCBzbyBjaGVjayB0aGF0IC5leHRyYXMudGFyZ2V0TmFtZXMgaXMgYW4gYXJyYXkuXG4gICAgICAgIGlmIChtZXNoRGVmLmV4dHJhcyAmJiBBcnJheS5pc0FycmF5KG1lc2hEZWYuZXh0cmFzLnRhcmdldE5hbWVzKSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldE5hbWVzID0gbWVzaERlZi5leHRyYXMudGFyZ2V0TmFtZXM7XG5cbiAgICAgICAgICAgIGlmIChtZXNoLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5sZW5ndGggPT09IHRhcmdldE5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG1lc2gubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0YXJnZXROYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2gubW9ycGhUYXJnZXREaWN0aW9uYXJ5W3RhcmdldE5hbWVzW2ldXSA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IEludmFsaWQgZXh0cmFzLnRhcmdldE5hbWVzIGxlbmd0aC4gSWdub3JpbmcgbmFtZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVLZXkocHJpbWl0aXZlRGVmKSB7XG4gICAgICAgIHZhciBkcmFjb0V4dGVuc2lvbiA9IHByaW1pdGl2ZURlZi5leHRlbnNpb25zICYmIHByaW1pdGl2ZURlZi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT05dO1xuICAgICAgICB2YXIgZ2VvbWV0cnlLZXk7XG5cbiAgICAgICAgaWYgKGRyYWNvRXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICBnZW9tZXRyeUtleSA9XG4gICAgICAgICAgICAgICAgJ2RyYWNvOicgK1xuICAgICAgICAgICAgICAgIGRyYWNvRXh0ZW5zaW9uLmJ1ZmZlclZpZXcgK1xuICAgICAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICAgICAgZHJhY29FeHRlbnNpb24uaW5kaWNlcyArXG4gICAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgICBjcmVhdGVBdHRyaWJ1dGVzS2V5KGRyYWNvRXh0ZW5zaW9uLmF0dHJpYnV0ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2VvbWV0cnlLZXkgPVxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZURlZi5pbmRpY2VzICsgJzonICsgY3JlYXRlQXR0cmlidXRlc0tleShwcmltaXRpdmVEZWYuYXR0cmlidXRlcykgKyAnOicgKyBwcmltaXRpdmVEZWYubW9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZW9tZXRyeUtleTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVzS2V5KGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXNLZXkgPSAnJztcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnNvcnQoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXNLZXkgKz0ga2V5c1tpXSArICc6JyArIGF0dHJpYnV0ZXNba2V5c1tpXV0gKyAnOyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXR0cmlidXRlc0tleTtcbiAgICB9XG5cbiAgICAvKiBHTFRGIFBBUlNFUiAqL1xuXG4gICAgZnVuY3Rpb24gR0xURlBhcnNlcihqc29uLCBleHRlbnNpb25zLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuanNvbiA9IGpzb24gfHwge307XG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMgfHwge307XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgLy8gbG9hZGVyIG9iamVjdCBjYWNoZVxuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IEdMVEZSZWdpc3RyeSgpO1xuXG4gICAgICAgIC8vIEJ1ZmZlckdlb21ldHJ5IGNhY2hpbmdcbiAgICAgICAgdGhpcy5wcmltaXRpdmVDYWNoZSA9IHt9O1xuXG4gICAgICAgIHRoaXMudGV4dHVyZUxvYWRlciA9IG5ldyBUZXh0dXJlTG9hZGVyKHRoaXMub3B0aW9ucy5tYW5hZ2VyKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlTG9hZGVyLnNldENyb3NzT3JpZ2luKHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbik7XG5cbiAgICAgICAgdGhpcy5maWxlTG9hZGVyID0gbmV3IEZpbGVMb2FkZXIodGhpcy5vcHRpb25zLm1hbmFnZXIpO1xuICAgICAgICB0aGlzLmZpbGVMb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCdhcnJheWJ1ZmZlcicpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gPT09ICd1c2UtY3JlZGVudGlhbHMnKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVMb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAob25Mb2FkLCBvbkVycm9yKSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cbiAgICAgICAgLy8gQ2xlYXIgdGhlIGxvYWRlciBjYWNoZVxuICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZUFsbCgpO1xuXG4gICAgICAgIC8vIE1hcmsgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZVxuICAgICAgICB0aGlzLm1hcmtEZWZzKCk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW3RoaXMuZ2V0RGVwZW5kZW5jaWVzKCdzY2VuZScpLCB0aGlzLmdldERlcGVuZGVuY2llcygnYW5pbWF0aW9uJyksIHRoaXMuZ2V0RGVwZW5kZW5jaWVzKCdjYW1lcmEnKV0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2NlbmU6IGRlcGVuZGVuY2llc1swXVtqc29uLnNjZW5lIHx8IDBdLFxuICAgICAgICAgICAgICAgICAgICBzY2VuZXM6IGRlcGVuZGVuY2llc1swXSxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uczogZGVwZW5kZW5jaWVzWzFdLFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFzOiBkZXBlbmRlbmNpZXNbMl0sXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0OiBqc29uLmFzc2V0LFxuICAgICAgICAgICAgICAgICAgICBwYXJzZXI6IHBhcnNlcixcbiAgICAgICAgICAgICAgICAgICAgdXNlckRhdGE6IHt9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YShleHRlbnNpb25zLCByZXN1bHQsIGpzb24pO1xuXG4gICAgICAgICAgICAgICAgYXNzaWduRXh0cmFzVG9Vc2VyRGF0YShyZXN1bHQsIGpzb24pO1xuXG4gICAgICAgICAgICAgICAgb25Mb2FkKHJlc3VsdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKG9uRXJyb3IpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNYXJrcyB0aGUgc3BlY2lhbCBub2Rlcy9tZXNoZXMgaW4ganNvbiBmb3IgZWZmaWNpZW50IHBhcnNlLlxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLm1hcmtEZWZzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZURlZnMgPSB0aGlzLmpzb24ubm9kZXMgfHwgW107XG4gICAgICAgIHZhciBza2luRGVmcyA9IHRoaXMuanNvbi5za2lucyB8fCBbXTtcbiAgICAgICAgdmFyIG1lc2hEZWZzID0gdGhpcy5qc29uLm1lc2hlcyB8fCBbXTtcblxuICAgICAgICB2YXIgbWVzaFJlZmVyZW5jZXMgPSB7fTtcbiAgICAgICAgdmFyIG1lc2hVc2VzID0ge307XG5cbiAgICAgICAgLy8gTm90aGluZyBpbiB0aGUgbm9kZSBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzIGEgQm9uZSBvciBhblxuICAgICAgICAvLyBPYmplY3QzRC4gVXNlIHRoZSBza2lucycgam9pbnQgcmVmZXJlbmNlcyB0byBtYXJrIGJvbmVzLlxuICAgICAgICBmb3IgKHZhciBza2luSW5kZXggPSAwLCBza2luTGVuZ3RoID0gc2tpbkRlZnMubGVuZ3RoOyBza2luSW5kZXggPCBza2luTGVuZ3RoOyBza2luSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIGpvaW50cyA9IHNraW5EZWZzW3NraW5JbmRleF0uam9pbnRzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBqb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgIG5vZGVEZWZzW2pvaW50c1tpXV0uaXNCb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1lc2hlcyBjYW4gKGFuZCBzaG91bGQpIGJlIHJldXNlZCBieSBtdWx0aXBsZSBub2RlcyBpbiBhIGdsVEYgYXNzZXQuIFRvXG4gICAgICAgIC8vIGF2b2lkIGhhdmluZyBtb3JlIHRoYW4gb25lIE1lc2ggd2l0aCB0aGUgc2FtZSBuYW1lLCBjb3VudFxuICAgICAgICAvLyByZWZlcmVuY2VzIGFuZCByZW5hbWUgaW5zdGFuY2VzIGJlbG93LlxuICAgICAgICAvL1xuICAgICAgICAvLyBFeGFtcGxlOiBDZXNpdW1NaWxrVHJ1Y2sgc2FtcGxlIG1vZGVsIHJldXNlcyBcIldoZWVsXCIgbWVzaGVzLlxuICAgICAgICBmb3IgKHZhciBub2RlSW5kZXggPSAwLCBub2RlTGVuZ3RoID0gbm9kZURlZnMubGVuZ3RoOyBub2RlSW5kZXggPCBub2RlTGVuZ3RoOyBub2RlSW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIG5vZGVEZWYgPSBub2RlRGVmc1tub2RlSW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAobm9kZURlZi5tZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzaFJlZmVyZW5jZXNbbm9kZURlZi5tZXNoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2hSZWZlcmVuY2VzW25vZGVEZWYubWVzaF0gPSBtZXNoVXNlc1tub2RlRGVmLm1lc2hdID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtZXNoUmVmZXJlbmNlc1tub2RlRGVmLm1lc2hdKys7XG5cbiAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIGluIHRoZSBtZXNoIGRlZmluaXRpb24gaW5kaWNhdGVzIHdoZXRoZXIgaXQgaXNcbiAgICAgICAgICAgICAgICAvLyBhIFNraW5uZWRNZXNoIG9yIE1lc2guIFVzZSB0aGUgbm9kZSdzIG1lc2ggcmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgLy8gdG8gbWFyayBTa2lubmVkTWVzaCBpZiBub2RlIGhhcyBza2luLlxuICAgICAgICAgICAgICAgIGlmIChub2RlRGVmLnNraW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtZXNoRGVmc1tub2RlRGVmLm1lc2hdLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuanNvbi5tZXNoUmVmZXJlbmNlcyA9IG1lc2hSZWZlcmVuY2VzO1xuICAgICAgICB0aGlzLmpzb24ubWVzaFVzZXMgPSBtZXNoVXNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgdGhlIHNwZWNpZmllZCBkZXBlbmRlbmN5IGFzeW5jaHJvbm91c2x5LCB3aXRoIGNhY2hpbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdDNEfE1hdGVyaWFsfFRIUkVFLlRleHR1cmV8QW5pbWF0aW9uQ2xpcHxBcnJheUJ1ZmZlcnxPYmplY3Q+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY3kgPSBmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gdHlwZSArICc6JyArIGluZGV4O1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IHRoaXMuY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgICBpZiAoIWRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NjZW5lJzpcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IHRoaXMubG9hZFNjZW5lKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdub2RlJzpcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IHRoaXMubG9hZE5vZGUoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ21lc2gnOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnYWNjZXNzb3InOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQWNjZXNzb3IoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2J1ZmZlclZpZXcnOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQnVmZmVyVmlldyhpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnYnVmZmVyJzpcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IHRoaXMubG9hZEJ1ZmZlcihpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbWF0ZXJpYWwnOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWF0ZXJpYWwoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkVGV4dHVyZShpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnc2tpbic6XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRTa2luKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQW5pbWF0aW9uKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdjYW1lcmEnOlxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQ2FtZXJhKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kgPSB0aGlzLmV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMXS5sb2FkTGlnaHQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgdHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2FjaGUuYWRkKGNhY2hlS2V5LCBkZXBlbmRlbmN5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXBlbmRlbmN5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxPYmplY3Q+Pn1cbiAgICAgKi9cbiAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5nZXREZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jaWVzID0gdGhpcy5jYWNoZS5nZXQodHlwZSk7XG5cbiAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGRlZnMgPSB0aGlzLmpzb25bdHlwZSArICh0eXBlID09PSAnbWVzaCcgPyAnZXMnIDogJ3MnKV0gfHwgW107XG5cbiAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgIGRlZnMubWFwKGZ1bmN0aW9uIChkZWYsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSh0eXBlLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuY2FjaGUuYWRkKHR5cGUsIGRlcGVuZGVuY2llcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2J1ZmZlcnMtYW5kLWJ1ZmZlci12aWV3c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJJbmRleFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVySW5kZXgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlckRlZiA9IHRoaXMuanNvbi5idWZmZXJzW2J1ZmZlckluZGV4XTtcbiAgICAgICAgdmFyIGxvYWRlciA9IHRoaXMuZmlsZUxvYWRlcjtcblxuICAgICAgICBpZiAoYnVmZmVyRGVmLnR5cGUgJiYgYnVmZmVyRGVmLnR5cGUgIT09ICdhcnJheWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVEhSRUUuR0xURkxvYWRlcjogJyArIGJ1ZmZlckRlZi50eXBlICsgJyBidWZmZXIgdHlwZSBpcyBub3Qgc3VwcG9ydGVkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgcHJlc2VudCwgR0xCIGNvbnRhaW5lciBpcyByZXF1aXJlZCB0byBiZSB0aGUgZmlyc3QgYnVmZmVyLlxuICAgICAgICBpZiAoYnVmZmVyRGVmLnVyaSA9PT0gdW5kZWZpbmVkICYmIGJ1ZmZlckluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURl0uYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgbG9hZGVyLmxvYWQocmVzb2x2ZVVSTChidWZmZXJEZWYudXJpLCBvcHRpb25zLnBhdGgpLCByZXNvbHZlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBGYWlsZWQgdG8gbG9hZCBidWZmZXIgXCInICsgYnVmZmVyRGVmLnVyaSArICdcIi4nKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJ1ZmZlclZpZXdJbmRleFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXJWaWV3ID0gZnVuY3Rpb24gKGJ1ZmZlclZpZXdJbmRleCkge1xuICAgICAgICB2YXIgYnVmZmVyVmlld0RlZiA9IHRoaXMuanNvbi5idWZmZXJWaWV3c1tidWZmZXJWaWV3SW5kZXhdO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koJ2J1ZmZlcicsIGJ1ZmZlclZpZXdEZWYuYnVmZmVyKS50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIHZhciBieXRlTGVuZ3RoID0gYnVmZmVyVmlld0RlZi5ieXRlTGVuZ3RoIHx8IDA7XG4gICAgICAgICAgICB2YXIgYnl0ZU9mZnNldCA9IGJ1ZmZlclZpZXdEZWYuYnl0ZU9mZnNldCB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2FjY2Vzc29yc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhY2Nlc3NvckluZGV4XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRBY2Nlc3NvciA9IGZ1bmN0aW9uIChhY2Nlc3NvckluZGV4KSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcblxuICAgICAgICB2YXIgYWNjZXNzb3JEZWYgPSB0aGlzLmpzb24uYWNjZXNzb3JzW2FjY2Vzc29ySW5kZXhdO1xuXG4gICAgICAgIGlmIChhY2Nlc3NvckRlZi5idWZmZXJWaWV3ID09PSB1bmRlZmluZWQgJiYgYWNjZXNzb3JEZWYuc3BhcnNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlbXB0eSBhY2Nlc3NvcnMsIHdoaWNoIG1heSBiZSB1c2VkIHRvIGRlY2xhcmUgcnVudGltZVxuICAgICAgICAgICAgLy8gaW5mb3JtYXRpb24gYWJvdXQgYXR0cmlidXRlcyBjb21pbmcgZnJvbSBhbm90aGVyIHNvdXJjZSAoZS5nLiBEcmFjb1xuICAgICAgICAgICAgLy8gY29tcHJlc3Npb24gZXh0ZW5zaW9uKS5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGVuZGluZ0J1ZmZlclZpZXdzID0gW107XG5cbiAgICAgICAgaWYgKGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGVuZGluZ0J1ZmZlclZpZXdzLnB1c2godGhpcy5nZXREZXBlbmRlbmN5KCdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuYnVmZmVyVmlldykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVuZGluZ0J1ZmZlclZpZXdzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWNjZXNzb3JEZWYuc3BhcnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKHRoaXMuZ2V0RGVwZW5kZW5jeSgnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmJ1ZmZlclZpZXcpKTtcbiAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKHRoaXMuZ2V0RGVwZW5kZW5jeSgnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLnNwYXJzZS52YWx1ZXMuYnVmZmVyVmlldykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmdCdWZmZXJWaWV3cykudGhlbihmdW5jdGlvbiAoYnVmZmVyVmlld3MpIHtcbiAgICAgICAgICAgIHZhciBidWZmZXJWaWV3ID0gYnVmZmVyVmlld3NbMF07XG5cbiAgICAgICAgICAgIHZhciBpdGVtU2l6ZSA9IFdFQkdMX1RZUEVfU0laRVNbYWNjZXNzb3JEZWYudHlwZV07XG4gICAgICAgICAgICB2YXIgVHlwZWRBcnJheSA9IFdFQkdMX0NPTVBPTkVOVF9UWVBFU1thY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlXTtcblxuICAgICAgICAgICAgLy8gRm9yIFZFQzM6IGl0ZW1TaXplIGlzIDMsIGVsZW1lbnRCeXRlcyBpcyA0LCBpdGVtQnl0ZXMgaXMgMTIuXG4gICAgICAgICAgICB2YXIgZWxlbWVudEJ5dGVzID0gVHlwZWRBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAgICAgICAgIHZhciBpdGVtQnl0ZXMgPSBlbGVtZW50Qnl0ZXMgKiBpdGVtU2l6ZTtcbiAgICAgICAgICAgIHZhciBieXRlT2Zmc2V0ID0gYWNjZXNzb3JEZWYuYnl0ZU9mZnNldCB8fCAwO1xuICAgICAgICAgICAgdmFyIGJ5dGVTdHJpZGUgPVxuICAgICAgICAgICAgICAgIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCA/IGpzb24uYnVmZmVyVmlld3NbYWNjZXNzb3JEZWYuYnVmZmVyVmlld10uYnl0ZVN0cmlkZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkID0gYWNjZXNzb3JEZWYubm9ybWFsaXplZCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBhcnJheSwgYnVmZmVyQXR0cmlidXRlO1xuXG4gICAgICAgICAgICAvLyBUaGUgYnVmZmVyIGlzIG5vdCBpbnRlcmxlYXZlZCBpZiB0aGUgc3RyaWRlIGlzIHRoZSBpdGVtIHNpemUgaW4gYnl0ZXMuXG4gICAgICAgICAgICBpZiAoYnl0ZVN0cmlkZSAmJiBieXRlU3RyaWRlICE9PSBpdGVtQnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBFYWNoIFwic2xpY2VcIiBvZiB0aGUgYnVmZmVyLCBhcyBkZWZpbmVkIGJ5ICdjb3VudCcgZWxlbWVudHMgb2YgJ2J5dGVTdHJpZGUnIGJ5dGVzLCBnZXRzIGl0cyBvd24gSW50ZXJsZWF2ZWRCdWZmZXJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCBJQkEuY291bnQgcmVmbGVjdHMgYWNjZXNzb3IuY291bnQgcHJvcGVybHlcbiAgICAgICAgICAgICAgICB2YXIgaWJTbGljZSA9IE1hdGguZmxvb3IoYnl0ZU9mZnNldCAvIGJ5dGVTdHJpZGUpO1xuICAgICAgICAgICAgICAgIHZhciBpYkNhY2hlS2V5ID1cbiAgICAgICAgICAgICAgICAgICAgJ0ludGVybGVhdmVkQnVmZmVyOicgK1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICtcbiAgICAgICAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JEZWYuY29tcG9uZW50VHlwZSArXG4gICAgICAgICAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICAgICAgICAgIGliU2xpY2UgK1xuICAgICAgICAgICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvckRlZi5jb3VudDtcbiAgICAgICAgICAgICAgICB2YXIgaWIgPSBwYXJzZXIuY2FjaGUuZ2V0KGliQ2FjaGVLZXkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpYikge1xuICAgICAgICAgICAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlZEFycmF5KFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyVmlldyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGliU2xpY2UgKiBieXRlU3RyaWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgKGFjY2Vzc29yRGVmLmNvdW50ICogYnl0ZVN0cmlkZSkgLyBlbGVtZW50Qnl0ZXNcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJbnRlZ2VyIHBhcmFtZXRlcnMgdG8gSUIvSUJBIGFyZSBpbiBhcnJheSBlbGVtZW50cywgbm90IGJ5dGVzLlxuICAgICAgICAgICAgICAgICAgICBpYiA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlcihhcnJheSwgYnl0ZVN0cmlkZSAvIGVsZW1lbnRCeXRlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNhY2hlLmFkZChpYkNhY2hlS2V5LCBpYik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlID0gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICBpYixcbiAgICAgICAgICAgICAgICAgICAgaXRlbVNpemUsXG4gICAgICAgICAgICAgICAgICAgIChieXRlT2Zmc2V0ICUgYnl0ZVN0cmlkZSkgLyBlbGVtZW50Qnl0ZXMsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyVmlldyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhcnJheSA9IG5ldyBUeXBlZEFycmF5KGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoYnVmZmVyVmlldywgYnl0ZU9mZnNldCwgYWNjZXNzb3JEZWYuY291bnQgKiBpdGVtU2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI3NwYXJzZS1hY2Nlc3NvcnNcbiAgICAgICAgICAgIGlmIChhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtU2l6ZUluZGljZXMgPSBXRUJHTF9UWVBFX1NJWkVTLlNDQUxBUjtcbiAgICAgICAgICAgICAgICB2YXIgVHlwZWRBcnJheUluZGljZXMgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuY29tcG9uZW50VHlwZV07XG5cbiAgICAgICAgICAgICAgICB2YXIgYnl0ZU9mZnNldEluZGljZXMgPSBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXRWYWx1ZXMgPSBhY2Nlc3NvckRlZi5zcGFyc2UudmFsdWVzLmJ5dGVPZmZzZXQgfHwgMDtcblxuICAgICAgICAgICAgICAgIHZhciBzcGFyc2VJbmRpY2VzID0gbmV3IFR5cGVkQXJyYXlJbmRpY2VzKFxuICAgICAgICAgICAgICAgICAgICBidWZmZXJWaWV3c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldEluZGljZXMsXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yRGVmLnNwYXJzZS5jb3VudCAqIGl0ZW1TaXplSW5kaWNlc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdmFyIHNwYXJzZVZhbHVlcyA9IG5ldyBUeXBlZEFycmF5KFxuICAgICAgICAgICAgICAgICAgICBidWZmZXJWaWV3c1syXSxcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldFZhbHVlcyxcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlclZpZXcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbCBBcnJheUJ1ZmZlciwgaWYgdGhlIGJ1ZmZlclZpZXcgd2Fzbid0IGluaXRpYWxpemVkIHdpdGggemVyb2VzLlxuICAgICAgICAgICAgICAgICAgICBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyQXR0cmlidXRlLmFycmF5LnNsaWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJBdHRyaWJ1dGUubm9ybWFsaXplZFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHNwYXJzZUluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzcGFyc2VJbmRpY2VzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZS5zZXRYKGluZGV4LCBzcGFyc2VWYWx1ZXNbaSAqIGl0ZW1TaXplXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtU2l6ZSA+PSAyKSBidWZmZXJBdHRyaWJ1dGUuc2V0WShpbmRleCwgc3BhcnNlVmFsdWVzW2kgKiBpdGVtU2l6ZSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1TaXplID49IDMpIGJ1ZmZlckF0dHJpYnV0ZS5zZXRaKGluZGV4LCBzcGFyc2VWYWx1ZXNbaSAqIGl0ZW1TaXplICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVNpemUgPj0gNCkgYnVmZmVyQXR0cmlidXRlLnNldFcoaW5kZXgsIHNwYXJzZVZhbHVlc1tpICogaXRlbVNpemUgKyAzXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtU2l6ZSA+PSA1KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBpdGVtU2l6ZSBpbiBzcGFyc2UgQnVmZmVyQXR0cmlidXRlLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlckF0dHJpYnV0ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCN0ZXh0dXJlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLlRleHR1cmU+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKHRleHR1cmVJbmRleCkge1xuICAgICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgdGV4dHVyZUxvYWRlciA9IHRoaXMudGV4dHVyZUxvYWRlcjtcblxuICAgICAgICB2YXIgVVJMID0gc2VsZi5VUkwgfHwgc2VsZi53ZWJraXRVUkw7XG5cbiAgICAgICAgdmFyIHRleHR1cmVEZWYgPSBqc29uLnRleHR1cmVzW3RleHR1cmVJbmRleF07XG5cbiAgICAgICAgdmFyIHRleHR1cmVFeHRlbnNpb25zID0gdGV4dHVyZURlZi5leHRlbnNpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciBzb3VyY2U7XG5cbiAgICAgICAgaWYgKHRleHR1cmVFeHRlbnNpb25zW0VYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REU10pIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IGpzb24uaW1hZ2VzW3RleHR1cmVFeHRlbnNpb25zW0VYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REU10uc291cmNlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IGpzb24uaW1hZ2VzW3RleHR1cmVEZWYuc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzb3VyY2VVUkkgPSBzb3VyY2UudXJpO1xuICAgICAgICB2YXIgaXNPYmplY3RVUkwgPSBmYWxzZTtcblxuICAgICAgICBpZiAoc291cmNlLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gTG9hZCBiaW5hcnkgaW1hZ2UgZGF0YSBmcm9tIGJ1ZmZlclZpZXcsIGlmIHByb3ZpZGVkLlxuXG4gICAgICAgICAgICBzb3VyY2VVUkkgPSBwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnYnVmZmVyVmlldycsIHNvdXJjZS5idWZmZXJWaWV3KS50aGVuKGZ1bmN0aW9uIChidWZmZXJWaWV3KSB7XG4gICAgICAgICAgICAgICAgaXNPYmplY3RVUkwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2J1ZmZlclZpZXddLCB7IHR5cGU6IHNvdXJjZS5taW1lVHlwZSB9KTtcbiAgICAgICAgICAgICAgICBzb3VyY2VVUkkgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2VVUkk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc291cmNlVVJJKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVVSSSkge1xuICAgICAgICAgICAgICAgIC8vIExvYWQgVGV4dHVyZSByZXNvdXJjZS5cblxuICAgICAgICAgICAgICAgIHZhciBsb2FkZXIgPSBvcHRpb25zLm1hbmFnZXIuZ2V0SGFuZGxlcihzb3VyY2VVUkkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFsb2FkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gdGV4dHVyZUV4dGVuc2lvbnNbRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTXVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZXIuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFNdLmRkc0xvYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0ZXh0dXJlTG9hZGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKHJlc29sdmVVUkwoc291cmNlVVJJLCBvcHRpb25zLnBhdGgpLCByZXNvbHZlLCB1bmRlZmluZWQsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCByZXNvdXJjZXMgYW5kIGNvbmZpZ3VyZSBUZXh0dXJlLlxuXG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0VVJMID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoc291cmNlVVJJKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmZsaXBZID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAodGV4dHVyZURlZi5uYW1lKSB0ZXh0dXJlLm5hbWUgPSB0ZXh0dXJlRGVmLm5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgdW5rbm93biBtaW1lIHR5cGVzLCBsaWtlIEREUyBmaWxlcy5cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLm1pbWVUeXBlIGluIE1JTUVfVFlQRV9GT1JNQVRTKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUuZm9ybWF0ID0gTUlNRV9UWVBFX0ZPUk1BVFNbc291cmNlLm1pbWVUeXBlXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlcnMgPSBqc29uLnNhbXBsZXJzIHx8IHt9O1xuICAgICAgICAgICAgICAgIHZhciBzYW1wbGVyID0gc2FtcGxlcnNbdGV4dHVyZURlZi5zYW1wbGVyXSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIHRleHR1cmUubWFnRmlsdGVyID0gV0VCR0xfRklMVEVSU1tzYW1wbGVyLm1hZ0ZpbHRlcl0gfHwgTGluZWFyRmlsdGVyO1xuICAgICAgICAgICAgICAgIHRleHR1cmUubWluRmlsdGVyID0gV0VCR0xfRklMVEVSU1tzYW1wbGVyLm1pbkZpbHRlcl0gfHwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyO1xuICAgICAgICAgICAgICAgIHRleHR1cmUud3JhcFMgPSBXRUJHTF9XUkFQUElOR1Nbc2FtcGxlci53cmFwU10gfHwgUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IFdFQkdMX1dSQVBQSU5HU1tzYW1wbGVyLndyYXBUXSB8fCBSZXBlYXRXcmFwcGluZztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFzeW5jaHJvbm91c2x5IGFzc2lnbnMgYSB0ZXh0dXJlIHRvIHRoZSBnaXZlbiBtYXRlcmlhbCBwYXJhbWV0ZXJzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXRlcmlhbFBhcmFtc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtYXBOYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcERlZlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUuYXNzaWduVGV4dHVyZSA9IGZ1bmN0aW9uIChtYXRlcmlhbFBhcmFtcywgbWFwTmFtZSwgbWFwRGVmKSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koJ3RleHR1cmUnLCBtYXBEZWYuaW5kZXgpLnRoZW4oZnVuY3Rpb24gKHRleHR1cmUpIHtcbiAgICAgICAgICAgIGlmICghdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtYXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FvTWFwJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW1pc3NpdmVNYXAnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtZXRhbG5lc3NNYXAnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdub3JtYWxNYXAnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3VnaG5lc3NNYXAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5mb3JtYXQgPSBSR0JGb3JtYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1hdGVyaWFscyBzYW1wbGUgYW9NYXAgZnJvbSBVViBzZXQgMSBhbmQgb3RoZXIgbWFwcyBmcm9tIFVWIHNldCAwIC0gdGhpcyBjYW4ndCBiZSBjb25maWd1cmVkXG4gICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSB3aWxsIGNvcHkgVVYgc2V0IDAgdG8gVVYgc2V0IDEgb24gZGVtYW5kIGZvciBhb01hcFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1hcERlZi50ZXhDb29yZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgbWFwRGVmLnRleENvb3JkICE9IDAgJiZcbiAgICAgICAgICAgICAgICAhKG1hcE5hbWUgPT09ICdhb01hcCcgJiYgbWFwRGVmLnRleENvb3JkID09IDEpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICdUSFJFRS5HTFRGTG9hZGVyOiBDdXN0b20gVVYgc2V0ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGVmLnRleENvb3JkICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgZm9yIHRleHR1cmUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBOYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgbm90IHlldCBzdXBwb3J0ZWQuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYXJzZXIuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID1cbiAgICAgICAgICAgICAgICAgICAgbWFwRGVmLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCA/IG1hcERlZi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IHBhcnNlci5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX1RFWFRVUkVfVFJBTlNGT1JNXS5leHRlbmRUZXh0dXJlKHRleHR1cmUsIHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbFBhcmFtc1ttYXBOYW1lXSA9IHRleHR1cmU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGZpbmFsIG1hdGVyaWFsIHRvIGEgTWVzaCwgTGluZSwgb3IgUG9pbnRzIGluc3RhbmNlLiBUaGUgaW5zdGFuY2VcbiAgICAgKiBhbHJlYWR5IGhhcyBhIG1hdGVyaWFsIChnZW5lcmF0ZWQgZnJvbSB0aGUgZ2xURiBtYXRlcmlhbCBvcHRpb25zIGFsb25lKVxuICAgICAqIGJ1dCByZXVzZSBvZiB0aGUgc2FtZSBnbFRGIG1hdGVyaWFsIG1heSByZXF1aXJlIG11bHRpcGxlIHRocmVlanMgbWF0ZXJpYWxzXG4gICAgICogdG8gYWNjb21vZGF0ZSBkaWZmZXJlbnQgcHJpbWl0aXZlIHR5cGVzLCBkZWZpbmVzLCBldGMuIE5ldyBtYXRlcmlhbHMgd2lsbFxuICAgICAqIGJlIGNyZWF0ZWQgaWYgbmVjZXNzYXJ5LCBhbmQgcmV1c2VkIGZyb20gYSBjYWNoZS5cbiAgICAgKiBAcGFyYW0gIHtPYmplY3QzRH0gbWVzaCBNZXNoLCBMaW5lLCBvciBQb2ludHMgaW5zdGFuY2UuXG4gICAgICovXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUuYXNzaWduRmluYWxNYXRlcmlhbCA9IGZ1bmN0aW9uIChtZXNoKSB7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IG1lc2guZ2VvbWV0cnk7XG4gICAgICAgIHZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG5cbiAgICAgICAgdmFyIHVzZVZlcnRleFRhbmdlbnRzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy50YW5nZW50ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1c2VWZXJ0ZXhDb2xvcnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1c2VGbGF0U2hhZGluZyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1c2VTa2lubmluZyA9IG1lc2guaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZTtcbiAgICAgICAgdmFyIHVzZU1vcnBoVGFyZ2V0cyA9IE9iamVjdC5rZXlzKGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykubGVuZ3RoID4gMDtcbiAgICAgICAgdmFyIHVzZU1vcnBoTm9ybWFscyA9IHVzZU1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG1lc2guaXNQb2ludHMpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZUtleSA9ICdQb2ludHNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcblxuICAgICAgICAgICAgdmFyIHBvaW50c01hdGVyaWFsID0gdGhpcy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgICAgICBpZiAoIXBvaW50c01hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwgPSBuZXcgUG9pbnRzTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICBNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHBvaW50c01hdGVyaWFsLCBtYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwuY29sb3IuY29weShtYXRlcmlhbC5jb2xvcik7XG4gICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwubWFwID0gbWF0ZXJpYWwubWFwO1xuICAgICAgICAgICAgICAgIHBvaW50c01hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGZhbHNlOyAvLyBnbFRGIHNwZWMgc2F5cyBwb2ludHMgc2hvdWxkIGJlIDFweFxuXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGQoY2FjaGVLZXksIHBvaW50c01hdGVyaWFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0ZXJpYWwgPSBwb2ludHNNYXRlcmlhbDtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNoLmlzTGluZSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlS2V5ID0gJ0xpbmVCYXNpY01hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkO1xuXG4gICAgICAgICAgICB2YXIgbGluZU1hdGVyaWFsID0gdGhpcy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgICAgICBpZiAoIWxpbmVNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIGxpbmVNYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgIE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwobGluZU1hdGVyaWFsLCBtYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgbGluZU1hdGVyaWFsLmNvbG9yLmNvcHkobWF0ZXJpYWwuY29sb3IpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGQoY2FjaGVLZXksIGxpbmVNYXRlcmlhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gbGluZU1hdGVyaWFsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xvbmUgdGhlIG1hdGVyaWFsIGlmIGl0IHdpbGwgYmUgbW9kaWZpZWRcbiAgICAgICAgaWYgKHVzZVZlcnRleFRhbmdlbnRzIHx8IHVzZVZlcnRleENvbG9ycyB8fCB1c2VGbGF0U2hhZGluZyB8fCB1c2VTa2lubmluZyB8fCB1c2VNb3JwaFRhcmdldHMpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZUtleSA9ICdDbG9uZWRNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZCArICc6JztcblxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsKSBjYWNoZUtleSArPSAnc3BlY3VsYXItZ2xvc3NpbmVzczonO1xuICAgICAgICAgICAgaWYgKHVzZVNraW5uaW5nKSBjYWNoZUtleSArPSAnc2tpbm5pbmc6JztcbiAgICAgICAgICAgIGlmICh1c2VWZXJ0ZXhUYW5nZW50cykgY2FjaGVLZXkgKz0gJ3ZlcnRleC10YW5nZW50czonO1xuICAgICAgICAgICAgaWYgKHVzZVZlcnRleENvbG9ycykgY2FjaGVLZXkgKz0gJ3ZlcnRleC1jb2xvcnM6JztcbiAgICAgICAgICAgIGlmICh1c2VGbGF0U2hhZGluZykgY2FjaGVLZXkgKz0gJ2ZsYXQtc2hhZGluZzonO1xuICAgICAgICAgICAgaWYgKHVzZU1vcnBoVGFyZ2V0cykgY2FjaGVLZXkgKz0gJ21vcnBoLXRhcmdldHM6JztcbiAgICAgICAgICAgIGlmICh1c2VNb3JwaE5vcm1hbHMpIGNhY2hlS2V5ICs9ICdtb3JwaC1ub3JtYWxzOic7XG5cbiAgICAgICAgICAgIHZhciBjYWNoZWRNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgICAgICAgaWYgKCFjYWNoZWRNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIGNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWwuY2xvbmUoKTtcblxuICAgICAgICAgICAgICAgIGlmICh1c2VTa2lubmluZykgY2FjaGVkTWF0ZXJpYWwuc2tpbm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh1c2VWZXJ0ZXhUYW5nZW50cykgY2FjaGVkTWF0ZXJpYWwudmVydGV4VGFuZ2VudHMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICh1c2VWZXJ0ZXhDb2xvcnMpIGNhY2hlZE1hdGVyaWFsLnZlcnRleENvbG9ycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHVzZUZsYXRTaGFkaW5nKSBjYWNoZWRNYXRlcmlhbC5mbGF0U2hhZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHVzZU1vcnBoVGFyZ2V0cykgY2FjaGVkTWF0ZXJpYWwubW9ycGhUYXJnZXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAodXNlTW9ycGhOb3JtYWxzKSBjYWNoZWRNYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGQoY2FjaGVLZXksIGNhY2hlZE1hdGVyaWFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0ZXJpYWwgPSBjYWNoZWRNYXRlcmlhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdvcmthcm91bmRzIGZvciBtZXNoIGFuZCBnZW9tZXRyeVxuXG4gICAgICAgIGlmIChtYXRlcmlhbC5hb01hcCAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2MiA9PT0gdW5kZWZpbmVkICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCd1djInLCBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzExNDM4I2lzc3VlY29tbWVudC01MDcwMDM5OTVcbiAgICAgICAgaWYgKG1hdGVyaWFsLm5vcm1hbFNjYWxlICYmICF1c2VWZXJ0ZXhUYW5nZW50cykge1xuICAgICAgICAgICAgbWF0ZXJpYWwubm9ybWFsU2NhbGUueSA9IC1tYXRlcmlhbC5ub3JtYWxTY2FsZS55O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlICYmICF1c2VWZXJ0ZXhUYW5nZW50cykge1xuICAgICAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUueSA9IC1tYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZS55O1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzaC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI21hdGVyaWFsc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXRlcmlhbEluZGV4XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxNYXRlcmlhbD59XG4gICAgICovXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZE1hdGVyaWFsID0gZnVuY3Rpb24gKG1hdGVyaWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICAgICAgdmFyIG1hdGVyaWFsRGVmID0ganNvbi5tYXRlcmlhbHNbbWF0ZXJpYWxJbmRleF07XG5cbiAgICAgICAgdmFyIG1hdGVyaWFsVHlwZTtcbiAgICAgICAgdmFyIG1hdGVyaWFsUGFyYW1zID0ge307XG4gICAgICAgIHZhciBtYXRlcmlhbEV4dGVuc2lvbnMgPSBtYXRlcmlhbERlZi5leHRlbnNpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsRXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1NdKSB7XG4gICAgICAgICAgICB2YXIgc2dFeHRlbnNpb24gPSBleHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTU107XG4gICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSBzZ0V4dGVuc2lvbi5nZXRNYXRlcmlhbFR5cGUoKTtcbiAgICAgICAgICAgIHBlbmRpbmcucHVzaChzZ0V4dGVuc2lvbi5leHRlbmRQYXJhbXMobWF0ZXJpYWxQYXJhbXMsIG1hdGVyaWFsRGVmLCBwYXJzZXIpKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRlcmlhbEV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUXSkge1xuICAgICAgICAgICAgdmFyIGttdUV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUXTtcbiAgICAgICAgICAgIG1hdGVyaWFsVHlwZSA9IGttdUV4dGVuc2lvbi5nZXRNYXRlcmlhbFR5cGUoKTtcbiAgICAgICAgICAgIHBlbmRpbmcucHVzaChrbXVFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKG1hdGVyaWFsUGFyYW1zLCBtYXRlcmlhbERlZiwgcGFyc2VyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTcGVjaWZpY2F0aW9uOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI21ldGFsbGljLXJvdWdobmVzcy1tYXRlcmlhbFxuXG4gICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuICAgICAgICAgICAgdmFyIG1ldGFsbGljUm91Z2huZXNzID0gbWF0ZXJpYWxEZWYucGJyTWV0YWxsaWNSb3VnaG5lc3MgfHwge307XG5cbiAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IENvbG9yKDEuMCwgMS4wLCAxLjApO1xuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yKSkge1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvcjtcblxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheShhcnJheSk7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WzNdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5tZXRhbG5lc3MgPVxuICAgICAgICAgICAgICAgIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciA6IDEuMDtcbiAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnJvdWdobmVzcyA9XG4gICAgICAgICAgICAgICAgbWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgOiAxLjA7XG5cbiAgICAgICAgICAgIGlmIChtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdtZXRhbG5lc3NNYXAnLCBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAncm91Z2huZXNzTWFwJywgbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0ZXJpYWxEZWYuZG91YmxlU2lkZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnNpZGUgPSBEb3VibGVTaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFscGhhTW9kZSA9IG1hdGVyaWFsRGVmLmFscGhhTW9kZSB8fCBBTFBIQV9NT0RFUy5PUEFRVUU7XG5cbiAgICAgICAgaWYgKGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuQkxFTkQpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8xNzcwNlxuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuTUFTSykge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmFscGhhVGVzdCA9IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbERlZi5hbHBoYUN1dG9mZiA6IDAuNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBNZXNoQmFzaWNNYXRlcmlhbCkge1xuICAgICAgICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5hc3NpZ25UZXh0dXJlKG1hdGVyaWFsUGFyYW1zLCAnbm9ybWFsTWFwJywgbWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZSkpO1xuXG4gICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKDEsIDEpO1xuXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWxEZWYubm9ybWFsVGV4dHVyZS5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMubm9ybWFsU2NhbGUuc2V0KG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsKSB7XG4gICAgICAgICAgICBwZW5kaW5nLnB1c2gocGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdhb01hcCcsIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUpKTtcblxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUuc3RyZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmFvTWFwSW50ZW5zaXR5ID0gbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRlcmlhbERlZi5lbWlzc2l2ZUZhY3RvciAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsVHlwZSAhPT0gTWVzaEJhc2ljTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IENvbG9yKCkuZnJvbUFycmF5KG1hdGVyaWFsRGVmLmVtaXNzaXZlRmFjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsKSB7XG4gICAgICAgICAgICBwZW5kaW5nLnB1c2gocGFyc2VyLmFzc2lnblRleHR1cmUobWF0ZXJpYWxQYXJhbXMsICdlbWlzc2l2ZU1hcCcsIG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGVyaWFsRXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfQ0xFQVJDT0FUXSkge1xuICAgICAgICAgICAgdmFyIGNsZWFyY29hdEV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX0NMRUFSQ09BVF07XG4gICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSBjbGVhcmNvYXRFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7XG4gICAgICAgICAgICBwZW5kaW5nLnB1c2goY2xlYXJjb2F0RXh0ZW5zaW9uLmV4dGVuZFBhcmFtcyhtYXRlcmlhbFBhcmFtcywgeyBleHRlbnNpb25zOiBtYXRlcmlhbEV4dGVuc2lvbnMgfSwgcGFyc2VyKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWw7XG5cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbFR5cGUgPT09IEdMVEZNZXNoU3RhbmRhcmRTR01hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBleHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTU10uY3JlYXRlTWF0ZXJpYWwobWF0ZXJpYWxQYXJhbXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBtYXRlcmlhbFR5cGUobWF0ZXJpYWxQYXJhbXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWxEZWYubmFtZSkgbWF0ZXJpYWwubmFtZSA9IG1hdGVyaWFsRGVmLm5hbWU7XG5cbiAgICAgICAgICAgIC8vIGJhc2VDb2xvclRleHR1cmUsIGVtaXNzaXZlVGV4dHVyZSwgYW5kIHNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUgdXNlIHNSR0IgZW5jb2RpbmcuXG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwubWFwKSBtYXRlcmlhbC5tYXAuZW5jb2RpbmcgPSBzUkdCRW5jb2Rpbmc7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuZW1pc3NpdmVNYXApIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xuXG4gICAgICAgICAgICBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKG1hdGVyaWFsLCBtYXRlcmlhbERlZik7XG5cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbERlZi5leHRlbnNpb25zKSBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoZXh0ZW5zaW9ucywgbWF0ZXJpYWwsIG1hdGVyaWFsRGVmKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnlcbiAgICAgKiBAcGFyYW0ge0dMVEYuUHJpbWl0aXZlfSBwcmltaXRpdmVEZWZcbiAgICAgKiBAcGFyYW0ge0dMVEZQYXJzZXJ9IHBhcnNlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVCb3VuZHMoZ2VvbWV0cnksIHByaW1pdGl2ZURlZiwgcGFyc2VyKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gcHJpbWl0aXZlRGVmLmF0dHJpYnV0ZXM7XG5cbiAgICAgICAgdmFyIGJveCA9IG5ldyBCb3gzKCk7XG5cbiAgICAgICAgaWYgKGF0dHJpYnV0ZXMuUE9TSVRJT04gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIGFjY2Vzc29yID0gcGFyc2VyLmpzb24uYWNjZXNzb3JzW2F0dHJpYnV0ZXMuUE9TSVRJT05dO1xuXG4gICAgICAgICAgICB2YXIgbWluID0gYWNjZXNzb3IubWluO1xuICAgICAgICAgICAgdmFyIG1heCA9IGFjY2Vzc29yLm1heDtcblxuICAgICAgICAgICAgLy8gZ2xURiByZXF1aXJlcyAnbWluJyBhbmQgJ21heCcsIGJ1dCBWUk0gKHdoaWNoIGV4dGVuZHMgZ2xURikgY3VycmVudGx5IGlnbm9yZXMgdGhhdCByZXF1aXJlbWVudC5cblxuICAgICAgICAgICAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkICYmIG1heCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYm94LnNldChuZXcgVmVjdG9yMyhtaW5bMF0sIG1pblsxXSwgbWluWzJdKSwgbmV3IFZlY3RvcjMobWF4WzBdLCBtYXhbMV0sIG1heFsyXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgbWluL21heCBwcm9wZXJ0aWVzIGZvciBhY2Nlc3NvciBQT1NJVElPTi4nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRzID0gcHJpbWl0aXZlRGVmLnRhcmdldHM7XG5cbiAgICAgICAgaWYgKHRhcmdldHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIG1heERpc3BsYWNlbWVudCA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgICAgICB2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjY2Vzc29yID0gcGFyc2VyLmpzb24uYWNjZXNzb3JzW3RhcmdldC5QT1NJVElPTl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW4gPSBhY2Nlc3Nvci5taW47XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBhY2Nlc3Nvci5tYXg7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZ2xURiByZXF1aXJlcyAnbWluJyBhbmQgJ21heCcsIGJ1dCBWUk0gKHdoaWNoIGV4dGVuZHMgZ2xURikgY3VycmVudGx5IGlnbm9yZXMgdGhhdCByZXF1aXJlbWVudC5cblxuICAgICAgICAgICAgICAgICAgICBpZiAobWluICE9PSB1bmRlZmluZWQgJiYgbWF4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IG1heCBvZiBhYnNvbHV0ZSBjb21wb25lbnRzIGJlY2F1c2UgdGFyZ2V0IHdlaWdodCBpcyBbLTEsMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3Rvci5zZXRYKE1hdGgubWF4KE1hdGguYWJzKG1pblswXSksIE1hdGguYWJzKG1heFswXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3Rvci5zZXRZKE1hdGgubWF4KE1hdGguYWJzKG1pblsxXSksIE1hdGguYWJzKG1heFsxXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3Rvci5zZXRaKE1hdGgubWF4KE1hdGguYWJzKG1pblsyXSksIE1hdGguYWJzKG1heFsyXSkpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogdGhpcyBhc3N1bWVzIHRoYXQgdGhlIHN1bSBvZiBhbGwgd2VpZ2h0cyBpcyBhdCBtb3N0IDEuIFRoaXMgaXNuJ3QgcXVpdGUgY29ycmVjdCAtIGl0J3MgbW9yZSBjb25zZXJ2YXRpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGFzc3VtZSB0aGF0IGVhY2ggdGFyZ2V0IGNhbiBoYXZlIGEgbWF4IHdlaWdodCBvZiAxLiBIb3dldmVyLCBmb3Igc29tZSB1c2UgY2FzZXMgLSBub3RhYmx5LCB3aGVuIG1vcnBoIHRhcmdldHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyZSB1c2VkIHRvIGltcGxlbWVudCBrZXktZnJhbWUgYW5pbWF0aW9ucyBhbmQgYXMgc3VjaCBvbmx5IHR3byBhcmUgYWN0aXZlIGF0IGEgdGltZSAtIHRoaXMgcmVzdWx0cyBpbiB2ZXJ5IGxhcmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBib3hlcy4gU28gZm9yIG5vdyB3ZSBtYWtlIGEgYm94IHRoYXQncyBzb21ldGltZXMgYSB0b3VjaCB0b28gc21hbGwgYnV0IGlzIGhvcGVmdWxseSBtb3N0bHkgb2YgcmVhc29uYWJsZSBzaXplLlxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4RGlzcGxhY2VtZW50Lm1heCh2ZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdUSFJFRS5HTFRGTG9hZGVyOiBNaXNzaW5nIG1pbi9tYXggcHJvcGVydGllcyBmb3IgYWNjZXNzb3IgUE9TSVRJT04uJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzIHBlciBjb21tZW50IGFib3ZlIHRoaXMgYm94IGlzbid0IGNvbnNlcnZhdGl2ZSwgYnV0IGhhcyBhIHJlYXNvbmFibGUgc2l6ZSBmb3IgYSB2ZXJ5IGxhcmdlIG51bWJlciBvZiBtb3JwaCB0YXJnZXRzLlxuICAgICAgICAgICAgYm94LmV4cGFuZEJ5VmVjdG9yKG1heERpc3BsYWNlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBnZW9tZXRyeS5ib3VuZGluZ0JveCA9IGJveDtcblxuICAgICAgICB2YXIgc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG4gICAgICAgIGJveC5nZXRDZW50ZXIoc3BoZXJlLmNlbnRlcik7XG4gICAgICAgIHNwaGVyZS5yYWRpdXMgPSBib3gubWluLmRpc3RhbmNlVG8oYm94Lm1heCkgLyAyO1xuXG4gICAgICAgIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID0gc3BoZXJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtHTFRGLlByaW1pdGl2ZX0gcHJpbWl0aXZlRGVmXG4gICAgICogQHBhcmFtIHtHTFRGUGFyc2VyfSBwYXJzZXJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEJ1ZmZlckdlb21ldHJ5Pn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKGdlb21ldHJ5LCBwcmltaXRpdmVEZWYsIHBhcnNlcikge1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHByaW1pdGl2ZURlZi5hdHRyaWJ1dGVzO1xuXG4gICAgICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICAgICAgZnVuY3Rpb24gYXNzaWduQXR0cmlidXRlQWNjZXNzb3IoYWNjZXNzb3JJbmRleCwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCdhY2Nlc3NvcicsIGFjY2Vzc29ySW5kZXgpLnRoZW4oZnVuY3Rpb24gKGFjY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGFjY2Vzc29yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgZ2x0ZkF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbZ2x0ZkF0dHJpYnV0ZU5hbWVdIHx8IGdsdGZBdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIC8vIFNraXAgYXR0cmlidXRlcyBhbHJlYWR5IHByb3ZpZGVkIGJ5IGUuZy4gRHJhY28gZXh0ZW5zaW9uLlxuICAgICAgICAgICAgaWYgKHRocmVlQXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSBjb250aW51ZTtcblxuICAgICAgICAgICAgcGVuZGluZy5wdXNoKGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKGF0dHJpYnV0ZXNbZ2x0ZkF0dHJpYnV0ZU5hbWVdLCB0aHJlZUF0dHJpYnV0ZU5hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmltaXRpdmVEZWYuaW5kaWNlcyAhPT0gdW5kZWZpbmVkICYmICFnZW9tZXRyeS5pbmRleCkge1xuICAgICAgICAgICAgdmFyIGFjY2Vzc29yID0gcGFyc2VyLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgcHJpbWl0aXZlRGVmLmluZGljZXMpLnRoZW4oZnVuY3Rpb24gKGFjY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkuc2V0SW5kZXgoYWNjZXNzb3IpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBlbmRpbmcucHVzaChhY2Nlc3Nvcik7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKGdlb21ldHJ5LCBwcmltaXRpdmVEZWYpO1xuXG4gICAgICAgIGNvbXB1dGVCb3VuZHMoZ2VvbWV0cnksIHByaW1pdGl2ZURlZiwgcGFyc2VyKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJpbWl0aXZlRGVmLnRhcmdldHMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYWRkTW9ycGhUYXJnZXRzKGdlb21ldHJ5LCBwcmltaXRpdmVEZWYudGFyZ2V0cywgcGFyc2VyKVxuICAgICAgICAgICAgICAgIDogZ2VvbWV0cnk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRyYXdNb2RlXG4gICAgICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9UcmlhbmdsZXNEcmF3TW9kZShnZW9tZXRyeSwgZHJhd01vZGUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcblxuICAgICAgICAvLyBnZW5lcmF0ZSBpbmRleCBpZiBub3QgcHJlc2VudFxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGluZGljZXMgPSBbXTtcblxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zaXRpb24uY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnkuc2V0SW5kZXgoaW5kaWNlcyk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVEhSRUUuR0xURkxvYWRlci50b1RyaWFuZ2xlc0RyYXdNb2RlKCk6IFVuZGVmaW5lZCBwb3NpdGlvbiBhdHRyaWJ1dGUuIFByb2Nlc3Npbmcgbm90IHBvc3NpYmxlLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vXG5cbiAgICAgICAgdmFyIG51bWJlck9mVHJpYW5nbGVzID0gaW5kZXguY291bnQgLSAyO1xuICAgICAgICB2YXIgbmV3SW5kaWNlcyA9IFtdO1xuXG4gICAgICAgIGlmIChkcmF3TW9kZSA9PT0gVHJpYW5nbGVGYW5EcmF3TW9kZSkge1xuICAgICAgICAgICAgLy8gZ2wuVFJJQU5HTEVfRkFOXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG51bWJlck9mVHJpYW5nbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WCgwKSk7XG4gICAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSkpO1xuICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBnbC5UUklBTkdMRV9TVFJJUFxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mVHJpYW5nbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSkpO1xuICAgICAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMikpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SW5kaWNlcy5sZW5ndGggLyAzICE9PSBudW1iZXJPZlRyaWFuZ2xlcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVEhSRUUuR0xURkxvYWRlci50b1RyaWFuZ2xlc0RyYXdNb2RlKCk6IFVuYWJsZSB0byBnZW5lcmF0ZSBjb3JyZWN0IGFtb3VudCBvZiB0cmlhbmdsZXMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBidWlsZCBmaW5hbCBnZW9tZXRyeVxuXG4gICAgICAgIHZhciBuZXdHZW9tZXRyeSA9IGdlb21ldHJ5LmNsb25lKCk7XG4gICAgICAgIG5ld0dlb21ldHJ5LnNldEluZGV4KG5ld0luZGljZXMpO1xuXG4gICAgICAgIHJldHVybiBuZXdHZW9tZXRyeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2dlb21ldHJ5XG4gICAgICpcbiAgICAgKiBDcmVhdGVzIEJ1ZmZlckdlb21ldHJpZXMgZnJvbSBwcmltaXRpdmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxHTFRGLlByaW1pdGl2ZT59IHByaW1pdGl2ZXNcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PEJ1ZmZlckdlb21ldHJ5Pj59XG4gICAgICovXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEdlb21ldHJpZXMgPSBmdW5jdGlvbiAocHJpbWl0aXZlcykge1xuICAgICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMucHJpbWl0aXZlQ2FjaGU7XG5cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRHJhY29QcmltaXRpdmUocHJpbWl0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OXVxuICAgICAgICAgICAgICAgIC5kZWNvZGVQcmltaXRpdmUocHJpbWl0aXZlLCBwYXJzZXIpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGdlb21ldHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKGdlb21ldHJ5LCBwcmltaXRpdmUsIHBhcnNlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGVuZGluZyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbaV07XG4gICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjcmVhdGVQcmltaXRpdmVLZXkocHJpbWl0aXZlKTtcblxuICAgICAgICAgICAgLy8gU2VlIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdlb21ldHJ5XG4gICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBjYWNoZWQgZ2VvbWV0cnkgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKGNhY2hlZC5wcm9taXNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5UHJvbWlzZTtcblxuICAgICAgICAgICAgICAgIGlmIChwcmltaXRpdmUuZXh0ZW5zaW9ucyAmJiBwcmltaXRpdmUuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgRFJBQ08gZ2VvbWV0cnkgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5UHJvbWlzZSA9IGNyZWF0ZURyYWNvUHJpbWl0aXZlKHByaW1pdGl2ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeVxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeVByb21pc2UgPSBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBwcmltaXRpdmUsIHBhcnNlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2FjaGUgdGhpcyBnZW9tZXRyeVxuICAgICAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHsgcHJpbWl0aXZlOiBwcmltaXRpdmUsIHByb21pc2U6IGdlb21ldHJ5UHJvbWlzZSB9O1xuXG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKGdlb21ldHJ5UHJvbWlzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbWVzaGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1lc2hJbmRleFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8R3JvdXB8TWVzaHxTa2lubmVkTWVzaD59XG4gICAgICovXG4gICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZE1lc2ggPSBmdW5jdGlvbiAobWVzaEluZGV4KSB7XG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcblxuICAgICAgICB2YXIgbWVzaERlZiA9IGpzb24ubWVzaGVzW21lc2hJbmRleF07XG4gICAgICAgIHZhciBwcmltaXRpdmVzID0gbWVzaERlZi5wcmltaXRpdmVzO1xuXG4gICAgICAgIHZhciBwZW5kaW5nID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gcHJpbWl0aXZlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPVxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZXNbaV0ubWF0ZXJpYWwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZURlZmF1bHRNYXRlcmlhbCh0aGlzLmNhY2hlKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZ2V0RGVwZW5kZW5jeSgnbWF0ZXJpYWwnLCBwcmltaXRpdmVzW2ldLm1hdGVyaWFsKTtcblxuICAgICAgICAgICAgcGVuZGluZy5wdXNoKG1hdGVyaWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIubG9hZEdlb21ldHJpZXMocHJpbWl0aXZlcykpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gcmVzdWx0cy5zbGljZSgwLCByZXN1bHRzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgdmFyIGdlb21ldHJpZXMgPSByZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIHZhciBtZXNoZXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cmllcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gZ2VvbWV0cmllc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1tpXTtcblxuICAgICAgICAgICAgICAgIC8vIDEuIGNyZWF0ZSBNZXNoXG5cbiAgICAgICAgICAgICAgICB2YXIgbWVzaDtcblxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG1hdGVyaWFsc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRVMgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9TVFJJUCB8fFxuICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiB8fFxuICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIC5pc1NraW5uZWRNZXNoIGlzbid0IGluIGdsVEYgc3BlYy4gU2VlIC5tYXJrRGVmcygpXG4gICAgICAgICAgICAgICAgICAgIG1lc2ggPVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaERlZi5pc1NraW5uZWRNZXNoID09PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgU2tpbm5lZE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzaC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmICFtZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodC5ub3JtYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBub3JtYWxpemUgZmxvYXRpbmcgcG9pbnQgc2tpbiB3ZWlnaHQgYXJyYXkgdG8gZml4IG1hbGZvcm1lZCBhc3NldHMgKHNlZSAjMTUzMTkpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIGltcG9ydGFudCB0byBza2lwIHRoaXMgZm9yIG5vbi1mbG9hdDMyIGRhdGEgc2luY2Ugbm9ybWFsaXplU2tpbldlaWdodHMgYXNzdW1lcyBub24tbm9ybWFsaXplZCBpbnB1dHNcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gubm9ybWFsaXplU2tpbldlaWdodHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX1NUUklQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLmdlb21ldHJ5ID0gdG9UcmlhbmdsZXNEcmF3TW9kZShtZXNoLmdlb21ldHJ5LCBUcmlhbmdsZVN0cmlwRHJhd01vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfRkFOKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoLmdlb21ldHJ5ID0gdG9UcmlhbmdsZXNEcmF3TW9kZShtZXNoLmdlb21ldHJ5LCBUcmlhbmdsZUZhbkRyYXdNb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FUykge1xuICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IExpbmVTZWdtZW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX1NUUklQKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgTGluZShnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX0xPT1ApIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBMaW5lTG9vcChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5QT0lOVFMpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBQb2ludHMoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLkdMVEZMb2FkZXI6IFByaW1pdGl2ZSBtb2RlIHVuc3VwcG9ydGVkOiAnICsgcHJpbWl0aXZlLm1vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtZXNoLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNb3JwaFRhcmdldHMobWVzaCwgbWVzaERlZik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWVzaC5uYW1lID0gbWVzaERlZi5uYW1lIHx8ICdtZXNoXycgKyBtZXNoSW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2VvbWV0cmllcy5sZW5ndGggPiAxKSBtZXNoLm5hbWUgKz0gJ18nICsgaTtcblxuICAgICAgICAgICAgICAgIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEobWVzaCwgbWVzaERlZik7XG5cbiAgICAgICAgICAgICAgICBwYXJzZXIuYXNzaWduRmluYWxNYXRlcmlhbChtZXNoKTtcblxuICAgICAgICAgICAgICAgIG1lc2hlcy5wdXNoKG1lc2gpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWVzaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNoZXNbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBncm91cCA9IG5ldyBHcm91cCgpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBtZXNoZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgIGdyb3VwLmFkZChtZXNoZXNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjY2FtZXJhc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjYW1lcmFJbmRleFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQ2FtZXJhPn1cbiAgICAgKi9cbiAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQ2FtZXJhID0gZnVuY3Rpb24gKGNhbWVyYUluZGV4KSB7XG4gICAgICAgIHZhciBjYW1lcmE7XG4gICAgICAgIHZhciBjYW1lcmFEZWYgPSB0aGlzLmpzb24uY2FtZXJhc1tjYW1lcmFJbmRleF07XG4gICAgICAgIHZhciBwYXJhbXMgPSBjYW1lcmFEZWZbY2FtZXJhRGVmLnR5cGVdO1xuXG4gICAgICAgIGlmICghcGFyYW1zKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgY2FtZXJhIHBhcmFtZXRlcnMuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FtZXJhRGVmLnR5cGUgPT09ICdwZXJzcGVjdGl2ZScpIHtcbiAgICAgICAgICAgIGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgICAgICAgICBNYXRoVXRpbHMucmFkVG9EZWcocGFyYW1zLnlmb3YpLFxuICAgICAgICAgICAgICAgIHBhcmFtcy5hc3BlY3RSYXRpbyB8fCAxLFxuICAgICAgICAgICAgICAgIHBhcmFtcy56bmVhciB8fCAxLFxuICAgICAgICAgICAgICAgIHBhcmFtcy56ZmFyIHx8IDJlNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjYW1lcmFEZWYudHlwZSA9PT0gJ29ydGhvZ3JhcGhpYycpIHtcbiAgICAgICAgICAgIGNhbWVyYSA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoXG4gICAgICAgICAgICAgICAgLXBhcmFtcy54bWFnLFxuICAgICAgICAgICAgICAgIHBhcmFtcy54bWFnLFxuICAgICAgICAgICAgICAgIHBhcmFtcy55bWFnLFxuICAgICAgICAgICAgICAgIC1wYXJhbXMueW1hZyxcbiAgICAgICAgICAgICAgICBwYXJhbXMuem5lYXIsXG4gICAgICAgICAgICAgICAgcGFyYW1zLnpmYXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FtZXJhRGVmLm5hbWUpIGNhbWVyYS5uYW1lID0gY2FtZXJhRGVmLm5hbWU7XG5cbiAgICAgICAgYXNzaWduRXh0cmFzVG9Vc2VyRGF0YShjYW1lcmEsIGNhbWVyYURlZik7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYW1lcmEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2tpbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2tpbkluZGV4XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRTa2luID0gZnVuY3Rpb24gKHNraW5JbmRleCkge1xuICAgICAgICB2YXIgc2tpbkRlZiA9IHRoaXMuanNvbi5za2luc1tza2luSW5kZXhdO1xuXG4gICAgICAgIHZhciBza2luRW50cnkgPSB7IGpvaW50czogc2tpbkRlZi5qb2ludHMgfTtcblxuICAgICAgICBpZiAoc2tpbkRlZi5pbnZlcnNlQmluZE1hdHJpY2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2tpbkVudHJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgc2tpbkRlZi5pbnZlcnNlQmluZE1hdHJpY2VzKS50aGVuKGZ1bmN0aW9uIChhY2Nlc3Nvcikge1xuICAgICAgICAgICAgc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMgPSBhY2Nlc3NvcjtcblxuICAgICAgICAgICAgcmV0dXJuIHNraW5FbnRyeTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNhbmltYXRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuaW1hdGlvbkluZGV4XG4gICAgICogQHJldHVybiB7UHJvbWlzZTxBbmltYXRpb25DbGlwPn1cbiAgICAgKi9cbiAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQW5pbWF0aW9uID0gZnVuY3Rpb24gKGFuaW1hdGlvbkluZGV4KSB7XG4gICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuXG4gICAgICAgIHZhciBhbmltYXRpb25EZWYgPSBqc29uLmFuaW1hdGlvbnNbYW5pbWF0aW9uSW5kZXhdO1xuXG4gICAgICAgIHZhciBwZW5kaW5nTm9kZXMgPSBbXTtcbiAgICAgICAgdmFyIHBlbmRpbmdJbnB1dEFjY2Vzc29ycyA9IFtdO1xuICAgICAgICB2YXIgcGVuZGluZ091dHB1dEFjY2Vzc29ycyA9IFtdO1xuICAgICAgICB2YXIgcGVuZGluZ1NhbXBsZXJzID0gW107XG4gICAgICAgIHZhciBwZW5kaW5nVGFyZ2V0cyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVscy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhbm5lbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVsc1tpXTtcbiAgICAgICAgICAgIHZhciBzYW1wbGVyID0gYW5pbWF0aW9uRGVmLnNhbXBsZXJzW2NoYW5uZWwuc2FtcGxlcl07XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gY2hhbm5lbC50YXJnZXQ7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRhcmdldC5ub2RlICE9PSB1bmRlZmluZWQgPyB0YXJnZXQubm9kZSA6IHRhcmdldC5pZDsgLy8gTk9URTogdGFyZ2V0LmlkIGlzIGRlcHJlY2F0ZWQuXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBhbmltYXRpb25EZWYucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnNbc2FtcGxlci5pbnB1dF0gOiBzYW1wbGVyLmlucHV0O1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCA/IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzW3NhbXBsZXIub3V0cHV0XSA6IHNhbXBsZXIub3V0cHV0O1xuXG4gICAgICAgICAgICBwZW5kaW5nTm9kZXMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ25vZGUnLCBuYW1lKSk7XG4gICAgICAgICAgICBwZW5kaW5nSW5wdXRBY2Nlc3NvcnMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgaW5wdXQpKTtcbiAgICAgICAgICAgIHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMucHVzaCh0aGlzLmdldERlcGVuZGVuY3koJ2FjY2Vzc29yJywgb3V0cHV0KSk7XG4gICAgICAgICAgICBwZW5kaW5nU2FtcGxlcnMucHVzaChzYW1wbGVyKTtcbiAgICAgICAgICAgIHBlbmRpbmdUYXJnZXRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBQcm9taXNlLmFsbChwZW5kaW5nTm9kZXMpLFxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocGVuZGluZ0lucHV0QWNjZXNzb3JzKSxcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMpLFxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocGVuZGluZ1NhbXBsZXJzKSxcbiAgICAgICAgICAgIFByb21pc2UuYWxsKHBlbmRpbmdUYXJnZXRzKVxuICAgICAgICBdKS50aGVuKGZ1bmN0aW9uIChkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIHZhciBub2RlcyA9IGRlcGVuZGVuY2llc1swXTtcbiAgICAgICAgICAgIHZhciBpbnB1dEFjY2Vzc29ycyA9IGRlcGVuZGVuY2llc1sxXTtcbiAgICAgICAgICAgIHZhciBvdXRwdXRBY2Nlc3NvcnMgPSBkZXBlbmRlbmNpZXNbMl07XG4gICAgICAgICAgICB2YXIgc2FtcGxlcnMgPSBkZXBlbmRlbmNpZXNbM107XG4gICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IGRlcGVuZGVuY2llc1s0XTtcblxuICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBub2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRBY2Nlc3NvciA9IGlucHV0QWNjZXNzb3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBvdXRwdXRBY2Nlc3NvciA9IG91dHB1dEFjY2Vzc29yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlciA9IHNhbXBsZXJzW2ldO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBub2RlLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgICAgICAgICAgIG5vZGUubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgVHlwZWRLZXlmcmFtZVRyYWNrO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChQQVRIX1BST1BFUlRJRVNbdGFyZ2V0LnBhdGhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUEFUSF9QUk9QRVJUSUVTLndlaWdodHM6XG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMucm90YXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUEFUSF9QUk9QRVJUSUVTLnBvc2l0aW9uOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFBBVEhfUFJPUEVSVElFUy5zY2FsZTpcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIFR5cGVkS2V5ZnJhbWVUcmFjayA9IFZlY3RvcktleWZyYW1lVHJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9IG5vZGUubmFtZSA/IG5vZGUubmFtZSA6IG5vZGUudXVpZDtcblxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnBvbGF0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlci5pbnRlcnBvbGF0aW9uICE9PSB1bmRlZmluZWQgPyBJTlRFUlBPTEFUSU9OW3NhbXBsZXIuaW50ZXJwb2xhdGlvbl0gOiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXROYW1lcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgaWYgKFBBVEhfUFJPUEVSVElFU1t0YXJnZXQucGF0aF0gPT09IFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vZGUgbWF5IGJlIGEgR3JvdXAgKGdsVEYgbWVzaCB3aXRoIHNldmVyYWwgcHJpbWl0aXZlcykgb3IgYSBNZXNoLlxuICAgICAgICAgICAgICAgICAgICBub2RlLnRyYXZlcnNlKGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaXNNZXNoID09PSB0cnVlICYmIG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lcy5wdXNoKG9iamVjdC5uYW1lID8gb2JqZWN0Lm5hbWUgOiBvYmplY3QudXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWVzLnB1c2godGFyZ2V0TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dEFycmF5ID0gb3V0cHV0QWNjZXNzb3IuYXJyYXk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3V0cHV0QWNjZXNzb3Iubm9ybWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09PSBJbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gMSAvIDEyNztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvdXRwdXRBcnJheS5jb25zdHJ1Y3RvciA9PT0gVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSAxIC8gMjU1O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09IEludDE2QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gMSAvIDMyNzY3O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91dHB1dEFycmF5LmNvbnN0cnVjdG9yID09PSBVaW50MTZBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSAxIC8gNjU1MzU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIG91dHB1dCBhY2Nlc3NvciBjb21wb25lbnQgdHlwZS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2FsZWQgPSBuZXcgRmxvYXQzMkFycmF5KG91dHB1dEFycmF5Lmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gb3V0cHV0QXJyYXkubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVkW2pdID0gb3V0cHV0QXJyYXlbal0gKiBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dEFycmF5ID0gc2NhbGVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IHRhcmdldE5hbWVzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWVzW2pdICsgJy4nICsgUEFUSF9QUk9QRVJUSUVTW3RhcmdldC5wYXRoXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0QWNjZXNzb3IuYXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVycG9sYXRpb25cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBPdmVycmlkZSBpbnRlcnBvbGF0aW9uIHdpdGggY3VzdG9tIGZhY3RvcnkgbWV0aG9kLlxuICAgICAgICAgICAgICAgICAgICBpZiAoc2FtcGxlci5pbnRlcnBvbGF0aW9uID09PSAnQ1VCSUNTUExJTkUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5jcmVhdGVJbnRlcnBvbGFudCA9IGZ1bmN0aW9uIEludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZShyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIENVQklDU1BMSU5FIGtleWZyYW1lIGluIGdsVEYgaGFzIHRocmVlIG91dHB1dCB2YWx1ZXMgZm9yIGVhY2ggaW5wdXQgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVwcmVzZW50aW5nIGluVGFuZ2VudCwgc3BsaW5lVmVydGV4LCBhbmQgb3V0VGFuZ2VudC4gQXMgYSByZXN1bHQsIHRyYWNrLmdldFZhbHVlU2l6ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBiZSBkaXZpZGVkIGJ5IHRocmVlIHRvIGdldCB0aGUgaW50ZXJwb2xhbnQncyBzYW1wbGVTaXplIGFyZ3VtZW50LlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VmFsdWVTaXplKCkgLyAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBhcyBDVUJJQ1NQTElORS4gYHRyYWNrLmdldEludGVycG9sYXRpb24oKWAgZG9lc24ndCBzdXBwb3J0IGN1c3RvbSBpbnRlcnBvbGFudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay5jcmVhdGVJbnRlcnBvbGFudC5pc0ludGVycG9sYW50RmFjdG9yeU1ldGhvZEdMVEZDdWJpY1NwbGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cmFja3MucHVzaCh0cmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGFuaW1hdGlvbkRlZi5uYW1lID8gYW5pbWF0aW9uRGVmLm5hbWUgOiAnYW5pbWF0aW9uXycgKyBhbmltYXRpb25JbmRleDtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKG5hbWUsIHVuZGVmaW5lZCwgdHJhY2tzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNub2Rlcy1hbmQtaGllcmFyY2h5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5vZGVJbmRleFxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0M0Q+fVxuICAgICAqL1xuICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWROb2RlID0gZnVuY3Rpb24gKG5vZGVJbmRleCkge1xuICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBtZXNoUmVmZXJlbmNlcyA9IGpzb24ubWVzaFJlZmVyZW5jZXM7XG4gICAgICAgIHZhciBtZXNoVXNlcyA9IGpzb24ubWVzaFVzZXM7XG5cbiAgICAgICAgdmFyIG5vZGVEZWYgPSBqc29uLm5vZGVzW25vZGVJbmRleF07XG5cbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGVuZGluZyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAobm9kZURlZi5tZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlci5nZXREZXBlbmRlbmN5KCdtZXNoJywgbm9kZURlZi5tZXNoKS50aGVuKGZ1bmN0aW9uIChtZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2hSZWZlcmVuY2VzW25vZGVEZWYubWVzaF0gPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlTnVtID0gbWVzaFVzZXNbbm9kZURlZi5tZXNoXSsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG1lc2guY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgKz0gJ19pbnN0YW5jZV8nICsgaW5zdGFuY2VOdW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBtZXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZWlnaHRzIGFyZSBwcm92aWRlZCBvbiB0aGUgbm9kZSwgb3ZlcnJpZGUgd2VpZ2h0cyBvbiB0aGUgbWVzaC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlRGVmLndlaWdodHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudHJhdmVyc2UoZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvLmlzTWVzaCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IG5vZGVEZWYud2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1tpXSA9IG5vZGVEZWYud2VpZ2h0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZURlZi5jYW1lcmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChwYXJzZXIuZ2V0RGVwZW5kZW5jeSgnY2FtZXJhJywgbm9kZURlZi5jYW1lcmEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG5vZGVEZWYuZXh0ZW5zaW9ucyAmJlxuICAgICAgICAgICAgICAgIG5vZGVEZWYuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUxdICYmXG4gICAgICAgICAgICAgICAgbm9kZURlZi5leHRlbnNpb25zW0VYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTF0ubGlnaHQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKHBhcnNlci5nZXREZXBlbmRlbmN5KCdsaWdodCcsIG5vZGVEZWYuZXh0ZW5zaW9uc1tFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUxdLmxpZ2h0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nKTtcbiAgICAgICAgfSkoKS50aGVuKGZ1bmN0aW9uIChvYmplY3RzKSB7XG4gICAgICAgICAgICB2YXIgbm9kZTtcblxuICAgICAgICAgICAgLy8gLmlzQm9uZSBpc24ndCBpbiBnbFRGIHNwZWMuIFNlZSAubWFya0RlZnNcbiAgICAgICAgICAgIGlmIChub2RlRGVmLmlzQm9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgQm9uZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmplY3RzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbmV3IEdyb3VwKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iamVjdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG9iamVjdHNbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgT2JqZWN0M0QoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUgIT09IG9iamVjdHNbMF0pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGQob2JqZWN0c1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZURlZi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgbm9kZS51c2VyRGF0YS5uYW1lID0gbm9kZURlZi5uYW1lO1xuICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFByb3BlcnR5QmluZGluZy5zYW5pdGl6ZU5vZGVOYW1lKG5vZGVEZWYubmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEobm9kZSwgbm9kZURlZik7XG5cbiAgICAgICAgICAgIGlmIChub2RlRGVmLmV4dGVuc2lvbnMpIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YShleHRlbnNpb25zLCBub2RlLCBub2RlRGVmKTtcblxuICAgICAgICAgICAgaWYgKG5vZGVEZWYubWF0cml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgICAgICAgICAgICAgICBtYXRyaXguZnJvbUFycmF5KG5vZGVEZWYubWF0cml4KTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGx5TWF0cml4NChtYXRyaXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZURlZi50cmFuc2xhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucG9zaXRpb24uZnJvbUFycmF5KG5vZGVEZWYudHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChub2RlRGVmLnJvdGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5xdWF0ZXJuaW9uLmZyb21BcnJheShub2RlRGVmLnJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZURlZi5zY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2NhbGUuZnJvbUFycmF5KG5vZGVEZWYuc2NhbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2NlbmVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjZW5lSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEdyb3VwPn1cbiAgICAgKi9cbiAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2NlbmUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBzY2VuZSBub2RlIGhpZXJhY2h5IGJ1aWxkZXJcblxuICAgICAgICBmdW5jdGlvbiBidWlsZE5vZGVIaWVyYWNoeShub2RlSWQsIHBhcmVudE9iamVjdCwganNvbiwgcGFyc2VyKSB7XG4gICAgICAgICAgICB2YXIgbm9kZURlZiA9IGpzb24ubm9kZXNbbm9kZUlkXTtcblxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlclxuICAgICAgICAgICAgICAgIC5nZXREZXBlbmRlbmN5KCdub2RlJywgbm9kZUlkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlRGVmLnNraW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIG5vZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYnVpbGQgc2tlbGV0b24gaGVyZSBhcyB3ZWxsXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5FbnRyeTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0RGVwZW5kZW5jeSgnc2tpbicsIG5vZGVEZWYuc2tpbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChza2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkVudHJ5ID0gc2tpbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZW5kaW5nSm9pbnRzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBza2luRW50cnkuam9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0pvaW50cy5wdXNoKHBhcnNlci5nZXREZXBlbmRlbmN5KCdub2RlJywgc2tpbkVudHJ5LmpvaW50c1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwZW5kaW5nSm9pbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoam9pbnROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudHJhdmVyc2UoZnVuY3Rpb24gKG1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNoLmlzTWVzaCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2VzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gam9pbnROb2Rlcy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnROb2RlID0gam9pbnROb2Rlc1tqXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpvaW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVzLnB1c2goam9pbnROb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraW5FbnRyeS5pbnZlcnNlQmluZE1hdHJpY2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0LmZyb21BcnJheShza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcy5hcnJheSwgaiAqIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lSW52ZXJzZXMucHVzaChtYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdUSFJFRS5HTFRGTG9hZGVyOiBKb2ludCBcIiVzXCIgY291bGQgbm90IGJlIGZvdW5kLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraW5FbnRyeS5qb2ludHNbal1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5iaW5kKG5ldyBTa2VsZXRvbihib25lcywgYm9uZUludmVyc2VzKSwgbWVzaC5tYXRyaXhXb3JsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYnVpbGQgbm9kZSBoaWVyYWNoeVxuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdC5hZGQobm9kZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZURlZi5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZURlZi5jaGlsZHJlbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaChidWlsZE5vZGVIaWVyYWNoeShjaGlsZCwgbm9kZSwganNvbiwgcGFyc2VyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbG9hZFNjZW5lKHNjZW5lSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICB2YXIgc2NlbmVEZWYgPSB0aGlzLmpzb24uc2NlbmVzW3NjZW5lSW5kZXhdO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIExvYWRlciByZXR1cm5zIEdyb3VwLCBub3QgU2NlbmUuXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzE4MzQyI2lzc3VlY29tbWVudC01Nzg5ODExNzJcbiAgICAgICAgICAgIHZhciBzY2VuZSA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgaWYgKHNjZW5lRGVmLm5hbWUpIHNjZW5lLm5hbWUgPSBzY2VuZURlZi5uYW1lO1xuXG4gICAgICAgICAgICBhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKHNjZW5lLCBzY2VuZURlZik7XG5cbiAgICAgICAgICAgIGlmIChzY2VuZURlZi5leHRlbnNpb25zKSBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoZXh0ZW5zaW9ucywgc2NlbmUsIHNjZW5lRGVmKTtcblxuICAgICAgICAgICAgdmFyIG5vZGVJZHMgPSBzY2VuZURlZi5ub2RlcyB8fCBbXTtcblxuICAgICAgICAgICAgdmFyIHBlbmRpbmcgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbm9kZUlkcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKGJ1aWxkTm9kZUhpZXJhY2h5KG5vZGVJZHNbaV0sIHNjZW5lLCBqc29uLCBwYXJzZXIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHBlbmRpbmcpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2VuZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gR0xURkxvYWRlcjtcbn0pKCk7XG5cbmV4cG9ydCB7IEdMVEZMb2FkZXIgfTtcbiIsIi8vIEdsb2JhbCBpbXBvcnRzIC1cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuaW1wb3J0IFRXRUVOLCB7IHVwZGF0ZSB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4vY29tcG9uZW50cy9yZW5kZXJlcic7XG5pbXBvcnQgbGFiZWwgZnJvbSAnLi9jb21wb25lbnRzL2xhYmVsJztcbmltcG9ydCBDYW1lcmEgZnJvbSAnLi9jb21wb25lbnRzL2NhbWVyYSc7XG5pbXBvcnQgTGlnaHQgZnJvbSAnLi9jb21wb25lbnRzL2xpZ2h0JztcbmltcG9ydCBDb250cm9scyBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbHMnO1xuaW1wb3J0IEdlb21ldHJ5IGZyb20gJy4vY29tcG9uZW50cy9nZW9tZXRyeSc7XG5pbXBvcnQgRW52aXJvbm1lbnQgZnJvbSAnLi9jb21wb25lbnRzL2Vudmlyb25tZW50JztcblxuLy8gSGVscGVyc1xuaW1wb3J0IE1lc2hIZWxwZXIgZnJvbSAnLi9oZWxwZXJzL21lc2hIZWxwZXInO1xuXG4vLyBNb2RlbFxuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi9tb2RlbC90ZXh0dXJlJztcbmltcG9ydCBNb2RlbCBmcm9tICcuL21vZGVsL21vZGVsJztcblxuLy8gTWFuYWdlcnNcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICcuL21hbmFnZXJzL2ludGVyYWN0aW9uJztcbmltcG9ydCBEYXRHVUkgZnJvbSAnLi9tYW5hZ2Vycy9kYXRHVUknO1xuXG4vLyBOZXdseSBpbXBsZW1lbnRlZCBjbGFzc2VzXG5pbXBvcnQgTVFUVENsaWVudCBmcm9tICcuL21hbmFnZXJzL21xdHRDbGllbnQnO1xuXG4vLyBDb25maWcgZGF0YVxuaW1wb3J0IENvbmZpZyBmcm9tICcuLy4uL2RhdGEvY29uZmlnJztcblxuLy8gU1RMTG9hZGVyXG5jb25zdCBTVExMb2FkZXIgPSByZXF1aXJlKCd0aHJlZS1zdGwtbG9hZGVyJykoVEhSRUUpO1xuXG4vLyBHbG9iYWwgVmFyaWFibGVzXG5sZXQgY2FtZXJhLCBsYWJlbFJlbmRlcmVyLCBJTlRFUlNFQ1RFRCwgc2VsZWN0ZWRMYWJlbDtcblxuLy8gRm9yIGNsaWNrIGV2ZW50IG9uIHJvYm90c1xuY29uc3QgcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlcigpO1xuY29uc3QgbW91c2UgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG4vLyBUaGlzIGNsYXNzIGluc3RhbnRpYXRlcyBhbmQgdGllcyBhbGwgb2YgdGhlIGNvbXBvbmVudHMgdG9nZXRoZXIsIHN0YXJ0cyB0aGUgbG9hZGluZyBwcm9jZXNzIGFuZCByZW5kZXJzIHRoZSBtYWluIGxvb3BcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4ge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xuICAgICAgICAvLyBTZXQgY29udGFpbmVyIHByb3BlcnR5IHRvIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuXG4gICAgICAgIC8vIFN0YXJ0IFRocmVlIGNsb2NrXG4gICAgICAgIHRoaXMuY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2soKTtcblxuICAgICAgICAvLyBNYWluIHNjZW5lIGNyZWF0aW9uXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgd2luZG93LnNjZW5lID0gdGhpcy5zY2VuZTsgLy8gY29uZmlnIGFzIGEgZ2xvYmFsIHZhcmlhYmxlXG4gICAgICAgIHdpbmRvdy5zY2VuZV9zY2FsZSA9IENvbmZpZy5zY2FsZTtcbiAgICAgICAgLy8gSGlnaCBsZXZlbCByZWFsaXR5IGZsYWdcbiAgICAgICAgd2luZG93LnNlbGVjdGVkUmVhbGl0eSA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdHk7XG5cbiAgICAgICAgdGhpcy5zY2VuZS5mb2cgPSBuZXcgVEhSRUUuRm9nRXhwMihDb25maWcuZm9nLmNvbG9yLCBDb25maWcuZm9nLm5lYXIpO1xuXG4gICAgICAgIHRoaXMubXF0dCA9IG5ldyBNUVRUQ2xpZW50KHRoaXMuc2NlbmUpO1xuXG4gICAgICAgIC8vIEdldCBEZXZpY2UgUGl4ZWwgUmF0aW8gZmlyc3QgZm9yIHJldGluYVxuICAgICAgICBpZiAod2luZG93LmRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgICAgIENvbmZpZy5kcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1haW4gcmVuZGVyZXIgY29uc3RydWN0b3JcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih0aGlzLnNjZW5lLCBjb250YWluZXIpO1xuXG4gICAgICAgIC8vIENvbXBvbmVudHMgaW5zdGFudGlhdGlvbnNcbiAgICAgICAgY2FtZXJhID0gbmV3IENhbWVyYSh0aGlzLnJlbmRlcmVyLnRocmVlUmVuZGVyZXIpO1xuICAgICAgICB0aGlzLmNvbnRyb2xzID0gbmV3IENvbnRyb2xzKGNhbWVyYS50aHJlZUNhbWVyYSwgY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5saWdodCA9IG5ldyBMaWdodCh0aGlzLnNjZW5lKTtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBwbGFjZSBsaWdodHMgaW4gc2NlbmVcbiAgICAgICAgY29uc3QgbGlnaHRzID0gWydhbWJpZW50JywgJ2RpcmVjdGlvbmFsJywgJ3BvaW50JywgJ2hlbWknXTtcbiAgICAgICAgbGlnaHRzLmZvckVhY2goKGxpZ2h0KSA9PiB0aGlzLmxpZ2h0LnBsYWNlKGxpZ2h0KSk7XG5cbiAgICAgICAgLy8gU2V0IHVwIFN0YXRzIGlmIGRldiBlbnZpcm9ubWVudFxuICAgICAgICBpZiAoQ29uZmlnLmlzRGV2ICYmIENvbmZpZy5pc1Nob3dpbmdTdGF0cykge1xuICAgICAgICAgICAgdGhpcy5zdGF0cyA9IG5ldyBTdGF0cygpO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5zdGF0cy5kb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKENvbmZpZy5pc1Nob3dpbmdMYWJsZXMpIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxSZW5kZXJlciA9IGxhYmVsKCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdXAgZ3VpXG4gICAgICAgIGlmIChDb25maWcuaXNEZXYpIHtcbiAgICAgICAgICAgIHRoaXMuZ3VpID0gbmV3IERhdEdVSSh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc3RhbnRpYXRlIHRleHR1cmUgY2xhc3NcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuICAgICAgICAvLyBTdGFydCBsb2FkaW5nIHRoZSB0ZXh0dXJlcyBhbmQgdGhlbiBnbyBvbiB0byBsb2FkIHRoZSBtb2RlbCBhZnRlciB0aGUgdGV4dHVyZSBQcm9taXNlcyBoYXZlIHJlc29sdmVkXG4gICAgICAgIHRoaXMudGV4dHVyZS5sb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIgPSBuZXcgVEhSRUUuTG9hZGluZ01hbmFnZXIoKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBlbnZpcm9ubWVudCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBuZXcgRW52aXJvbm1lbnQoKTtcblxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgaWYgKENvbmZpZy5pc0Rldikge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMubWVzaEhlbHBlciA9IG5ldyBNZXNoSGVscGVyKHRoaXMuc2NlbmUsIHRoaXMubW9kZWwub2JqKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIGlmIChDb25maWcubWVzaC5lbmFibGVIZWxwZXIpIHRoaXMubWVzaEhlbHBlci5lbmFibGUoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZ3VpLmxvYWQodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5ndWkuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgLy8gb25Qcm9ncmVzcyBjYWxsYmFja1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLm9uUHJvZ3Jlc3MgPSAoaXRlbSwgbG9hZGVkLCB0b3RhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2l0ZW19OiAke2xvYWRlZH0gJHt0b3RhbH1gKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEFsbCBsb2FkZXJzIGRvbmUgbm93XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIub25Mb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGFsZXJ0KCdMb2FkZWQnKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZGluZyBjb21wbGV0ZSEnKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCB1cCBpbnRlcmFjdGlvbiBtYW5hZ2VyIHdpdGggdGhlIGFwcCBub3cgdGhhdCB0aGUgbW9kZWwgaXMgZmluaXNoZWQgbG9hZGluZ1xuICAgICAgICAgICAgICAgIG5ldyBJbnRlcmFjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci50aHJlZVJlbmRlcmVyLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmEudGhyZWVDYW1lcmEsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMudGhyZWVDb250cm9sc1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgZGF0LkdVSSBjb250cm9scyBpZiBkZXZcbiAgICAgICAgICAgICAgICBpZiAoQ29uZmlnLmlzRGV2KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzaEhlbHBlciA9IG5ldyBNZXNoSGVscGVyKHRoaXMuc2NlbmUsIHRoaXMubW9kZWwub2JqKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29uZmlnLm1lc2guZW5hYmxlSGVscGVyKSB0aGlzLm1lc2hIZWxwZXIuZW5hYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5ndWkubG9hZCh0aGlzLCB0aGlzLm1vZGVsLm9iaik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZ3VpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFdmVyeXRoaW5nIGlzIG5vdyBmdWxseSBsb2FkZWRcbiAgICAgICAgICAgICAgICBDb25maWcuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNsb2FkaW5nJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0YXJ0IHJlbmRlciB3aGljaCBkb2VzIG5vdCB3YWl0IGZvciBtb2RlbCBmdWxseSBsb2FkZWRcblxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbG9hZGluZycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgICAgLy8gRXZlbnRsaXN0bmVyIGZvciBjYXRjaGluZyBtb3VzZSBjbGljayBldmVudHNcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkRvY3VtZW50TW91c2VEb3duLCBmYWxzZSk7XG4gICAgICAgIC8vIEV2ZW50bGlzdG5lciBmb3IgY2F0Y2hpbmcgbW91c2UgbW92ZSBldmVudHNcbiAgICAgICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlKTtcbiAgICB9XG5cbiAgICBvbkRvY3VtZW50TW91c2VEb3duKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgbW91c2UueCA9IChldmVudC5jbGllbnRYIC8gd2luZG93LmlubmVyV2lkdGgpICogMiAtIDE7XG4gICAgICAgIG1vdXNlLnkgPSAtKGV2ZW50LmNsaWVudFkgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogMiArIDE7XG5cbiAgICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEobW91c2UsIGNhbWVyYS50aHJlZUNhbWVyYSk7XG5cbiAgICAgICAgY29uc3QgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lLmNoaWxkcmVuKTtcbiAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0ID0gaW50ZXJzZWN0c1swXS5vYmplY3Q7XG4gICAgICAgICAgICBpZiAoSU5URVJTRUNURUQpIElOVEVSU0VDVEVELm1hdGVyaWFsLnNldFZhbHVlcyh7IG9wYWNpdHk6IElOVEVSU0VDVEVELmN1cnJlbnRPcGFjaXR5IH0pO1xuICAgICAgICAgICAgSU5URVJTRUNURUQgPSBvYmplY3Q7XG4gICAgICAgICAgICBzZWxlY3RlZExhYmVsID0gSU5URVJTRUNURUQuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBJTlRFUlNFQ1RFRC5jdXJyZW50T3BhY2l0eSA9IElOVEVSU0VDVEVELm1hdGVyaWFsLm9wYWNpdHk7XG4gICAgICAgICAgICBJTlRFUlNFQ1RFRC5sYWJlbHNWaXNpYmlsaXR5ID0gSU5URVJTRUNURUQubWF0ZXJpYWwubGFiZWxWaXNpYmlsaXR5O1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkTGFiZWwgIT09IHVuZGVmaW5lZCAmJiBzZWxlY3RlZExhYmVsLnZpc2libGUgIT09IHVuZGVmaW5lZCAmJiBDb25maWcuaXNTaG93aW5nTGFibGVzKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMYWJlbC52aXNpYmxlID0gIXNlbGVjdGVkTGFiZWwudmlzaWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIElOVEVSU0VDVEVELm1hdGVyaWFsLnNlbGVjdGVkID0gIUlOVEVSU0VDVEVELm1hdGVyaWFsLnNlbGVjdGVkO1xuICAgICAgICAgICAgaWYgKElOVEVSU0VDVEVELm5hbWUuc3RhcnRzV2l0aCgnT2JzdGFjbGUnKSkge1xuICAgICAgICAgICAgICAgIC8vIE9ic3RhY2xlIHNlbGVjdGlvbiBldmVudCBoYW5kbGluZ1xuICAgICAgICAgICAgICAgIC8vIGlmIChJTlRFUlNFQ1RFRC5tYXRlcmlhbC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIC8vICAgICBJTlRFUlNFQ1RFRC5jdXJyZW50SGV4ID0gSU5URVJTRUNURUQubWF0ZXJpYWwuZW1pc3NpdmUuZ2V0SGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIElOVEVSU0VDVEVELm1hdGVyaWFsLmVtaXNzaXZlLnNldEhleCgweGY5NWY0YSk7XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgSU5URVJTRUNURUQuY3VycmVudEhleCA9IElOVEVSU0VDVEVELm1hdGVyaWFsLnVzZXJEYXRhLm9yaWdpbmFsRW1taXNpdmU7XG4gICAgICAgICAgICAgICAgLy8gICAgIElOVEVSU0VDVEVELm1hdGVyaWFsLmVtaXNzaXZlLnNldEhleChJTlRFUlNFQ1RFRC5jdXJyZW50SGV4KTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKElOVEVSU0VDVEVELm5hbWUuc3RhcnRzV2l0aCgnUm9ib3QnKSkge1xuICAgICAgICAgICAgICAgIC8vIFJvYm90IHNlbGVjdGlvbiBldmVudCBoYW5kbGluZ1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IENvbnNpZGVyIFJlYWxpdHkgZmlsdGVyaW5nIHRvby4uLlxuICAgICAgICAgICAgICAgIGlmIChJTlRFUlNFQ1RFRC5tYXRlcmlhbC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBJTlRFUlNFQ1RFRC5tYXRlcmlhbC5zZXRWYWx1ZXMoeyBvcGFjaXR5OiAwLjUgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgSU5URVJTRUNURUQubWF0ZXJpYWwuc2V0VmFsdWVzKHsgb3BhY2l0eTogMSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKElOVEVSU0VDVEVELmNsaWNrRXZlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBJTlRFUlNFQ1RFRC5jbGlja0V2ZW50KElOVEVSU0VDVEVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoSU5URVJTRUNURUQpIElOVEVSU0VDVEVELm1hdGVyaWFsLnNldFZhbHVlcyh7IG9wYWNpdHk6IElOVEVSU0VDVEVELmN1cnJlbnRPcGFjaXR5IH0pO1xuICAgICAgICAgICAgSU5URVJTRUNURUQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Eb2N1bWVudE1vdXNlTW92ZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIG1vdXNlLnggPSAoZXZlbnQuY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIDIgLSAxO1xuICAgICAgICBtb3VzZS55ID0gLShldmVudC5jbGllbnRZIC8gd2luZG93LmlubmVySGVpZ2h0KSAqIDIgKyAxO1xuXG4gICAgICAgIHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKG1vdXNlLCBjYW1lcmEudGhyZWVDYW1lcmEpO1xuXG4gICAgICAgIGNvbnN0IGludGVyc2VjdHMgPSByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhzY2VuZS5jaGlsZHJlbiwgdHJ1ZSk7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdCA9IGludGVyc2VjdHNbMF0ub2JqZWN0O1xuICAgICAgICAgICAgaWYgKElOVEVSU0VDVEVEICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoSU5URVJTRUNURUQpIElOVEVSU0VDVEVELm1hdGVyaWFsLnNldFZhbHVlcyh7IG9wYWNpdHk6IElOVEVSU0VDVEVELmN1cnJlbnRPcGFjaXR5IH0pO1xuICAgICAgICAgICAgICAgIElOVEVSU0VDVEVEID0gb2JqZWN0O1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkTGFiZWwgPSBJTlRFUlNFQ1RFRC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICBJTlRFUlNFQ1RFRC5jdXJyZW50T3BhY2l0eSA9IElOVEVSU0VDVEVELm1hdGVyaWFsLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgSU5URVJTRUNURUQuY3VycmVudENvbG9yID0gSU5URVJTRUNURUQubWF0ZXJpYWwub3BhY2l0eTtcbiAgICAgICAgICAgICAgICBJTlRFUlNFQ1RFRC5tYXRlcmlhbC5zZXRWYWx1ZXMoeyBjb2xvcjogMHgwM2RmZmMsIG9wYWNpdHk6IDAuNzUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoSU5URVJTRUNURUQpXG4gICAgICAgICAgICAgICAgSU5URVJTRUNURUQubWF0ZXJpYWwuc2V0VmFsdWVzKHsgb3BhY2l0eTogMS4wLCBjb2xvcjogSU5URVJTRUNURUQubWF0ZXJpYWwudXNlckRhdGEub3JpZ2luYWxDb2xvciB9KTtcbiAgICAgICAgICAgIElOVEVSU0VDVEVEID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gQ2FsbCByZW5kZXIgZnVuY3Rpb24gYW5kIHBhc3MgaW4gY3JlYXRlZCBzY2VuZSBhbmQgY2FtZXJhXG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIGNhbWVyYS50aHJlZUNhbWVyYSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGxhYmVscyBpZiBlbmFibGVkXG4gICAgICAgIGlmIChDb25maWcuaXNTaG93aW5nTGFibGVzKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudC5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxSZW5kZXJlci5kb21FbGVtZW50LmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYWJlbFJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCBjYW1lcmEudGhyZWVDYW1lcmEpO1xuXG4gICAgICAgIC8vIERlbHRhIHRpbWUgaXMgc29tZXRpbWVzIG5lZWRlZCBmb3IgY2VydGFpbiB1cGRhdGVzXG4gICAgICAgIC8vY29uc3QgZGVsdGEgPSB0aGlzLmNsb2NrLmdldERlbHRhKCk7XG5cbiAgICAgICAgLy8gQ2FsbCBhbnkgdmVuZG9yIG9yIG1vZHVsZSBmcmFtZSB1cGRhdGVzIGhlcmVcbiAgICAgICAgVFdFRU4udXBkYXRlKCk7XG4gICAgICAgIHRoaXMuY29udHJvbHMudGhyZWVDb250cm9scy51cGRhdGUoKTtcblxuICAgICAgICBjYW1lcmEudGhyZWVDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuICAgICAgICAvLyB1cGRhdGUgc3RhdHMgaWYgZGV2IGVudmlyb25tZW50XG4gICAgICAgIGlmIChDb25maWcuaXNEZXYgJiYgQ29uZmlnLmlzU2hvd2luZ1N0YXRzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRzLnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUkFGXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlci5iaW5kKHRoaXMpKTsgLy8gQmluZCB0aGUgbWFpbiBjbGFzcyBpbnN0ZWFkIG9mIHdpbmRvdyBvYmplY3RcbiAgICB9XG59XG4iLCJpbXBvcnQgQ29uZmlnLCB7IHNhdmVDb25maWcgfSBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIENPTU1FTlQoTnV3YW5KKVxuLy8gU3RvcmUgdGhlIGxhc3Qgc3RhdGUgb2YgdGhlIHRvZ2dsZXMgaW4gdGhlIHdpbmRvdy5sb2NhbFN0b3JhZ2Vcbi8vIFJlZmVyOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2xvY2FsU3RvcmFnZVxuLy8gUmVmZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRhYXJ0cy9kYXQuZ3VpL2Jsb2IvbWFzdGVyL0FQSS5tZCNHVUkrdXNlTG9jYWxTdG9yYWdlXG5cbi8vIE1hbmFnZXMgYWxsIGRhdC5HVUkgaW50ZXJhY3Rpb25zXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRHVUkge1xuICAgIGNvbnN0cnVjdG9yKG1haW4pIHtcbiAgICAgICAgdGhpcy5ndWkgPSBuZXcgZGF0LkdVSSgpO1xuXG4gICAgICAgIHRoaXMuZ3VpLnVzZUxvY2FsU3RvcmFnZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5jYW1lcmEgPSBtYWluLmNhbWVyYS50aHJlZUNhbWVyYTtcbiAgICAgICAgdGhpcy5jb250cm9scyA9IG1haW4uY29udHJvbHMudGhyZWVDb250cm9scztcbiAgICAgICAgdGhpcy5saWdodCA9IG1haW4ubGlnaHQ7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBtYWluLnNjZW5lO1xuXG4gICAgICAgIHRoaXMubW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLm1lc2hIZWxwZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGxvYWQobWFpbiwgbWVzaCkge1xuICAgICAgICAvLyBBZGQgZm9sZGVyc1xuICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgLmFkZChDb25maWcsICdpc1Nob3dpbmdSb2JvdFNuYXBzaG90cycpXG4gICAgICAgICAgICAubmFtZSgnUm9ib3QgU25hcHNob3RzJylcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBDb25maWcuaXNTaG93aW5nUm9ib3RTbmFwc2hvdHMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzYXZlQ29uZmlnKENvbmZpZyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvKiBMYWJlbHMgRm9sZGVyICovXG4gICAgICAgIGNvbnN0IGxhYmVsc0ZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcignTGFiZWxzJyk7XG4gICAgICAgIC8vIGxhYmVsc0ZvbGRlclxuICAgICAgICAvLyAgICAgLmFkZChDb25maWcsICdpc1Nob3dpbmdMYWJsZXMnKVxuICAgICAgICAvLyAgICAgLm5hbWUoJ0FsbCBMYWJlbHMnKVxuICAgICAgICAvLyAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyAgICAgICAgIENvbmZpZy5pc1Nob3dpbmdMYWJsZXMgPSB2YWx1ZTtcbiAgICAgICAgLy8gICAgICAgICBDb25maWcubGFiZWxzVmlzaWJpbGl0eSA9IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgb2JzdGFjbGVzOiB2YWx1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgcm9ib3RzOiB2YWx1ZVxuICAgICAgICAvLyAgICAgICAgIH07XG4gICAgICAgIC8vICAgICAgICAgc2F2ZUNvbmZpZyhDb25maWcpO1xuICAgICAgICAvLyAgICAgfSk7XG5cbiAgICAgICAgbGFiZWxzRm9sZGVyXG4gICAgICAgICAgICAuYWRkKENvbmZpZy5sYWJlbHNWaXNpYmlsaXR5LCAnb2JzdGFjbGVzJylcbiAgICAgICAgICAgIC5uYW1lKCdPYnN0YWNsZSBMYWJlbHMnKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlTGFiZWxzKHRoaXMuc2NlbmUuY2hpbGRyZW4sICdPYnN0YWNsZScsIHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBsYWJlbHNGb2xkZXJcbiAgICAgICAgICAgIC5hZGQoQ29uZmlnLmxhYmVsc1Zpc2liaWxpdHksICdyb2JvdHMnKVxuICAgICAgICAgICAgLm5hbWUoJ1JvYm90IExhYmVscycpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMYWJlbHModGhpcy5zY2VuZS5jaGlsZHJlbiwgJ1JvYm90JywgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLyogUmVhbGl0eSBGb2xkZXIgKi9cbiAgICAgICAgY29uc3QgcmVhbGl0eUZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcignUmVhbGl0eScpO1xuXG4gICAgICAgIHJlYWxpdHlGb2xkZXJcbiAgICAgICAgICAgIC5hZGQoQ29uZmlnLnNlbGVjdGVkUmVhbGl0aWVzLCAncmVhbCcpXG4gICAgICAgICAgICAubmFtZSgnUGh5c2ljYWwgUmVhbGl0eScpXG4gICAgICAgICAgICAubGlzdGVuKClcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVJlYWxpdHkoJ3JlYWwnLCAnUicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJlYWxpdHlGb2xkZXJcbiAgICAgICAgICAgIC5hZGQoQ29uZmlnLnNlbGVjdGVkUmVhbGl0aWVzLCAndmlydHVhbCcpXG4gICAgICAgICAgICAubmFtZSgnVmlydHVhbCBSZWFsaXR5JylcbiAgICAgICAgICAgIC5saXN0ZW4oKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlUmVhbGl0eSgndmlydHVhbCcsICdWJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBPdGhlclxuICAgICAgICBjb25zdCBvdGhlckZvbGRlciA9IHRoaXMuZ3VpLmFkZEZvbGRlcignT3RoZXInKTtcbiAgICAgICAgb3RoZXJGb2xkZXJcbiAgICAgICAgICAgIC5hZGQoQ29uZmlnLmNvbnRyb2xzLCAnYXV0b1JvdGF0ZScpXG4gICAgICAgICAgICAubmFtZSgnQXV0byBSb3RhdGUnKVxuICAgICAgICAgICAgLmxpc3RlbigpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gYWxlcnQoJ1RvZ2dsZSBBdXRvUm90YXRlJyk7XG4gICAgICAgICAgICAgICAgQ29uZmlnLmNvbnRyb2xzLmF1dG9Sb3RhdGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzYXZlQ29uZmlnKENvbmZpZyk7XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgb3RoZXJGb2xkZXJcbiAgICAgICAgICAgIC5hZGQoQ29uZmlnLmNvbnRyb2xzLCAnYXV0b1JvdGF0ZVNwZWVkJylcbiAgICAgICAgICAgIC5taW4oLTUpXG4gICAgICAgICAgICAubWF4KDUpXG4gICAgICAgICAgICAubmFtZSgnQXV0byBSb3RhdGUgU3BlZWQnKVxuICAgICAgICAgICAgLmxpc3RlbigpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgQ29uZmlnLmNvbnRyb2xzLmF1dG9Sb3RhdGVTcGVlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHNhdmVDb25maWcoQ29uZmlnKTtcbiAgICAgICAgICAgICAgICAvLyBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAvKiBHbG9iYWwgKi9cbiAgICAgICAgLy8gdGhpcy5ndWkub3BlbigpO1xuICAgICAgICB0aGlzLmd1aS5jbG9zZSgpO1xuXG4gICAgICAgIC8vIHRoaXMubW9kZWwgPSBtYWluLm1vZGVsO1xuICAgICAgICAvLyB0aGlzLm1lc2hIZWxwZXIgPSBtYWluLm1lc2hIZWxwZXI7XG4gICAgfVxuXG4gICAgdG9nZ2xlTGFiZWxzKG9iamVjdHMsIHR5cGUsIHZhbHVlKSB7XG4gICAgICAgIHNhdmVDb25maWcoQ29uZmlnKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0cykgJiYgdHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUgIT09ICcnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciB2YXJpYWJsZSBvZiBvYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhcmlhYmxlLm5hbWUuc3RhcnRzV2l0aCh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZS5jaGlsZHJlblswXS52aXNpYmxlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlUmVhbGl0eShyZWFsaXR5LCBzZWxlY3RlZCkge1xuICAgICAgICAvLyBieSBkZWZhdWx0IHZpc3VhbGl6ZXIgd2lsbCBpbnRlcmNlcHQgYWxsIHRoZSBjb21tdW5pY2F0aW9uIGNvbWluZyB0byB0aGUgY2hhbm5lbCByZWdhcmRsZXNzIG9mIHRoZSByZWFsaXR5LlxuICAgICAgICAvLyB0aGlzIGNvbnRyb2wgcGFuZWwgd2lsbCBvbmx5IHRvZ2dsZSB0aGUgJ3Zpc2liaWxpdHknIG9mIG9iamVjdHMgaW4gdGhlIHNlbGVjdGVkIHJlYWxpdGllcy5cbiAgICAgICAgY29uc3Qgb2JqZWN0cyA9IHNjZW5lLmNoaWxkcmVuO1xuICAgICAgICBzYXZlQ29uZmlnKENvbmZpZyk7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9iamVjdHMpLmZvckVhY2goKG9iaikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9ialsxXVsnbmFtZSddO1xuICAgICAgICAgICAgY29uc3QgcmVhbGl0eSA9IG9ialsxXVsncmVhbGl0eSddO1xuXG4gICAgICAgICAgICBpZiAocmVhbGl0eSAhPT0gdW5kZWZpbmVkICYmIHJlYWxpdHkgPT09ICdSJykge1xuICAgICAgICAgICAgICAgIC8vIG9ialsxXS50cmFuc3BhcmVudCA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy5yZWFsO1xuICAgICAgICAgICAgICAgIG9ialsxXS5tYXRlcmlhbC5vcGFjaXR5ID0gQ29uZmlnLnNlbGVjdGVkUmVhbGl0aWVzLnJlYWwgPyAxLjAgOiBDb25maWcuaGlkZGVuT3BhY2l0eTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVhbGl0eSAhPT0gdW5kZWZpbmVkICYmIHJlYWxpdHkgPT09ICdWJykge1xuICAgICAgICAgICAgICAgIC8vIG9ialsxXS50cmFuc3BhcmVudCA9IENvbmZpZy5zZWxlY3RlZFJlYWxpdGllcy52aXJ0dWFsO1xuICAgICAgICAgICAgICAgIG9ialsxXS5tYXRlcmlhbC5vcGFjaXR5ID0gQ29uZmlnLnNlbGVjdGVkUmVhbGl0aWVzLnZpcnR1YWwgPyAxLjAgOiBDb25maWcuaGlkZGVuT3BhY2l0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5ndWkuc2hvdygpO1xuICAgIH1cblxuICAgIHVubG9hZCgpIHtcbiAgICAgICAgdGhpcy5ndWkuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmd1aSA9IG5ldyBkYXQuR1VJKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEtleWJvYXJkIGZyb20gJy4uLy4uL3V0aWxzL2tleWJvYXJkJztcbmltcG9ydCBIZWxwZXJzIGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIE1hbmFnZXMgYWxsIGlucHV0IGludGVyYWN0aW9uc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBjb250cm9scykge1xuICAgICAgICAvLyBQcm9wZXJ0aWVzXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgICAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYTtcbiAgICAgICAgdGhpcy5jb250cm9scyA9IGNvbnRyb2xzO1xuXG4gICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUga2V5Ym9hcmQgaGVscGVyXG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcblxuICAgICAgICAvLyBMaXN0ZW5lcnNcbiAgICAgICAgLy8gTW91c2UgZXZlbnRzXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAgICAgICAoZXZlbnQpID0+IEhlbHBlcnMudGhyb3R0bGUodGhpcy5vbk1vdXNlTW92ZShldmVudCksIDI1MCksXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIChldmVudCkgPT4gdGhpcy5vbk1vdXNlTGVhdmUoZXZlbnQpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoZXZlbnQpID0+IHRoaXMub25Nb3VzZU92ZXIoZXZlbnQpLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gS2V5Ym9hcmQgZXZlbnRzXG4gICAgICAgIHRoaXMua2V5Ym9hcmQuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBPbmx5IG9uY2VcbiAgICAgICAgICAgIGlmIChldmVudC5yZXBlYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmtleWJvYXJkLmV2ZW50TWF0Y2hlcyhldmVudCwgJ2VzY2FwZScpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VzY2FwZSBwcmVzc2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uTW91c2VPdmVyKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgQ29uZmlnLmlzTW91c2VPdmVyID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBvbk1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBDb25maWcuaXNNb3VzZU92ZXIgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvbk1vdXNlTW92ZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgQ29uZmlnLmlzTW91c2VNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgfSwgMjAwKTtcblxuICAgICAgICBDb25maWcuaXNNb3VzZU1vdmluZyA9IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IFRXRUVOLCB7IHVwZGF0ZSB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJztcbmltcG9ydCBNUVRUIGZyb20gJ3BhaG8tbXF0dCc7XG5cbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuaW1wb3J0IE9ic3RhY2xlIGZyb20gJy4uL2NvbXBvbmVudHMvb2JzdGFjbGUnO1xuaW1wb3J0IFJvYm90IGZyb20gJy4uL2NvbXBvbmVudHMvcm9ib3QnO1xuaW1wb3J0IHsgZ2V0Q3JlZGVudGlhbHMgfSBmcm9tICcuLi9oZWxwZXJzL3VybEhlbHBlcic7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBNUVRUIFRvcGljc1xuXG4vLyBDcmVhdGUgYW5kIGRlbGV0ZSByb2JvdCBvYmplY3RzXG5jb25zdCBUT1BJQ19ST0JPVF9DUkVBVEUgPSAncm9ib3QvY3JlYXRlJztcbmNvbnN0IFRPUElDX1JPQk9UX0RFTEVURSA9ICdyb2JvdC9kZWxldGUnO1xuY29uc3QgVE9QSUNfUk9CT1RfQlJPQURDQVNUID0gJ3JvYm90L21zZy9icm9hZGNhc3QnO1xuXG4vLyBUaGlzIHdpbGwgcHJvdmlkZSBsb2NhdGlvbiBkYXRhIHRvIHRoZSBHVUlcbmNvbnN0IFRPUElDX0xPQ19JTkZPX0ZST01fU0VSVkVSID0gJ2xvY2FsaXphdGlvbi9kYXRhJztcbmNvbnN0IFRPUElDX0xPQ19JTkZPX0ZST01fTE9DX1NZU1RFTVMgPSAnbG9jYWxpemF0aW9uL3VwZGF0ZSc7XG5cbi8vIFRoaXMgd2lsbCByZXF1ZXN0IHRoZSBsb2NhbGl6YXRpb24gZGF0YSB1cGRhdGUgZnJvbSB0aGUgc2VydmVyXG5jb25zdCBUT1BJQ19MT0NfUkVRVUVTVCA9ICdsb2NhbGl6YXRpb24vZGF0YS8/JztcblxuLy8gVGhpcyB3aWxsIHJlcXVlc3Qgb2JzdGFjbGUgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbmNvbnN0IFRPUElDX09CU1RBQ0xFX1JFUVVFU1QgPSAnb2JzdGFjbGVzLz8nO1xuXG4vLyBUaGlzIHdpbGwgc2VuZCBvYnN0YWNsZSBkYXRhIGFzIGEgSlNPTiBsaXN0XG5jb25zdCBUT1BJQ19PQlNUQUNMRVNfTElTVCA9ICdvYnN0YWNsZXMnO1xuY29uc3QgVE9QSUNfT0JTVEFDTEVTX0RFTEVURSA9ICdvYnN0YWNsZXMvZGVsZXRlJztcbmNvbnN0IFRPUElDX09CU1RBQ0xFU19ERUxFVEVfQUxMID0gJ29ic3RhY2xlcy9kZWxldGUvYWxsJztcblxuLy8gUm9ib3QgQ29sb3IgLSBOZW9QaXhlbFxuY29uc3QgVE9QSUNfQ0hBTkdFX0NPTE9SID0gJ291dHB1dC9uZW9waXhlbCc7XG5cbi8vIFRoaXMgd2lsbCBoZWxwIHRvIHJlbW90ZSB1cGRhdGUgdGhlIHBhcmFtZXRlcnMgaW4gaGVyZVxuY29uc3QgVE9QSUNfTUFOQUdFTUVOVF9WSVNVQUxJWkVSID0gJ21ndC92aXN1YWxpemVyJztcblxuLy8gUm9ib3QgbWFuYWdlbWVudCBzbmFwc2hvdCB0b3BpY1xuY29uc3QgVE9QSUNfTUFOQUdFTUVOVF9TTkFQU0hPVCA9ICdtZ3Qvcm9ib3RzLz8nO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNUVRUQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMucm9ib3QgPSBuZXcgUm9ib3Qoc2NlbmUpO1xuICAgICAgICB0aGlzLm9ic3RhY2xlcyA9IG5ldyBPYnN0YWNsZShzY2VuZSk7XG5cbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBnZXRDcmVkZW50aWFscygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNoYW5uZWwoKTtcblxuICAgICAgICBpZiAoY3JlZGVudGlhbHMgPT09IC0xKSB7XG4gICAgICAgICAgICBhbGVydCgnVW5hdXRob3JpemVkIGFjY2VzcyEgVGhlIFZpc3VhbGl6ZXIgd2lsbCBub3Qgd29yayBwcm9wZXJseS4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHJhbmRvbSBjbGllbnQgSWRcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudF9pZCA9ICdjbGllbnRfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSk7XG4gICAgICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBNUVRULkNsaWVudChDb25maWcubXF0dC5zZXJ2ZXIsIENvbmZpZy5tcXR0LnBvcnQsIENvbmZpZy5tcXR0LnBhdGgsIGNsaWVudF9pZCk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5tcXR0ID0gdGhpcy5jbGllbnQ7XG4gICAgICAgICAgICB3aW5kb3cuY2hhbm5lbCA9IGNyZWRlbnRpYWxzLmNoYW5uZWwgPT09IHVuZGVmaW5lZCA/ICd2MScgOiBjcmVkZW50aWFscy5jaGFubmVsO1xuXG4gICAgICAgICAgICB0aGlzLmNsaWVudC5jb25uZWN0KHtcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHJlY29ubmVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VTU0w6IHRydWUsXG4gICAgICAgICAgICAgICAgY2xlYW5TZXNzaW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01RVFQ6IGNvbm5lY3RlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN1YnNjcmliZSB0byB0b3BpY3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoVE9QSUNfTE9DX0lORk9fRlJPTV9TRVJWRVIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZShUT1BJQ19MT0NfSU5GT19GUk9NX0xPQ19TWVNURU1TKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZShUT1BJQ19ST0JPVF9DUkVBVEUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZShUT1BJQ19ST0JPVF9ERUxFVEUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZShUT1BJQ19ST0JPVF9CUk9BRENBU1QpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlKFRPUElDX0NIQU5HRV9DT0xPUik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlKFRPUElDX09CU1RBQ0xFU19MSVNUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoVE9QSUNfT0JTVEFDTEVTX0RFTEVURSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlKFRPUElDX09CU1RBQ0xFU19ERUxFVEVfQUxMKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoVE9QSUNfTUFOQUdFTUVOVF9WSVNVQUxJWkVSKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoVE9QSUNfTUFOQUdFTUVOVF9TTkFQU0hPVCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBmb3Igb2JzdGFjbGUgZGF0YVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnB1Ymxpc2goVE9QSUNfT0JTVEFDTEVfUkVRVUVTVCwgQ29uZmlnLm1peGVkUmVhbGl0eS5vYnN0YWNsZXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1Ymxpc2goVE9QSUNfT0JTVEFDTEVfUkVRVUVTVCwgJ00nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXF1ZXN0IGZvciBjb29yZGluYXRlIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWJsaXNoKFRPUElDX0xPQ19SRVFVRVNULCBDb25maWcubWl4ZWRSZWFsaXR5LnJvYm90cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjZXNzIGdsb2JhbGx5XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdCA9IHRoaXMucm9ib3Q7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vYnN0YWNsZXMgPSB0aGlzLm9ic3RhY2xlcztcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5vbk1lc3NhZ2VBcnJpdmVkID0gdGhpcy5vbk1lc3NhZ2VBcnJpdmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5vbkNvbm5lY3Rpb25Mb3N0ID0gdGhpcy5vbkNvbm5lY3Rpb25Mb3N0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25GYWlsdXJlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNUVRUOiBjb25uZWN0aW9uIGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgnTVFUVDogY29ubmVjdGlvbiBmYWlsZWQhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVDaGFubmVsKCkge1xuICAgICAgICAvLyBjb25zdCBjaGFubmVsSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICAvLyBpZiAoKGNoYW5uZWxIYXNoICE9ICcnKSAmIChjaGFubmVsSGFzaC5sZW5ndGggPiAxKSkge1xuICAgICAgICAvLyAgICAgLy8gd2luZG93LmNoYW5uZWwgPSBjaGFubmVsSGFzaC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIC8vICAgICB3aW5kb3cuY2hhbm5lbCA9IGNoYW5uZWxIYXNoLnNwbGl0KCcjJylbMV0uc3BsaXQoJz8nKVswXTtcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIHdpbmRvdy5jaGFubmVsID0gQ29uZmlnLm1xdHQuY2hhbm5lbDtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnTVFUVDogY2hhbm5lbD0nLCB3aW5kb3cuY2hhbm5lbCwgY2hhbm5lbEhhc2gpO1xuICAgICAgICAvLyByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBvbkNvbm5lY3Rpb25Mb3N0KHJlc3BvbnNlT2JqZWN0KSB7XG4gICAgICAgIGlmIChyZXNwb25zZU9iamVjdC5lcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNUVRUOiBvbkNvbm5lY3Rpb25Mb3N0OicgKyByZXNwb25zZU9iamVjdC5lcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ01RVFQ6IHJlY29ubmVjdGluZycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25NZXNzYWdlQXJyaXZlZChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgbXNnID0gcGFja2V0LnBheWxvYWRTdHJpbmcudHJpbSgpO1xuICAgICAgICBjb25zdCB0ID0gcGFja2V0LmRlc3RpbmF0aW9uTmFtZTtcbiAgICAgICAgY29uc3QgdG9waWMgPSB0LnN1YnN0cmluZyh0LmluZGV4T2YoJy8nKSArIDEpO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdNUVRUOiAnICsgdG9waWMgKyAnID4gJyArIG1zZyk7XG5cbiAgICAgICAgaWYgKHRvcGljID09IFRPUElDX1JPQk9UX0NSRUFURSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShtc2cpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdC5jcmVhdGUoZGF0YS5pZCwgZGF0YS54LCBkYXRhLnksIGRhdGEuaGVhZGluZywgZGF0YS5yZWFsaXR5KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRvcGljID09IFRPUElDX1JPQk9UX0RFTEVURSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucm9ib3QuZGVsZXRlKGRhdGEuaWQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodG9waWMgPT0gVE9QSUNfTE9DX0lORk9fRlJPTV9MT0NfU1lTVEVNUyB8fCB0b3BpYyA9PSBUT1BJQ19MT0NfSU5GT19GUk9NX1NFUlZFUikge1xuICAgICAgICAgICAgLy9EYXRhIGZyb20gdGhlIGxvY2FsaXphdGlvbiBzZXJ2ZXIgb3IgdmlydHVhbCByb2JvdHNcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBSRUFMSVRZID0gQ29uZmlnLm1peGVkUmVhbGl0eS5yb2JvdHM7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgb25seSB0aGUgcmVjZWl2ZWQgZGF0YSBpcyBzYW1lIGFzIGNvbmZpZ3VyZWQgcmVhbGl0eVxuICAgICAgICAgICAgICAgIC8vIG9yIGNvbmZpZ3VyYXRpb24gYWxsb3dlZCBtaXhlZCByZWFsaXR5XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhdmUgZGF0YSBvbiB0aGlzIHJlYWxpdHlcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgaWQsIHgsIHksIGhlYWRpbmcgfSA9IGRhdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFsaXR5ID0gZGF0YVtpXS5yZWFsaXR5ID09IHVuZGVmaW5lZCA/ICdWJyA6IGRhdGFbaV0ucmVhbGl0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWxpdHkgPT09IFJFQUxJVFkgfHwgUkVBTElUWSA9PT0gJ00nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG9ubHkgaWYgcm9ib3RzIG1hdGNoIHdpdGggcGxhdGZvcm0ncyBhbGxvd2VkIHJlYWxpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LnJvYm90LmV4aXN0cyhpZCkgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdC5jcmVhdGUoaWQsIHgsIHksIGhlYWRpbmcsIHJlYWxpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdC5tb3ZlKGlkLCB4LCB5LCBoZWFkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnJvYm90LnNldFJlYWxpdHkoaWQsIHJlYWxpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVhbGl0eSBub3QgbWF0Y2hpbmc7IHJlbW92ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvYm90LmRlbGV0ZShpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0b3BpYyA9PSBUT1BJQ19PQlNUQUNMRVNfTElTVCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIG9ic3RhY2xlcyBpbiB0aGUgYXJlbmFcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cub2JzdGFjbGVzLmNyZWF0ZUxpc3QoZGF0YSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0b3BpYyA9PSBUT1BJQ19PQlNUQUNMRVNfREVMRVRFKSB7XG4gICAgICAgICAgICAvLyBEZWxldGUgb2JzdGFjbGUgZ2l2ZW4gaW4gdGhlIGlkXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShtc2cpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5vYnN0YWNsZXMuZGVsZXRlSWZFeGlzdHMoZGF0YS5pZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9waWMgPT0gVE9QSUNfT0JTVEFDTEVTX0RFTEVURV9BTEwpIHtcbiAgICAgICAgICAgIC8vIERlbGV0ZSBhbGwgb2JzdGFjbGVzXG4gICAgICAgICAgICB3aW5kb3cub2JzdGFjbGVzLmRlbGV0ZUFsbCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRvcGljID09IFRPUElDX0NIQU5HRV9DT0xPUikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShtc2cpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yb2JvdC5jaGFuZ2VDb2xvcihkYXRhLmlkLCBkYXRhLlIsIGRhdGEuRywgZGF0YS5CLCBkYXRhLmFtYmllbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodG9waWMgPT0gVE9QSUNfUk9CT1RfQlJPQURDQVNUKSB7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGEgcG9wdXAgbWVzc2FnZVxuICAgICAgICAgICAgLy8gVE9ETzogRG8gdGhpcyBieSBhIGdlbmVyYWxpemVkIGZ1bmN0aW9uIGNhbGxcblxuICAgICAgICAgICAgaWYgKG1zZyAhPSAnSUQ/IC0xJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG0gPSAnQnJvYWRjYXN0IE1lc3NhZ2U6ICcgKyBtc2cuc3BsaXQoJyAnKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gMTAwMCArIG1zZy5sZW5ndGggKiA5NTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXNnLWJveCcpO1xuICAgICAgICAgICAgICAgIGRpc3AuaW5uZXJIVE1MID0gbTtcbiAgICAgICAgICAgICAgICBkaXNwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtc2ctYm94Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9LCB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0b3BpYyA9PSBUT1BJQ19NQU5BR0VNRU5UX1ZJU1VBTElaRVIpIHtcbiAgICAgICAgICAgIGlmIChtc2cgPT09ICdSRUZSRVNIJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwYWdlIHJlZnJlc2ggcmVxdWVzdCcpO1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtc2cuc3RhcnRzV2l0aCgnTVNHJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtID0gJ05vdGljZTogJyArIG1zZy5zdWJzdHJpbmcoNCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IDIwMDAgKyBtLmxlbmd0aCAqIDk1O1xuXG4gICAgICAgICAgICAgICAgLy8gRGlzcGxheSBhIHBvcHVwIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBEbyB0aGlzIGJ5IGEgZ2VuZXJhbGl6ZWQgZnVuY3Rpb24gY2FsbFxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXNnLWJveCcpO1xuICAgICAgICAgICAgICAgIGRpc3AuaW5uZXJIVE1MID0gbTtcbiAgICAgICAgICAgICAgICBkaXNwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtc2ctYm94Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9LCB0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz5NYW5hZ2VtZW50OicsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodG9waWMgPT0gVE9QSUNfTUFOQUdFTUVOVF9TTkFQU0hPVCkge1xuICAgICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBKU09OLnBhcnNlKG1zZyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUm9ib3Q6U25hcHNob3QnLCBzbmFwc2hvdCk7XG4gICAgICAgICAgICBpZiAoc25hcHNob3QgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwLFxuICAgICAgICAgICAgICAgICAgICBzdWJFbGVtZW50O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbXNnLWJveCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21zZy1jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdpZCcsICdtc2ctY29udGVudCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgICAgICAgICAgdGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gYFJvYm90IFske3NuYXBzaG90LmlkfV0gU25hcHNob3RgO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIGluIHNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc25hcHNob3QsIHZhcmlhYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJpYWJsZSA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc25hcHNob3QuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViRWxlbWVudC50ZXh0Q29udGVudCA9IGAke2tleX06ICR7dmFsdWV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YkVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHt2YXJpYWJsZX06ICR7SlNPTi5zdHJpbmdpZnkoc25hcHNob3RbdmFyaWFibGVdKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChzdWJFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXNwLnJlcGxhY2VDaGlsZChjb250ZW50LCBwcmV2Q29udGVudCk7XG4gICAgICAgICAgICAgICAgZGlzcC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICBkaXNwLnN0eWxlLm9wYWNpdHkgPSAnMC41JztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcC5zdHlsZS5vcGFjaXR5ID0gJzEuMCc7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Auc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9LCA2MDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN1YnNjcmliZSh0b3BpYywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3ViVG9waWMgPSB3aW5kb3cuY2hhbm5lbCArICcvJyArIHRvcGljO1xuICAgICAgICB0aGlzLmNsaWVudC5zdWJzY3JpYmUoc3ViVG9waWMpO1xuICAgICAgICBjb25zb2xlLmxvZygnTVFUVDogc3Vic2NyaWJlZCcsIHN1YlRvcGljKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcHVibGlzaCh0b3BpYywgbWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHBheWxvYWQgPSBuZXcgTVFUVC5NZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICBjb25zdCBwdWJUb3BpYyA9IHdpbmRvdy5jaGFubmVsICsgJy8nICsgdG9waWM7XG4gICAgICAgIHBheWxvYWQuZGVzdGluYXRpb25OYW1lID0gcHViVG9waWM7XG4gICAgICAgIHRoaXMuY2xpZW50LnNlbmQocGF5bG9hZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdNUVRUOiBwdWJsaXNoZWQnLCBwdWJUb3BpYyk7XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5pbXBvcnQgTWF0ZXJpYWwgZnJvbSAnLi4vY29tcG9uZW50cy9tYXRlcmlhbCc7XG5pbXBvcnQgSGVscGVycyBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IEJ1ZmZlckdlb21ldHJ5VXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy9idWZmZXJHZW9tZXRyeVV0aWxzJztcbmltcG9ydCB7IEdMVEZMb2FkZXIgfSBmcm9tICcuLi9sb2FkZXJzL0dMVEZMb2FkZXInO1xuaW1wb3J0IENvbmZpZyBmcm9tICcuLi8uLi9kYXRhL2NvbmZpZyc7XG5cbi8vIExvYWRzIGluIGEgc2luZ2xlIG9iamVjdCBmcm9tIHRoZSBjb25maWcgZmlsZVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kZWwge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCBtYW5hZ2VyLCB0ZXh0dXJlcykge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMudGV4dHVyZXMgPSB0ZXh0dXJlcztcbiAgICAgICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcblxuICAgICAgICB0aGlzLm9iaiA9IG51bGw7XG4gICAgICAgIHRoaXMucmVmID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb2FkKHR5cGUpIHtcbiAgICAgICAgLy8gTWFuYWdlciBpcyBwYXNzZWQgaW4gdG8gbG9hZGVyIHRvIGRldGVybWluZSB3aGVuIGxvYWRpbmcgZG9uZSBpbiBtYWluXG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdnbHRmJzpcbiAgICAgICAgICAgICAgICAvLyBMb2FkIG1vZGVsIHdpdGggc2VsZWN0ZWQgbG9hZGVyXG4gICAgICAgICAgICAgICAgbmV3IEdMVEZMb2FkZXIodGhpcy5tYW5hZ2VyKS5sb2FkKFxuICAgICAgICAgICAgICAgICAgICBDb25maWcubW9kZWxzW0NvbmZpZy5tb2RlbC5zZWxlY3RlZF0ucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgKGdsdGYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gZ2x0Zi5zY2VuZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZXNoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29uZmlnLnNoYWRvdy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmUudHJhdmVyc2UoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaXNNZXNoIHx8IG5vZGUuaXNMaWdodCkgbm9kZS5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaXNNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm1hdGVyaWFsLndpcmVmcmFtZSA9IENvbmZpZy5tZXNoLndpcmVmcmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2ggPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqID0gbWVzaDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgQnVmZmVyR2VvbWV0cnlVdGlscy5jb21wdXRlVGFuZ2VudHMobWVzaC5nZW9tZXRyeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuc2NhbGUubXVsdGlwbHlTY2FsYXIoMC4yNSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjZW5lLmFkZChncm91cCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmID0gZ3JvdXA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBtYXRyaXhXb3JsZCBpcyB1cCB0byBkYXRlIGZvciB0aGUgYm94aGVscGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5hZGQobWVzaCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBzY2VuZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQoc2NlbmUpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBIZWxwZXJzLmxvZ1Byb2dyZXNzKCksXG4gICAgICAgICAgICAgICAgICAgIEhlbHBlcnMubG9nRXJyb3IoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgLy8gTG9hZCBtb2RlbCB3aXRoIE9iamVjdExvYWRlclxuICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5PYmplY3RMb2FkZXIodGhpcy5tYW5hZ2VyKS5sb2FkKFxuICAgICAgICAgICAgICAgICAgICBDb25maWcubW9kZWxzW0NvbmZpZy5tb2RlbC5zZWxlY3RlZF0ucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgKG9iaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRyYXZlcnNlKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG1hdGVyaWFsIGZvciBtZXNoIGFuZCBzZXQgaXRzIG1hcCB0byB0ZXh0dXJlIGJ5IG5hbWUgZnJvbSBwcmVsb2FkZWQgdGV4dHVyZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoMHhmZmZmZmYpLnN0YW5kYXJkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5tYXAgPSB0aGlzLnRleHR1cmVzLlVWO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0byBjYXN0IGFuZCByZWNlaXZlIHNoYWRvdyBpZiBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb25maWcuc2hhZG93LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHByb3AgdG8gb2JqIHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBmcm9tIG91dHNpZGUgdGhlIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmID0gb2JqO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2NhbGUubXVsdGlwbHlTY2FsYXIoQ29uZmlnLm1vZGVsc1tDb25maWcubW9kZWwuc2VsZWN0ZWRdLnNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKG9iaik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIEhlbHBlcnMubG9nUHJvZ3Jlc3MoKSxcbiAgICAgICAgICAgICAgICAgICAgSGVscGVycy5sb2dFcnJvcigpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVubG9hZCgpIHtcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmUodGhpcy5yZWYpO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbi8vIFByb21pc2UgcG9seWZpbGwgZm9yIElFXG5pbXBvcnQgeyBQcm9taXNlIH0gZnJvbSAnZXM2LXByb21pc2UnO1xuXG5pbXBvcnQgSGVscGVycyBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCBDb25maWcgZnJvbSAnLi4vLi4vZGF0YS9jb25maWcnO1xuXG4vLyBUaGlzIGNsYXNzIHByZWxvYWRzIGFsbCB0ZXh0dXJlcyBpbiB0aGUgaW1hZ2VGaWxlcyBhcnJheSBpbiB0aGUgQ29uZmlnIHZpYSBFUzYgUHJvbWlzZXMuXG4vLyBPbmNlIGFsbCB0ZXh0dXJlcyBhcmUgZG9uZSBsb2FkaW5nIHRoZSBtb2RlbCBpdHNlbGYgd2lsbCBiZSBsb2FkZWQgYWZ0ZXIgdGhlIFByb21pc2UgLnRoZW4oKSBjYWxsYmFjay5cbi8vIFVzaW5nIHByb21pc2VzIHRvIHByZWxvYWQgdGV4dHVyZXMgcHJldmVudHMgaXNzdWVzIHdoZW4gYXBwbHlpbmcgdGV4dHVyZXMgdG8gbWF0ZXJpYWxzXG4vLyBiZWZvcmUgdGhlIHRleHR1cmVzIGhhdmUgbG9hZGVkLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFByb3AgdGhhdCB3aWxsIGNvbnRhaW4gYWxsIGxvYWRlZCB0ZXh0dXJlc1xuICAgICAgICB0aGlzLnRleHR1cmVzID0ge307XG4gICAgfVxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcbiAgICAgICAgY29uc3QgbWF4QW5pc290cm9weSA9IENvbmZpZy5tYXhBbmlzb3Ryb3B5O1xuICAgICAgICBjb25zdCBpbWFnZUZpbGVzID0gQ29uZmlnLnRleHR1cmUuaW1hZ2VGaWxlcztcbiAgICAgICAgY29uc3QgcHJvbWlzZUFycmF5ID0gW107XG5cbiAgICAgICAgbG9hZGVyLnNldFBhdGgoQ29uZmlnLnRleHR1cmUucGF0aCk7XG5cbiAgICAgICAgaW1hZ2VGaWxlcy5mb3JFYWNoKChpbWFnZUZpbGUpID0+IHtcbiAgICAgICAgICAgIC8vIEFkZCBhbiBpbmRpdmlkdWFsIFByb21pc2UgZm9yIGVhY2ggaW1hZ2UgaW4gYXJyYXlcbiAgICAgICAgICAgIHByb21pc2VBcnJheS5wdXNoKFxuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWFjaCBQcm9taXNlIHdpbGwgYXR0ZW1wdCB0byBsb2FkIHRoZSBpbWFnZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VGaWxlLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBnZXRzIGNhbGxlZCBvbiBsb2FkIHdpdGggdGhlIGxvYWRlZCB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAodGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuYW5pc290cm9weSA9IG1heEFuaXNvdHJvcHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNvbHZlIFByb21pc2Ugd2l0aCBvYmplY3Qgb2YgdGV4dHVyZSBpZiBpdCBpcyBpbnN0YW5jZSBvZiBUSFJFRS5UZXh0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kZWxPQkogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbE9CSltpbWFnZUZpbGUubmFtZV0gPSB0ZXh0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbE9CSltpbWFnZUZpbGUubmFtZV0gaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlKSByZXNvbHZlKG1vZGVsT0JKKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBIZWxwZXJzLmxvZ1Byb2dyZXNzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAoeGhyKSA9PiByZWplY3QobmV3IEVycm9yKHhociArICdBbiBlcnJvciBvY2N1cnJlZCBsb2FkaW5nIHdoaWxlIGxvYWRpbmcgJyArIGltYWdlRmlsZS5pbWFnZSkpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBhbGwgUHJvbWlzZXMgaW4gYXJyYXkgYW5kIHJldHVybiBhbm90aGVyIFByb21pc2Ugd2hlbiBhbGwgaGF2ZSByZXNvbHZlZCBvciBjb25zb2xlIGxvZyByZWFzb24gd2hlbiBhbnkgcmVqZWN0XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlQXJyYXkpLnRoZW4oXG4gICAgICAgICAgICAodGV4dHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRleHR1cmVzIHByb3Agb2JqZWN0IHRvIGhhdmUgbmFtZSBiZSB0aGUgcmVzb2x2ZWQgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlc1tPYmplY3Qua2V5cyh0ZXh0dXJlc1tpXSlbMF1dID0gdGV4dHVyZXNbaV1bT2JqZWN0LmtleXModGV4dHVyZXNbaV0pWzBdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHJlYXNvbikgPT4gY29uc29sZS5sb2cocmVhc29uKVxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcyc7XHJcblxyXG5sZXQgcmVzb2x2ZWRDb25maWc7XHJcblxyXG4vLyBUaGlzIG9iamVjdCBjb250YWlucyB0aGUgc3RhdGUgb2YgdGhlIGFwcFxyXG5jb25zdCBjb25maWcgPSB7XHJcbiAgICBzY2FsZTogMSxcclxuICAgIGFyZW5hOiB7XHJcbiAgICAgICAgc2l6ZTogMTgwLFxyXG4gICAgICAgIG1pblg6IC05MCxcclxuICAgICAgICBtYXhYOiA5MCxcclxuICAgICAgICBtaW5ZOiAtOTAsXHJcbiAgICAgICAgbWF4WTogOTBcclxuICAgIH0sXHJcbiAgICBtcXR0OiB7XHJcbiAgICAgICAgc2VydmVyOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGVyYS1zd2FybS1zZXJ2ZXInKSB8fCAnd2Vic2VydmljZXMuY2V5a29kLmNvbScsXHJcbiAgICAgICAgcG9ydDogcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3BlcmEtc3dhcm0tcG9ydCcpKSB8fCA4ODgzLFxyXG4gICAgICAgIHBhdGg6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwZXJhLXN3YXJtLXBhdGgnKSB8fCAnL21xdHQnLFxyXG4gICAgICAgIGNoYW5uZWw6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwZXJhLXN3YXJtLWNoYW5uZWwnKSB8fCAndjEnXHJcbiAgICB9LFxyXG4gICAgbWl4ZWRSZWFsaXR5OiB7XHJcbiAgICAgICAgb2JzdGFjbGVzOiAnTScsXHJcbiAgICAgICAgcm9ib3RzOiAnTSdcclxuICAgIH0sXHJcbiAgICBzZWxlY3RlZFJlYWxpdHk6ICdNJyxcclxuICAgIHNlbGVjdGVkUmVhbGl0aWVzOiB7XHJcbiAgICAgICAgcmVhbDogdHJ1ZSxcclxuICAgICAgICB2aXJ0dWFsOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgaGlkZGVuT3BhY2l0eTogMC4zLFxyXG4gICAgaXNEZXY6IHRydWUsXHJcbiAgICBpc1Nob3dpbmdTdGF0czogdHJ1ZSxcclxuICAgIGlzU2hvd2luZ0xhYmxlczogdHJ1ZSxcclxuICAgIGxhYmVsc1Zpc2liaWxpdHk6IHtcclxuICAgICAgICBvYnN0YWNsZXM6IGZhbHNlLFxyXG4gICAgICAgIHJvYm90czogZmFsc2VcclxuICAgIH0sXHJcbiAgICBpc1Nob3dpbmdSb2JvdFNuYXBzaG90czogdHJ1ZSxcclxuICAgIGlzTG9hZGVkOiBmYWxzZSxcclxuICAgIGlzVHdlZW5pbmc6IGZhbHNlLFxyXG4gICAgaXNSb3RhdGluZzogZmFsc2UsXHJcbiAgICBpc01vdXNlTW92aW5nOiBmYWxzZSxcclxuICAgIGlzTW91c2VPdmVyOiBmYWxzZSxcclxuICAgIG1heEFuaXNvdHJvcHk6IDEsXHJcbiAgICBkcHI6IDEsXHJcbiAgICBlYXNpbmc6IFRXRUVOLkVhc2luZy5RdWFkcmF0aWMuSW5PdXQsXHJcbiAgICBkdXJhdGlvbjogNTAwLFxyXG4gICAgdGV4dHVyZToge1xyXG4gICAgICAgIHBhdGg6ICcuL2Fzc2V0cy90ZXh0dXJlcy8nLFxyXG4gICAgICAgIGltYWdlRmlsZXM6IFt7IG5hbWU6ICdVVicsIGltYWdlOiAnVVZfR3JpZF9TbS5qcGcnIH1dXHJcbiAgICB9LFxyXG4gICAgbWVzaDoge1xyXG4gICAgICAgIGVuYWJsZUhlbHBlcjogZmFsc2UsXHJcbiAgICAgICAgd2lyZWZyYW1lOiBmYWxzZSxcclxuICAgICAgICB0cmFuc2x1Y2VudDogZmFsc2UsXHJcbiAgICAgICAgbWF0ZXJpYWw6IHtcclxuICAgICAgICAgICAgY29sb3I6IDB4ZmZmZmZmLFxyXG4gICAgICAgICAgICBlbWlzc2l2ZTogMHhmZmZmZmZcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZm9nOiB7XHJcbiAgICAgICAgY29sb3I6IDB4ZmZmZmZmLFxyXG4gICAgICAgIG5lYXI6IDAuMDAwMjVcclxuICAgIH0sXHJcbiAgICBjYW1lcmE6IHtcclxuICAgICAgICBmb3Y6IDUwLFxyXG4gICAgICAgIG5lYXI6IDUwLFxyXG4gICAgICAgIGZhcjogMTAwMCxcclxuICAgICAgICBhc3BlY3Q6IDEsXHJcbiAgICAgICAgcG9zWDogMCxcclxuICAgICAgICBwb3NZOiAwLFxyXG4gICAgICAgIHBvc1o6IDBcclxuICAgIH0sXHJcbiAgICBjb250cm9sczoge1xyXG4gICAgICAgIGF1dG9Sb3RhdGU6IGZhbHNlLFxyXG4gICAgICAgIGF1dG9Sb3RhdGVTcGVlZDogLTEuNSxcclxuICAgICAgICByb3RhdGVTcGVlZDogMS41LFxyXG4gICAgICAgIHpvb21TcGVlZDogMC44LFxyXG4gICAgICAgIG1pbkRpc3RhbmNlOiAxMDAsXHJcbiAgICAgICAgbWF4RGlzdGFuY2U6IDgwMCxcclxuICAgICAgICBtaW5Qb2xhckFuZ2xlOiAwIC8qTWF0aC5QSSAvIDYsKi8sXHJcbiAgICAgICAgbWF4UG9sYXJBbmdsZTogKDcgLyAxNikgKiBNYXRoLlBJLFxyXG4gICAgICAgIG1pbkF6aW11dGhBbmdsZTogLUluZmluaXR5LFxyXG4gICAgICAgIG1heEF6aW11dGhBbmdsZTogSW5maW5pdHksXHJcbiAgICAgICAgZW5hYmxlRGFtcGluZzogdHJ1ZSxcclxuICAgICAgICBkYW1waW5nRmFjdG9yOiAwLjUsXHJcbiAgICAgICAgZW5hYmxlWm9vbTogdHJ1ZSxcclxuICAgICAgICB0YXJnZXQ6IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgejogMFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBhbWJpZW50TGlnaHQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGNvbG9yOiAweDE0MTQxNFxyXG4gICAgfSxcclxuICAgIGRpcmVjdGlvbmFsTGlnaHQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGNvbG9yOiAweGYwZjBmMCxcclxuICAgICAgICBpbnRlbnNpdHk6IDAuNCxcclxuICAgICAgICB4OiAtNzUsXHJcbiAgICAgICAgeTogMjgwLFxyXG4gICAgICAgIHo6IDE1MFxyXG4gICAgfSxcclxuICAgIHNoYWRvdzoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgaGVscGVyRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgYmlhczogMCxcclxuICAgICAgICBtYXBXaWR0aDogMjA0OCxcclxuICAgICAgICBtYXBIZWlnaHQ6IDIwNDgsXHJcbiAgICAgICAgbmVhcjogMjUwLFxyXG4gICAgICAgIGZhcjogNDAwLFxyXG4gICAgICAgIHRvcDogMTAwLFxyXG4gICAgICAgIHJpZ2h0OiAxMDAsXHJcbiAgICAgICAgYm90dG9tOiAtMTAwLFxyXG4gICAgICAgIGxlZnQ6IC0xMDBcclxuICAgIH0sXHJcbiAgICBwb2ludExpZ2h0OiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBjb2xvcjogMHhmZmZmZmYsXHJcbiAgICAgICAgaW50ZW5zaXR5OiAwLjM0LFxyXG4gICAgICAgIGRpc3RhbmNlOiAxMTUsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHo6IDBcclxuICAgIH0sXHJcbiAgICBoZW1pTGlnaHQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGNvbG9yOiAweGM4YzhjOCxcclxuICAgICAgICBncm91bmRDb2xvcjogMHhmZmZmZmYsXHJcbiAgICAgICAgaW50ZW5zaXR5OiAwLjU1LFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB6OiAwXHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBDaGVjayBsb2NhbHN0b3JhZ2UgZm9yIHVwZGF0ZWQgY29uZmlnLCBpZiBub3QgdXNlIGFib3ZlIGNvbmZpZ1xyXG5jb25zdCBzdG9yZWRDb25maWcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShkb2N1bWVudC5sb2NhdGlvbi5ocmVmICsgJy5jb25maWcnKTtcclxucmVzb2x2ZWRDb25maWcgPSBzdG9yZWRDb25maWcgIT09IG51bGwgJiYgc3RvcmVkQ29uZmlnICE9PSB1bmRlZmluZWQgPyBKU09OLnBhcnNlKHN0b3JlZENvbmZpZykgOiBjb25maWc7XHJcblxyXG4vLyBtZXRob2QgdG8gcHJlc2lzdCBjb25maWcgZGF0YSB3aXRoIGxvY2FsU3RvcmFnZVxyXG5leHBvcnQgY29uc3Qgc2F2ZUNvbmZpZyA9IChkYXRhKSA9PiB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShkb2N1bWVudC5sb2NhdGlvbi5ocmVmICsgJy5jb25maWcnLCBKU09OLnN0cmluZ2lmeSh7IC4uLmNvbmZpZywgLi4uZGF0YSB9KSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlZENvbmZpZztcclxuIiwiLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmltcG9ydCB7XG4gICAgQnVmZmVyQXR0cmlidXRlLFxuICAgIEJ1ZmZlckdlb21ldHJ5LFxuICAgIEludGVybGVhdmVkQnVmZmVyLFxuICAgIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLFxuICAgIFRyaWFuZ2xlRmFuRHJhd01vZGUsXG4gICAgVHJpYW5nbGVTdHJpcERyYXdNb2RlLFxuICAgIFRyaWFuZ2xlc0RyYXdNb2RlLFxuICAgIFZlY3RvcjIsXG4gICAgVmVjdG9yM1xufSBmcm9tICd0aHJlZSc7XG5cbnZhciBCdWZmZXJHZW9tZXRyeVV0aWxzID0ge1xuICAgIGNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKGdlb21ldHJ5KSB7XG4gICAgICAgIHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cbiAgICAgICAgLy8gYmFzZWQgb24gaHR0cDovL3d3dy50ZXJhdGhvbi5jb20vY29kZS90YW5nZW50Lmh0bWxcbiAgICAgICAgLy8gKHBlciB2ZXJ0ZXggdGFuZ2VudHMpXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaW5kZXggPT09IG51bGwgfHxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYXR0cmlidXRlcy51diA9PT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLmNvbXB1dGVUYW5nZW50cygpIGZhaWxlZC4gTWlzc2luZyByZXF1aXJlZCBhdHRyaWJ1dGVzIChpbmRleCwgcG9zaXRpb24sIG5vcm1hbCBvciB1diknXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG4gICAgICAgIHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XG4gICAgICAgIHZhciB1dnMgPSBhdHRyaWJ1dGVzLnV2LmFycmF5O1xuXG4gICAgICAgIHZhciBuVmVydGljZXMgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMztcblxuICAgICAgICBpZiAoYXR0cmlidXRlcy50YW5nZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgndGFuZ2VudCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSg0ICogblZlcnRpY2VzKSwgNCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhbmdlbnRzID0gYXR0cmlidXRlcy50YW5nZW50LmFycmF5O1xuXG4gICAgICAgIHZhciB0YW4xID0gW10sXG4gICAgICAgICAgICB0YW4yID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuVmVydGljZXM7IGkrKykge1xuICAgICAgICAgICAgdGFuMVtpXSA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgICAgICB0YW4yW2ldID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2QSA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgICAgICB2QiA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgICAgICB2QyA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgICAgICB1dkEgPSBuZXcgVmVjdG9yMigpLFxuICAgICAgICAgICAgdXZCID0gbmV3IFZlY3RvcjIoKSxcbiAgICAgICAgICAgIHV2QyA9IG5ldyBWZWN0b3IyKCksXG4gICAgICAgICAgICBzZGlyID0gbmV3IFZlY3RvcjMoKSxcbiAgICAgICAgICAgIHRkaXIgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRyaWFuZ2xlKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHZBLmZyb21BcnJheShwb3NpdGlvbnMsIGEgKiAzKTtcbiAgICAgICAgICAgIHZCLmZyb21BcnJheShwb3NpdGlvbnMsIGIgKiAzKTtcbiAgICAgICAgICAgIHZDLmZyb21BcnJheShwb3NpdGlvbnMsIGMgKiAzKTtcblxuICAgICAgICAgICAgdXZBLmZyb21BcnJheSh1dnMsIGEgKiAyKTtcbiAgICAgICAgICAgIHV2Qi5mcm9tQXJyYXkodXZzLCBiICogMik7XG4gICAgICAgICAgICB1dkMuZnJvbUFycmF5KHV2cywgYyAqIDIpO1xuXG4gICAgICAgICAgICB2Qi5zdWIodkEpO1xuICAgICAgICAgICAgdkMuc3ViKHZBKTtcblxuICAgICAgICAgICAgdXZCLnN1Yih1dkEpO1xuICAgICAgICAgICAgdXZDLnN1Yih1dkEpO1xuXG4gICAgICAgICAgICB2YXIgciA9IDEuMCAvICh1dkIueCAqIHV2Qy55IC0gdXZDLnggKiB1dkIueSk7XG5cbiAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZSBkZWdlbmVyYXRlIHV2IHRyaWFuZ2xlcyBoYXZpbmcgY29pbmNpZGVudCBvciBjb2xpbmVhciB2ZXJ0aWNlc1xuXG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKHIpKSByZXR1cm47XG5cbiAgICAgICAgICAgIHNkaXIuY29weSh2QikubXVsdGlwbHlTY2FsYXIodXZDLnkpLmFkZFNjYWxlZFZlY3Rvcih2QywgLXV2Qi55KS5tdWx0aXBseVNjYWxhcihyKTtcbiAgICAgICAgICAgIHRkaXIuY29weSh2QykubXVsdGlwbHlTY2FsYXIodXZCLngpLmFkZFNjYWxlZFZlY3Rvcih2QiwgLXV2Qy54KS5tdWx0aXBseVNjYWxhcihyKTtcblxuICAgICAgICAgICAgdGFuMVthXS5hZGQoc2Rpcik7XG4gICAgICAgICAgICB0YW4xW2JdLmFkZChzZGlyKTtcbiAgICAgICAgICAgIHRhbjFbY10uYWRkKHNkaXIpO1xuXG4gICAgICAgICAgICB0YW4yW2FdLmFkZCh0ZGlyKTtcbiAgICAgICAgICAgIHRhbjJbYl0uYWRkKHRkaXIpO1xuICAgICAgICAgICAgdGFuMltjXS5hZGQodGRpcik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG4gICAgICAgIGlmIChncm91cHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBncm91cHMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IGluZGljZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07XG5cbiAgICAgICAgICAgIHZhciBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMykge1xuICAgICAgICAgICAgICAgIGhhbmRsZVRyaWFuZ2xlKGluZGljZXNbaiArIDBdLCBpbmRpY2VzW2ogKyAxXSwgaW5kaWNlc1tqICsgMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRtcCA9IG5ldyBWZWN0b3IzKCksXG4gICAgICAgICAgICB0bXAyID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgdmFyIG4gPSBuZXcgVmVjdG9yMygpLFxuICAgICAgICAgICAgbjIgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICB2YXIgdywgdCwgdGVzdDtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVWZXJ0ZXgodikge1xuICAgICAgICAgICAgbi5mcm9tQXJyYXkobm9ybWFscywgdiAqIDMpO1xuICAgICAgICAgICAgbjIuY29weShuKTtcblxuICAgICAgICAgICAgdCA9IHRhbjFbdl07XG5cbiAgICAgICAgICAgIC8vIEdyYW0tU2NobWlkdCBvcnRob2dvbmFsaXplXG5cbiAgICAgICAgICAgIHRtcC5jb3B5KHQpO1xuICAgICAgICAgICAgdG1wLnN1YihuLm11bHRpcGx5U2NhbGFyKG4uZG90KHQpKSkubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoYW5kZWRuZXNzXG5cbiAgICAgICAgICAgIHRtcDIuY3Jvc3NWZWN0b3JzKG4yLCB0KTtcbiAgICAgICAgICAgIHRlc3QgPSB0bXAyLmRvdCh0YW4yW3ZdKTtcbiAgICAgICAgICAgIHcgPSB0ZXN0IDwgMC4wID8gLTEuMCA6IDEuMDtcblxuICAgICAgICAgICAgdGFuZ2VudHNbdiAqIDRdID0gdG1wLng7XG4gICAgICAgICAgICB0YW5nZW50c1t2ICogNCArIDFdID0gdG1wLnk7XG4gICAgICAgICAgICB0YW5nZW50c1t2ICogNCArIDJdID0gdG1wLno7XG4gICAgICAgICAgICB0YW5nZW50c1t2ICogNCArIDNdID0gdztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cHNbaV07XG5cbiAgICAgICAgICAgIHZhciBzdGFydCA9IGdyb3VwLnN0YXJ0O1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSBzdGFydCwgamwgPSBzdGFydCArIGNvdW50OyBqIDwgamw7IGogKz0gMykge1xuICAgICAgICAgICAgICAgIGhhbmRsZVZlcnRleChpbmRpY2VzW2ogKyAwXSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlVmVydGV4KGluZGljZXNbaiArIDFdKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVWZXJ0ZXgoaW5kaWNlc1tqICsgMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSAge0FycmF5PEJ1ZmZlckdlb21ldHJ5Pn0gZ2VvbWV0cmllc1xuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IHVzZUdyb3Vwc1xuICAgICAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fVxuICAgICAqL1xuICAgIG1lcmdlQnVmZmVyR2VvbWV0cmllczogZnVuY3Rpb24gKGdlb21ldHJpZXMsIHVzZUdyb3Vwcykge1xuICAgICAgICB2YXIgaXNJbmRleGVkID0gZ2VvbWV0cmllc1swXS5pbmRleCAhPT0gbnVsbDtcblxuICAgICAgICB2YXIgYXR0cmlidXRlc1VzZWQgPSBuZXcgU2V0KE9iamVjdC5rZXlzKGdlb21ldHJpZXNbMF0uYXR0cmlidXRlcykpO1xuICAgICAgICB2YXIgbW9ycGhBdHRyaWJ1dGVzVXNlZCA9IG5ldyBTZXQoT2JqZWN0LmtleXMoZ2VvbWV0cmllc1swXS5tb3JwaEF0dHJpYnV0ZXMpKTtcblxuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB2YXIgbW9ycGhBdHRyaWJ1dGVzID0ge307XG5cbiAgICAgICAgdmFyIG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cmllc1swXS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuICAgICAgICB2YXIgbWVyZ2VkR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb21ldHJpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGdlb21ldHJpZXNbaV07XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlc0NvdW50ID0gMDtcblxuICAgICAgICAgICAgLy8gZW5zdXJlIHRoYXQgYWxsIGdlb21ldHJpZXMgYXJlIGluZGV4ZWQsIG9yIG5vbmVcblxuICAgICAgICAgICAgaWYgKGlzSW5kZXhlZCAhPT0gKGdlb21ldHJ5LmluZGV4ICE9PSBudWxsKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZmFpbGVkIHdpdGggZ2VvbWV0cnkgYXQgaW5kZXggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcuIEFsbCBnZW9tZXRyaWVzIG11c3QgaGF2ZSBjb21wYXRpYmxlIGF0dHJpYnV0ZXM7IG1ha2Ugc3VyZSBpbmRleCBhdHRyaWJ1dGUgZXhpc3RzIGFtb25nIGFsbCBnZW9tZXRyaWVzLCBvciBpbiBub25lIG9mIHRoZW0uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGdhdGhlciBhdHRyaWJ1dGVzLCBleGl0IGVhcmx5IGlmIHRoZXkncmUgZGlmZmVyZW50XG5cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1VzZWQuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZhaWxlZCB3aXRoIGdlb21ldHJ5IGF0IGluZGV4ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuIEFsbCBnZW9tZXRyaWVzIG11c3QgaGF2ZSBjb21wYXRpYmxlIGF0dHJpYnV0ZXM7IG1ha2Ugc3VyZSBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIiBhdHRyaWJ1dGUgZXhpc3RzIGFtb25nIGFsbCBnZW9tZXRyaWVzLCBvciBpbiBub25lIG9mIHRoZW0uJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSBhdHRyaWJ1dGVzW25hbWVdID0gW107XG5cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW25hbWVdLnB1c2goZ2VvbWV0cnkuYXR0cmlidXRlc1tuYW1lXSk7XG5cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzQ291bnQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZW5zdXJlIGdlb21ldHJpZXMgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgYXR0cmlidXRlc1xuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlc0NvdW50ICE9PSBhdHRyaWJ1dGVzVXNlZC5zaXplKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2l0aCBnZW9tZXRyeSBhdCBpbmRleCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJy4gTWFrZSBzdXJlIGFsbCBnZW9tZXRyaWVzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGF0dHJpYnV0ZXMuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGdhdGhlciBtb3JwaCBhdHRyaWJ1dGVzLCBleGl0IGVhcmx5IGlmIHRoZXkncmUgZGlmZmVyZW50XG5cbiAgICAgICAgICAgIGlmIChtb3JwaFRhcmdldHNSZWxhdGl2ZSAhPT0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyR2VvbWV0cmllcygpIGZhaWxlZCB3aXRoIGdlb21ldHJ5IGF0IGluZGV4ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnLiAubW9ycGhUYXJnZXRzUmVsYXRpdmUgbXVzdCBiZSBjb25zaXN0ZW50IHRocm91Z2hvdXQgYWxsIGdlb21ldHJpZXMuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtb3JwaEF0dHJpYnV0ZXNVc2VkLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2l0aCBnZW9tZXRyeSBhdCBpbmRleCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLiAgLm1vcnBoQXR0cmlidXRlcyBtdXN0IGJlIGNvbnNpc3RlbnQgdGhyb3VnaG91dCBhbGwgZ2VvbWV0cmllcy4nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtb3JwaEF0dHJpYnV0ZXNbbmFtZV0gPT09IHVuZGVmaW5lZCkgbW9ycGhBdHRyaWJ1dGVzW25hbWVdID0gW107XG5cbiAgICAgICAgICAgICAgICBtb3JwaEF0dHJpYnV0ZXNbbmFtZV0ucHVzaChnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXNbbmFtZV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBnYXRoZXIgLnVzZXJEYXRhXG5cbiAgICAgICAgICAgIG1lcmdlZEdlb21ldHJ5LnVzZXJEYXRhLm1lcmdlZFVzZXJEYXRhID0gbWVyZ2VkR2VvbWV0cnkudXNlckRhdGEubWVyZ2VkVXNlckRhdGEgfHwgW107XG4gICAgICAgICAgICBtZXJnZWRHZW9tZXRyeS51c2VyRGF0YS5tZXJnZWRVc2VyRGF0YS5wdXNoKGdlb21ldHJ5LnVzZXJEYXRhKTtcblxuICAgICAgICAgICAgaWYgKHVzZUdyb3Vwcykge1xuICAgICAgICAgICAgICAgIHZhciBjb3VudDtcblxuICAgICAgICAgICAgICAgIGlmIChpc0luZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQgPSBnZW9tZXRyeS5pbmRleC5jb3VudDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb3VudCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uY291bnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJHZW9tZXRyaWVzKCkgZmFpbGVkIHdpdGggZ2VvbWV0cnkgYXQgaW5kZXggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy4gVGhlIGdlb21ldHJ5IG11c3QgaGF2ZSBlaXRoZXIgYW4gaW5kZXggb3IgYSBwb3NpdGlvbiBhdHRyaWJ1dGUnXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lcmdlZEdlb21ldHJ5LmFkZEdyb3VwKG9mZnNldCwgY291bnQsIGkpO1xuXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWVyZ2UgaW5kaWNlc1xuXG4gICAgICAgIGlmIChpc0luZGV4ZWQpIHtcbiAgICAgICAgICAgIHZhciBpbmRleE9mZnNldCA9IDA7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkSW5kZXggPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tZXRyaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2VvbWV0cmllc1tpXS5pbmRleDtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW5kZXguY291bnQ7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZWRJbmRleC5wdXNoKGluZGV4LmdldFgoaikgKyBpbmRleE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgKz0gZ2VvbWV0cmllc1tpXS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZXJnZWRHZW9tZXRyeS5zZXRJbmRleChtZXJnZWRJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtZXJnZSBhdHRyaWJ1dGVzXG5cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkQXR0cmlidXRlID0gdGhpcy5tZXJnZUJ1ZmZlckF0dHJpYnV0ZXMoYXR0cmlidXRlc1tuYW1lXSk7XG5cbiAgICAgICAgICAgIGlmICghbWVyZ2VkQXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2hpbGUgdHJ5aW5nIHRvIG1lcmdlIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBhdHRyaWJ1dGUuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lcmdlZEdlb21ldHJ5LnNldEF0dHJpYnV0ZShuYW1lLCBtZXJnZWRBdHRyaWJ1dGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWVyZ2UgbW9ycGggYXR0cmlidXRlc1xuXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB2YXIgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhBdHRyaWJ1dGVzW25hbWVdWzBdLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKG51bU1vcnBoVGFyZ2V0cyA9PT0gMCkgYnJlYWs7XG5cbiAgICAgICAgICAgIG1lcmdlZEdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyA9IG1lcmdlZEdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyB8fCB7fTtcbiAgICAgICAgICAgIG1lcmdlZEdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1tuYW1lXSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vcnBoQXR0cmlidXRlc1RvTWVyZ2UgPSBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbW9ycGhBdHRyaWJ1dGVzW25hbWVdLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vcnBoQXR0cmlidXRlc1RvTWVyZ2UucHVzaChtb3JwaEF0dHJpYnV0ZXNbbmFtZV1bal1baV0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBtZXJnZWRNb3JwaEF0dHJpYnV0ZSA9IHRoaXMubWVyZ2VCdWZmZXJBdHRyaWJ1dGVzKG1vcnBoQXR0cmlidXRlc1RvTWVyZ2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFtZXJnZWRNb3JwaEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHM6IC5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmYWlsZWQgd2hpbGUgdHJ5aW5nIHRvIG1lcmdlIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIG1vcnBoQXR0cmlidXRlLidcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWVyZ2VkR2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzW25hbWVdLnB1c2gobWVyZ2VkTW9ycGhBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lcmdlZEdlb21ldHJ5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59IGF0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9XG4gICAgICovXG4gICAgbWVyZ2VCdWZmZXJBdHRyaWJ1dGVzOiBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgVHlwZWRBcnJheTtcbiAgICAgICAgdmFyIGl0ZW1TaXplO1xuICAgICAgICB2YXIgbm9ybWFsaXplZDtcbiAgICAgICAgdmFyIGFycmF5TGVuZ3RoID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyQXR0cmlidXRlcygpIGZhaWxlZC4gSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoVHlwZWRBcnJheSA9PT0gdW5kZWZpbmVkKSBUeXBlZEFycmF5ID0gYXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgaWYgKFR5cGVkQXJyYXkgIT09IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJBdHRyaWJ1dGVzKCkgZmFpbGVkLiBCdWZmZXJBdHRyaWJ1dGUuYXJyYXkgbXVzdCBiZSBvZiBjb25zaXN0ZW50IGFycmF5IHR5cGVzIGFjcm9zcyBtYXRjaGluZyBhdHRyaWJ1dGVzLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXRlbVNpemUgPT09IHVuZGVmaW5lZCkgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG4gICAgICAgICAgICBpZiAoaXRlbVNpemUgIT09IGF0dHJpYnV0ZS5pdGVtU2l6ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzOiAubWVyZ2VCdWZmZXJBdHRyaWJ1dGVzKCkgZmFpbGVkLiBCdWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUgbXVzdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBtYXRjaGluZyBhdHRyaWJ1dGVzLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCA9PT0gdW5kZWZpbmVkKSBub3JtYWxpemVkID0gYXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCAhPT0gYXR0cmlidXRlLm5vcm1hbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlsczogLm1lcmdlQnVmZmVyQXR0cmlidXRlcygpIGZhaWxlZC4gQnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQgbXVzdCBiZSBjb25zaXN0ZW50IGFjcm9zcyBtYXRjaGluZyBhdHRyaWJ1dGVzLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhcnJheUxlbmd0aCArPSBhdHRyaWJ1dGUuYXJyYXkubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoYXJyYXlMZW5ndGgpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFycmF5LnNldChhdHRyaWJ1dGVzW2ldLmFycmF5LCBvZmZzZXQpO1xuXG4gICAgICAgICAgICBvZmZzZXQgKz0gYXR0cmlidXRlc1tpXS5hcnJheS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckF0dHJpYnV0ZT59IGF0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheTxJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT59XG4gICAgICovXG4gICAgaW50ZXJsZWF2ZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgIC8vIEludGVybGVhdmVzIHRoZSBwcm92aWRlZCBhdHRyaWJ1dGVzIGludG8gYW4gSW50ZXJsZWF2ZWRCdWZmZXIgYW5kIHJldHVybnNcbiAgICAgICAgLy8gYSBzZXQgb2YgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGVzIGZvciBlYWNoIGF0dHJpYnV0ZVxuICAgICAgICB2YXIgVHlwZWRBcnJheTtcbiAgICAgICAgdmFyIGFycmF5TGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIHN0cmlkZSA9IDA7XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSB0aGUgbGVuZ3RoIGFuZCB0eXBlIG9mIHRoZSBpbnRlcmxlYXZlZEJ1ZmZlclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcblxuICAgICAgICAgICAgaWYgKFR5cGVkQXJyYXkgPT09IHVuZGVmaW5lZCkgVHlwZWRBcnJheSA9IGF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGlmIChUeXBlZEFycmF5ICE9PSBhdHRyaWJ1dGUuYXJyYXkuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRyaWJ1dGVCdWZmZXJzIG9mIGRpZmZlcmVudCB0eXBlcyBjYW5ub3QgYmUgaW50ZXJsZWF2ZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJyYXlMZW5ndGggKz0gYXR0cmlidXRlLmFycmF5Lmxlbmd0aDtcbiAgICAgICAgICAgIHN0cmlkZSArPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgdGhlIHNldCBvZiBidWZmZXIgYXR0cmlidXRlc1xuICAgICAgICB2YXIgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIobmV3IFR5cGVkQXJyYXkoYXJyYXlMZW5ndGgpLCBzdHJpZGUpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICB2YXIgZ2V0dGVycyA9IFsnZ2V0WCcsICdnZXRZJywgJ2dldFonLCAnZ2V0VyddO1xuICAgICAgICB2YXIgc2V0dGVycyA9IFsnc2V0WCcsICdzZXRZJywgJ3NldFonLCAnc2V0VyddO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsID0gYXR0cmlidXRlcy5sZW5ndGg7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgdmFyIGl0ZW1TaXplID0gYXR0cmlidXRlLml0ZW1TaXplO1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gYXR0cmlidXRlLmNvdW50O1xuICAgICAgICAgICAgdmFyIGliYSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZShpbnRlcmxlYXZlZEJ1ZmZlciwgaXRlbVNpemUsIG9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQpO1xuICAgICAgICAgICAgcmVzLnB1c2goaWJhKTtcblxuICAgICAgICAgICAgb2Zmc2V0ICs9IGl0ZW1TaXplO1xuXG4gICAgICAgICAgICAvLyBNb3ZlIHRoZSBkYXRhIGZvciBlYWNoIGF0dHJpYnV0ZSBpbnRvIHRoZSBuZXcgaW50ZXJsZWF2ZWRCdWZmZXJcbiAgICAgICAgICAgIC8vIGF0IHRoZSBhcHByb3ByaWF0ZSBvZmZzZXRcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY291bnQ7IGMrKykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlbVNpemU7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBpYmFbc2V0dGVyc1trXV0oYywgYXR0cmlidXRlW2dldHRlcnNba11dKGMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5PEJ1ZmZlckdlb21ldHJ5Pn0gZ2VvbWV0cnlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZXN0aW1hdGVCeXRlc1VzZWQ6IGZ1bmN0aW9uIChnZW9tZXRyeSkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIGVzdGltYXRlZCBtZW1vcnkgdXNlZCBieSB0aGlzIGdlb21ldHJ5IGluIGJ5dGVzXG4gICAgICAgIC8vIENhbGN1bGF0ZSB1c2luZyBpdGVtU2l6ZSwgY291bnQsIGFuZCBCWVRFU19QRVJfRUxFTUVOVCB0byBhY2NvdW50XG4gICAgICAgIC8vIGZvciBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZXMuXG4gICAgICAgIHZhciBtZW0gPSAwO1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHZhciBhdHRyID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgbWVtICs9IGF0dHIuY291bnQgKiBhdHRyLml0ZW1TaXplICogYXR0ci5hcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcbiAgICAgICAgbWVtICs9IGluZGljZXMgPyBpbmRpY2VzLmNvdW50ICogaW5kaWNlcy5pdGVtU2l6ZSAqIGluZGljZXMuYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiAwO1xuICAgICAgICByZXR1cm4gbWVtO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b2xlcmFuY2VcbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeT59XG4gICAgICovXG4gICAgbWVyZ2VWZXJ0aWNlczogZnVuY3Rpb24gKGdlb21ldHJ5LCB0b2xlcmFuY2UgPSAxZS00KSB7XG4gICAgICAgIHRvbGVyYW5jZSA9IE1hdGgubWF4KHRvbGVyYW5jZSwgTnVtYmVyLkVQU0lMT04pO1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIGFuIGluZGV4IGJ1ZmZlciBpZiB0aGUgZ2VvbWV0cnkgZG9lc24ndCBoYXZlIG9uZSwgb3Igb3B0aW1pemUgaXRcbiAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZS5cbiAgICAgICAgdmFyIGhhc2hUb0luZGV4ID0ge307XG4gICAgICAgIHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKTtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSgncG9zaXRpb24nKTtcbiAgICAgICAgdmFyIHZlcnRleENvdW50ID0gaW5kaWNlcyA/IGluZGljZXMuY291bnQgOiBwb3NpdGlvbnMuY291bnQ7XG5cbiAgICAgICAgLy8gbmV4dCB2YWx1ZSBmb3IgdHJpYW5nbGUgaW5kaWNlc1xuICAgICAgICB2YXIgbmV4dEluZGV4ID0gMDtcblxuICAgICAgICAvLyBhdHRyaWJ1dGVzIGFuZCBuZXcgYXR0cmlidXRlIGFycmF5c1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZXMgPSBPYmplY3Qua2V5cyhnZW9tZXRyeS5hdHRyaWJ1dGVzKTtcbiAgICAgICAgdmFyIGF0dHJBcnJheXMgPSB7fTtcbiAgICAgICAgdmFyIG1vcnBoQXR0cnNBcnJheXMgPSB7fTtcbiAgICAgICAgdmFyIG5ld0luZGljZXMgPSBbXTtcbiAgICAgICAgdmFyIGdldHRlcnMgPSBbJ2dldFgnLCAnZ2V0WScsICdnZXRaJywgJ2dldFcnXTtcblxuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBhcnJheXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbaV07XG5cbiAgICAgICAgICAgIGF0dHJBcnJheXNbbmFtZV0gPSBbXTtcblxuICAgICAgICAgICAgdmFyIG1vcnBoQXR0ciA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChtb3JwaEF0dHIpIHtcbiAgICAgICAgICAgICAgICBtb3JwaEF0dHJzQXJyYXlzW25hbWVdID0gbmV3IEFycmF5KG1vcnBoQXR0ci5sZW5ndGgpLmZpbGwoKS5tYXAoKCkgPT4gW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udmVydCB0aGUgZXJyb3IgdG9sZXJhbmNlIHRvIGFuIGFtb3VudCBvZiBkZWNpbWFsIHBsYWNlcyB0byB0cnVuY2F0ZSB0b1xuICAgICAgICB2YXIgZGVjaW1hbFNoaWZ0ID0gTWF0aC5sb2cxMCgxIC8gdG9sZXJhbmNlKTtcbiAgICAgICAgdmFyIHNoaWZ0TXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBkZWNpbWFsU2hpZnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluZGljZXMgPyBpbmRpY2VzLmdldFgoaSkgOiBpO1xuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIGhhc2ggZm9yIHRoZSB2ZXJ0ZXggYXR0cmlidXRlcyBhdCB0aGUgY3VycmVudCBpbmRleCAnaSdcbiAgICAgICAgICAgIHZhciBoYXNoID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IGF0dHJpYnV0ZU5hbWVzLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbal07XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZW1TaXplOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG91YmxlIHRpbGRlIHRydW5jYXRlcyB0aGUgZGVjaW1hbCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBoYXNoICs9IGAke35+KGF0dHJpYnV0ZVtnZXR0ZXJzW2tdXShpbmRleCkgKiBzaGlmdE11bHRpcGxpZXIpfSxgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIGFub3RoZXIgcmVmZXJlbmNlIHRvIHRoZSB2ZXJ0ZXggaWYgaXQncyBhbHJlYWR5XG4gICAgICAgICAgICAvLyB1c2VkIGJ5IGFub3RoZXIgaW5kZXhcbiAgICAgICAgICAgIGlmIChoYXNoIGluIGhhc2hUb0luZGV4KSB7XG4gICAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGhhc2hUb0luZGV4W2hhc2hdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY29weSBkYXRhIHRvIHRoZSBuZXcgaW5kZXggaW4gdGhlIGF0dHJpYnV0ZSBhcnJheXNcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IGF0dHJpYnV0ZU5hbWVzLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWVzW2pdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9ycGhBdHRyID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdhcnJheSA9IGF0dHJBcnJheXNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdNb3JwaEFycmF5cyA9IG1vcnBoQXR0cnNBcnJheXNbbmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVtU2l6ZTsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyRnVuYyA9IGdldHRlcnNba107XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdhcnJheS5wdXNoKGF0dHJpYnV0ZVtnZXR0ZXJGdW5jXShpbmRleCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9ycGhBdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSA9IDAsIG1sID0gbW9ycGhBdHRyLmxlbmd0aDsgbSA8IG1sOyBtKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TW9ycGhBcnJheXNbbV0ucHVzaChtb3JwaEF0dHJbbV1bZ2V0dGVyRnVuY10oaW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoYXNoVG9JbmRleFtoYXNoXSA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2gobmV4dEluZGV4KTtcbiAgICAgICAgICAgICAgICBuZXh0SW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlIHR5cGVkIGFycmF5cyBmcm9tIG5ldyBhdHRyaWJ1dGUgYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgLy8gdGhlIGF0dHJpYnV0ZUJ1ZmZlcnNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2VvbWV0cnkuY2xvbmUoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZXNbaV07XG4gICAgICAgICAgICB2YXIgb2xkQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IG9sZEF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3RvcihhdHRyQXJyYXlzW25hbWVdKTtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKGJ1ZmZlciwgb2xkQXR0cmlidXRlLml0ZW1TaXplLCBvbGRBdHRyaWJ1dGUubm9ybWFsaXplZCk7XG5cbiAgICAgICAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cmlidXRlKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBhdHRyaWJ1dGUgYXJyYXlzXG4gICAgICAgICAgICBpZiAobmFtZSBpbiBtb3JwaEF0dHJzQXJyYXlzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtb3JwaEF0dHJzQXJyYXlzW25hbWVdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRNb3JwaEF0dHJpYnV0ZSA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1tuYW1lXVtqXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IG9sZE1vcnBoQXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yKG1vcnBoQXR0cnNBcnJheXNbbmFtZV1bal0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9ycGhBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkTW9ycGhBdHRyaWJ1dGUuaXRlbVNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRNb3JwaEF0dHJpYnV0ZS5ub3JtYWxpemVkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5tb3JwaEF0dHJpYnV0ZXNbbmFtZV1bal0gPSBtb3JwaEF0dHJpYnV0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbmRpY2VzXG5cbiAgICAgICAgcmVzdWx0LnNldEluZGV4KG5ld0luZGljZXMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRyYXdNb2RlXG4gICAgICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnk+fVxuICAgICAqL1xuICAgIHRvVHJpYW5nbGVzRHJhd01vZGU6IGZ1bmN0aW9uIChnZW9tZXRyeSwgZHJhd01vZGUpIHtcbiAgICAgICAgaWYgKGRyYXdNb2RlID09PSBUcmlhbmdsZXNEcmF3TW9kZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogR2VvbWV0cnkgYWxyZWFkeSBkZWZpbmVkIGFzIHRyaWFuZ2xlcy4nKTtcbiAgICAgICAgICAgIHJldHVybiBnZW9tZXRyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkcmF3TW9kZSA9PT0gVHJpYW5nbGVGYW5EcmF3TW9kZSB8fCBkcmF3TW9kZSA9PT0gVHJpYW5nbGVTdHJpcERyYXdNb2RlKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZSBpbmRleCBpZiBub3QgcHJlc2VudFxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3NpdGlvbi5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5zZXRJbmRleChpbmRpY2VzKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAnVEhSRUUuQnVmZmVyR2VvbWV0cnlVdGlscy50b1RyaWFuZ2xlc0RyYXdNb2RlKCk6IFVuZGVmaW5lZCBwb3NpdGlvbiBhdHRyaWJ1dGUuIFByb2Nlc3Npbmcgbm90IHBvc3NpYmxlLidcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9cblxuICAgICAgICAgICAgdmFyIG51bWJlck9mVHJpYW5nbGVzID0gaW5kZXguY291bnQgLSAyO1xuICAgICAgICAgICAgdmFyIG5ld0luZGljZXMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGRyYXdNb2RlID09PSBUcmlhbmdsZUZhbkRyYXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2wuVFJJQU5HTEVfRkFOXG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBudW1iZXJPZlRyaWFuZ2xlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKDApKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSkpO1xuICAgICAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZ2wuVFJJQU5HTEVfU1RSSVBcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZUcmlhbmdsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpICsgMikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kaWNlcy5wdXNoKGluZGV4LmdldFgoaSArIDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGljZXMucHVzaChpbmRleC5nZXRYKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRpY2VzLnB1c2goaW5kZXguZ2V0WChpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuZXdJbmRpY2VzLmxlbmd0aCAvIDMgIT09IG51bWJlck9mVHJpYW5nbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5VXRpbHMudG9UcmlhbmdsZXNEcmF3TW9kZSgpOiBVbmFibGUgdG8gZ2VuZXJhdGUgY29ycmVjdCBhbW91bnQgb2YgdHJpYW5nbGVzLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBidWlsZCBmaW5hbCBnZW9tZXRyeVxuXG4gICAgICAgICAgICB2YXIgbmV3R2VvbWV0cnkgPSBnZW9tZXRyeS5jbG9uZSgpO1xuICAgICAgICAgICAgbmV3R2VvbWV0cnkuc2V0SW5kZXgobmV3SW5kaWNlcyk7XG4gICAgICAgICAgICBuZXdHZW9tZXRyeS5jbGVhckdyb3VwcygpO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3R2VvbWV0cnk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKTogVW5rbm93biBkcmF3IG1vZGU6JywgZHJhd01vZGUpO1xuICAgICAgICByZXR1cm4gZ2VvbWV0cnk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgQnVmZmVyR2VvbWV0cnlVdGlscyB9O1xuIiwiLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtci5kb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNhbnZhczogISF3aW5kb3cuQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIHdlYmdsOiAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXG4gICAgICAgICAgICByZXR1cm4gISEoXG4gICAgICAgICAgICAgICAgd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJlxuICAgICAgICAgICAgICAgIChjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KSgpLFxuXG4gICAgd29ya2VyczogISF3aW5kb3cuV29ya2VyLFxuICAgIGZpbGVhcGk6IHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYixcblxuICAgIGdldFdlYkdMRXJyb3JNZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuaWQgPSAnd2ViZ2wtZXJyb3ItbWVzc2FnZSc7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzEzcHgnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRXZWlnaHQgPSAnbm9ybWFsJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNmZmYnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmNvbG9yID0gJyMwMDAnO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gJzQwMHB4JztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnNWVtIGF1dG8gMCc7XG5cbiAgICAgICAgaWYgKCF0aGlzLndlYmdsKSB7XG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHRcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXG4gICAgICAgICAgICAgICAgICAgICAgJ0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMDAwMFwiPmhlcmU8L2E+LidcbiAgICAgICAgICAgICAgICAgIF0uam9pbignXFxuJylcbiAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+V2ViR0w8L2E+Ljxici8+JyxcbiAgICAgICAgICAgICAgICAgICAgICAnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwMDAwXCI+aGVyZTwvYT4uJ1xuICAgICAgICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0sXG5cbiAgICBhZGRHZXRXZWJHTE1lc3NhZ2U6IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBwYXJlbnQsIGlkLCBlbGVtZW50O1xuXG4gICAgICAgIHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xuXG4gICAgICAgIHBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnBhcmVudCA6IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIGlkID0gcGFyYW1ldGVycy5pZCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5pZCA6ICdvbGRpZSc7XG5cbiAgICAgICAgZWxlbWVudCA9IHRoaXMuZ2V0V2ViR0xFcnJvck1lc3NhZ2UoKTtcbiAgICAgICAgZWxlbWVudC5pZCA9IGlkO1xuXG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICB9XG59O1xuIiwiLy8gUHJvdmlkZXMgc2ltcGxlIHN0YXRpYyBmdW5jdGlvbnMgdGhhdCBhcmUgdXNlZCBtdWx0aXBsZSB0aW1lcyBpbiB0aGUgYXBwXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWxwZXJzIHtcbiAgICBzdGF0aWMgdGhyb3R0bGUoZm4sIHRocmVzaGhvbGQsIHNjb3BlKSB7XG4gICAgICAgIHRocmVzaGhvbGQgfHwgKHRocmVzaGhvbGQgPSAyNTApO1xuICAgICAgICBsZXQgbGFzdCwgZGVmZXJUaW1lcjtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHNjb3BlIHx8IHRoaXM7XG5cbiAgICAgICAgICAgIGNvbnN0IG5vdyA9ICtuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgICAgIGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyB0aHJlc2hob2xkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlZmVyVGltZXIpO1xuICAgICAgICAgICAgICAgIGRlZmVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgfSwgdGhyZXNoaG9sZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGxvZ1Byb2dyZXNzKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHhocikge1xuICAgICAgICAgICAgaWYgKHhoci5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudENvbXBsZXRlID0gKHhoci5sb2FkZWQgLyB4aHIudG90YWwpICogMTAwO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coTWF0aC5yb3VuZChwZXJjZW50Q29tcGxldGUsIDIpICsgJyUgZG93bmxvYWRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBsb2dFcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4aHIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoeGhyKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGFuZGxlQ29sb3JDaGFuZ2UoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJyMnLCAnMHgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29sb3Iuc2V0SGV4KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlKG1lc2gpIHtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZShtZXNoLm1hdGVyaWFsLCBtZXNoLmdlb21ldHJ5KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbmVlZHNVcGRhdGUobWF0ZXJpYWwsIGdlb21ldHJ5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtYXRlcmlhbC5zaGFkaW5nID0gK21hdGVyaWFsLnNoYWRpbmc7IC8vRW5zdXJlIG51bWJlclxuICAgICAgICAgICAgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0gK21hdGVyaWFsLnZlcnRleENvbG9yczsgLy9FbnN1cmUgbnVtYmVyXG4gICAgICAgICAgICBtYXRlcmlhbC5zaWRlID0gK21hdGVyaWFsLnNpZGU7IC8vRW5zdXJlIG51bWJlclxuICAgICAgICAgICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGVUZXh0dXJlKG1hdGVyaWFsLCBtYXRlcmlhbEtleSwgdGV4dHVyZXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsW21hdGVyaWFsS2V5XSA9IHRleHR1cmVzW2tleV07XG4gICAgICAgICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiY29uc3QgQUxJQVMgPSB7XG4gICAgbGVmdDogMzcsXG4gICAgdXA6IDM4LFxuICAgIHJpZ2h0OiAzOSxcbiAgICBkb3duOiA0MCxcbiAgICBzcGFjZTogMzIsXG4gICAgdGFiOiA5LFxuICAgIGVzY2FwZTogMjdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleWJvYXJkIHtcbiAgICBjb25zdHJ1Y3Rvcihkb21FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQgfHwgZG9jdW1lbnQ7XG4gICAgICAgIHRoaXMua2V5Q29kZXMgPSB7fTtcblxuICAgICAgICAvLyBiaW5kIGtleUV2ZW50c1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4gdGhpcy5vbktleUNoYW5nZShldmVudCksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB0aGlzLm9uS2V5Q2hhbmdlKGV2ZW50KSwgZmFsc2UpO1xuXG4gICAgICAgIC8vIGJpbmQgd2luZG93IGJsdXJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB0aGlzLm9uQmx1ciwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB0aGlzLm9uS2V5Q2hhbmdlKGV2ZW50KSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHRoaXMub25LZXlDaGFuZ2UoZXZlbnQpLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gdW5iaW5kIHdpbmRvdyBibHVyIGV2ZW50XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4gdGhpcy5vbkJsdXIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBvbkJsdXIoKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLmtleUNvZGVzKSB0aGlzLmtleUNvZGVzW3Byb3BdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb25LZXlDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgLy8gbG9nIHRvIGRlYnVnXG4gICAgICAgIC8vY29uc29sZS5sb2coJ29uS2V5Q2hhbmdlJywgZXZlbnQsIGV2ZW50LmtleUNvZGUsIGV2ZW50LnNoaWZ0S2V5LCBldmVudC5jdHJsS2V5LCBldmVudC5hbHRLZXksIGV2ZW50Lm1ldGFLZXkpXG5cbiAgICAgICAgLy8gdXBkYXRlIHRoaXMua2V5Q29kZXNcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgICAgIHRoaXMua2V5Q29kZXNba2V5Q29kZV0gPSBldmVudC50eXBlID09PSAna2V5ZG93bic7XG4gICAgfVxuXG4gICAgcHJlc3NlZChrZXlEZXNjKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBrZXlEZXNjLnNwbGl0KCcrJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGxldCBwcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQUxJQVMpLmluZGV4T2Yoa2V5KSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHByZXNzZWQgPSB0aGlzLmtleUNvZGVzW0FMSUFTW2tleV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcmVzc2VkID0gdGhpcy5rZXlDb2Rlc1trZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcHJlc3NlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZXZlbnRNYXRjaGVzKGV2ZW50LCBrZXlEZXNjKSB7XG4gICAgICAgIGNvbnN0IGFsaWFzZXMgPSBBTElBUztcbiAgICAgICAgY29uc3QgYWxpYXNLZXlzID0gT2JqZWN0LmtleXMoYWxpYXNlcyk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBrZXlEZXNjLnNwbGl0KCcrJyk7XG4gICAgICAgIC8vIGxvZyB0byBkZWJ1Z1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnZXZlbnRNYXRjaGVzJywgZXZlbnQsIGV2ZW50LmtleUNvZGUsIGV2ZW50LnNoaWZ0S2V5LCBldmVudC5jdHJsS2V5LCBldmVudC5hbHRLZXksIGV2ZW50Lm1ldGFLZXkpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGxldCBwcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnc2hpZnQnKSB7XG4gICAgICAgICAgICAgICAgcHJlc3NlZCA9IGV2ZW50LnNoaWZ0S2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdjdHJsJykge1xuICAgICAgICAgICAgICAgIHByZXNzZWQgPSBldmVudC5jdHJsS2V5ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdhbHQnKSB7XG4gICAgICAgICAgICAgICAgcHJlc3NlZCA9IGV2ZW50LmFsdEtleSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnbWV0YScpIHtcbiAgICAgICAgICAgICAgICBwcmVzc2VkID0gZXZlbnQubWV0YUtleSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpYXNLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwcmVzc2VkID0gZXZlbnQua2V5Q29kZSA9PT0gYWxpYXNlc1trZXldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBrZXkudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgICAgICAgICAgcHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXByZXNzZWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwiQ29uZmlnIiwiRGV0ZWN0b3IiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiTWFpbiIsImluaXQiLCJDYW1lcmEiLCJyZW5kZXJlciIsIndpZHRoIiwiZG9tRWxlbWVudCIsImhlaWdodCIsInRoaXMiLCJ0aHJlZUNhbWVyYSIsIlRIUkVFIiwicG9zaXRpb24iLCJzZXQiLCJ1cCIsInVwZGF0ZVNpemUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsIkNvbnRyb2xzIiwiY2FtZXJhIiwidGhyZWVDb250cm9scyIsIk9yYml0Q29udHJvbHMiLCJ0YXJnZXQiLCJhdXRvUm90YXRlIiwiYXV0b1JvdGF0ZVNwZWVkIiwicm90YXRlU3BlZWQiLCJ6b29tU3BlZWQiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJlbmFibGVEYW1waW5nIiwiZW5hYmxlWm9vbSIsImRhbXBpbmdGYWN0b3IiLCJlbmFibGVSb3RhdGUiLCJtaW5BemltdXRoQW5nbGUiLCJtYXhBemltdXRoQW5nbGUiLCJJbmZpbml0eSIsIkVudmlyb25tZW50Iiwic2NlbmVfc2NhbGUiLCJnZW9tZXRyeSIsIm1hdGVyaWFsIiwiY29sb3IiLCJkZXB0aFdyaXRlIiwidXNlckRhdGEiLCJvcmlnaW5hbENvbG9yIiwiZ3JvdW5kIiwic2NhbGUiLCJyZWNlaXZlU2hhZG93Iiwic2NlbmUiLCJhZGQiLCJncmlkIiwiTWF0aCIsInJvdW5kIiwicm90YXRpb24iLCJ4IiwiUEkiLCJvcGFjaXR5IiwidHJhbnNwYXJlbnQiLCJHZW9tZXRyeSIsImdlbyIsInR5cGUiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJyYWRpdXMiLCJNYXRlcmlhbCIsInN0YW5kYXJkIiwibWVzaCIsIkNTUzJEUmVuZGVyZXIiLCJzZXRTaXplIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic3R5bGUiLCJ0b3AiLCJpc1Nob3dpbmdMYWJsZXMiLCJpc1Nob3dpbmdPYnN0YWNsZUxhYmxlcyIsImlzU2hvd2luZ1JvYm90TGFibGVzIiwiYWRkTGFiZWwiLCJwcmVmaXgiLCJvYmplY3QiLCJ2aXNpYmlsaXR5IiwidW5kZWZpbmVkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ0ZXh0Q29udGVudCIsIm5hbWUiLCJyZWFsaXR5IiwibWFyZ2luVG9wIiwiZWxlbWVudExhYmVsIiwiQ1NTMkRPYmplY3QiLCJpZCIsInZpc2libGUiLCJyZW1vdmVMYWJlbCIsInJlbW92ZSIsIkxpZ2h0IiwiYW1iaWVudExpZ2h0IiwicG9pbnRMaWdodCIsImRpcmVjdGlvbmFsTGlnaHQiLCJjYXN0U2hhZG93Iiwic2hhZG93IiwiYmlhcyIsIm5lYXIiLCJmYXIiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJtYXBTaXplIiwiZGlyZWN0aW9uYWxMaWdodEhlbHBlciIsImhlbWlMaWdodCIsImxpZ2h0TmFtZSIsImJhc2ljIiwic2lkZSIsInNoYWRpbmciLCJyb3VnaG5lc3MiLCJtZXRhbG5lc3MiLCJ3aXJlIiwid2lyZWZyYW1lIiwiT0JTVEFDTEVfUFJFRklYIiwiT2JzdGFjbGUiLCJjYWxsYmFjayIsIm9ic3RhY2xlcyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwib2JzIiwiY3JlYXRlIiwib2JzdGFjbGUiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZU1hdGVyaWFsIiwibGFiZWxWaXNpYmlsaXR5Iiwib3JpZ2luYWxFbW1pc2l2ZSIsImVtaXNzaXZlIiwiZ2V0SGV4Iiwic2VsZWN0ZWQiLCJmbG9vciIsInJhbmRvbSIsIm5hbWVfdGVtcCIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZGVsZXRlSWZFeGlzdHMiLCJ5IiwieiIsImNhbGN1bGF0ZVoiLCJyYWRYIiwicmFkWSIsInJhZFoiLCJnIiwiVHlwZUVycm9yIiwiY3JlYXRlQm94R2VvbWV0cnkiLCJkZXB0aCIsImNyZWF0ZUN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJjcmVhdGVTcGhlcmVHZW9tZXRyeSIsInJhZGlhbFNlZ21lbnRzIiwibSIsInByb3BlcnRpZXMiLCJnZXRPYmplY3RCeU5hbWUiLCJvYmplY3RzIiwiY2hpbGRyZW4iLCJvYmoiLCJzdGFydHNXaXRoIiwiUmVuZGVyZXIiLCJ0aHJlZVJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0Q2xlYXJDb2xvciIsImZvZyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwiYXBwZW5kQ2hpbGQiLCJzaGFkb3dNYXAiLCJlbmFibGVkIiwiY2FwYWJpbGl0aWVzIiwiZ2V0TWF4QW5pc290cm9weSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicmVuZGVyIiwiU1RMTG9hZGVyIiwicmVxdWlyZSIsIlJPQk9UX1BSRUZJWCIsIlJvYm90IiwidGhhdCIsImNyZWF0ZWQiLCJzZXRJbnRlcnZhbCIsInBydW5lIiwiUiIsIkciLCJCIiwiYW1iaWVudCIsInIiLCJzZXRSR0IiLCJoZWFkaW5nIiwiUkVBTElUWSIsIm1pbiIsIm1heCIsImxvYWQiLCJyb2JvdElkIiwiY2xpY2tFdmVudCIsInJvYm90IiwiYWxlcnQiLCJlcnJvciIsInNldFJlYWxpdHkiLCJtb3ZlIiwiY3VycmVudEhlYWRpbmciLCJuZXdIZWFkaW5nIiwicm90YXRpb25GbGFnIiwic3FydCIsInBvdyIsIlRXRUVOIiwidG8iLCJvblVwZGF0ZSIsIm9uQ29tcGxldGUiLCJkZWxheSIsInN0YXJ0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtcXR0IiwicHVibGlzaCIsImNoYW5uZWwiLCJKU09OIiwic3RyaW5naWZ5Iiwibm9kZUNvbnRlbnQiLCJkaXNwIiwicXVlcnlTZWxlY3RvciIsInByZXZDb250ZW50IiwiY29udGVudCIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwicmVxdWVzdFNuYXBzaG90IiwicmVwbGFjZUNoaWxkIiwiZGlzcGxheSIsInNldFRpbWVvdXQiLCJ2YWxpZCIsIk1lc2hIZWxwZXIiLCJ3aXJlTGluZSIsImRlcHRoVGVzdCIsImVkZ2VzIiwiZWRnZXNMaW5lIiwidmVydGV4SGVscGVyIiwiVmVydGV4Tm9ybWFsc0hlbHBlciIsImJveEhlbHBlciIsImdldFVybFBhcmFtIiwicGFyYW1ldGVyIiwiZGVmYXVsdHZhbHVlIiwidmFycyIsInVybHBhcmFtZXRlciIsImxvY2F0aW9uIiwiaHJlZiIsImluZGV4T2YiLCJyZXBsYWNlIiwia2V5IiwidmFsdWUiLCJnZXRDcmVkZW50aWFscyIsInBhdGgiLCJiYXNlNjQiLCJqc29uUGF5bG9hZCIsInN0b3JlZENyZWRlbnRpYWxzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJwb3J0Iiwic2VydmVyIiwib3JpZ2luIiwicGF0aG5hbWUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwidGl0bGUiLCJzZXRJdGVtIiwiY3JlZGVudGlhbHMiLCJzcGxpdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImF0b2IiLCJtYXAiLCJjIiwiY2hhckNvZGVBdCIsInNsaWNlIiwiam9pbiIsInBhcnNlIiwidXNlciIsInBhc3MiLCJob3N0IiwicGFyc2VJbnQiLCJfdjEiLCJWZWN0b3IzIiwiX3YyIiwiX25vcm1hbE1hdHJpeCIsIk1hdHJpeDMiLCJfa2V5cyIsInNpemUiLCJoZXgiLCJuTm9ybWFscyIsIm9iakdlb21ldHJ5IiwiaXNHZW9tZXRyeSIsImZhY2VzIiwibGVuZ3RoIiwiaXNCdWZmZXJHZW9tZXRyeSIsImF0dHJpYnV0ZXMiLCJub3JtYWwiLCJjb3VudCIsIkJ1ZmZlckdlb21ldHJ5IiwicG9zaXRpb25zIiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkxpbmVTZWdtZW50cyIsIkxpbmVCYXNpY01hdGVyaWFsIiwidG9uZU1hcHBlZCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJ1cGRhdGUiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImlkeCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiZ2V0Tm9ybWFsTWF0cml4IiwibWF0cml4V29ybGQiLCJ2ZXJ0aWNlcyIsImkiLCJsIiwiZmFjZSIsImoiLCJqbCIsInZlcnRleE5vcm1hbHMiLCJ2ZXJ0ZXgiLCJjb3B5IiwiYXBwbHlNYXRyaXg0IiwiYXBwbHlNYXRyaXgzIiwibm9ybWFsaXplIiwibXVsdGlwbHlTY2FsYXIiLCJzZXRYWVoiLCJvYmpQb3MiLCJvYmpOb3JtIiwiZ2V0WCIsImdldFkiLCJnZXRaIiwibmVlZHNVcGRhdGUiLCJHTFRGTG9hZGVyIiwibWFuYWdlciIsIkxvYWRlciIsImRyYWNvTG9hZGVyIiwiZGRzTG9hZGVyIiwiR0xURlJlZ2lzdHJ5IiwiZ2V0IiwicmVtb3ZlQWxsIiwiYXNzaWduIiwidXJsIiwib25Mb2FkIiwib25Qcm9ncmVzcyIsIm9uRXJyb3IiLCJyZXNvdXJjZVBhdGgiLCJzY29wZSIsIkxvYWRlclV0aWxzIiwiaXRlbVN0YXJ0IiwiX29uRXJyb3IiLCJlIiwiaXRlbUVycm9yIiwiaXRlbUVuZCIsImxvYWRlciIsIkZpbGVMb2FkZXIiLCJzZXRQYXRoIiwic2V0UmVzcG9uc2VUeXBlIiwiY3Jvc3NPcmlnaW4iLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJkYXRhIiwiZ2x0ZiIsInNldERSQUNPTG9hZGVyIiwic2V0RERTTG9hZGVyIiwiZXh0ZW5zaW9ucyIsIlVpbnQ4QXJyYXkiLCJCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyIsIkVYVEVOU0lPTlMiLCJLSFJfQklOQVJZX0dMVEYiLCJHTFRGQmluYXJ5RXh0ZW5zaW9uIiwianNvbiIsImFzc2V0IiwidmVyc2lvbiIsIkVycm9yIiwiZXh0ZW5zaW9uc1VzZWQiLCJleHRlbnNpb25OYW1lIiwiZXh0ZW5zaW9uc1JlcXVpcmVkIiwiS0hSX0xJR0hUU19QVU5DVFVBTCIsIkdMVEZMaWdodHNFeHRlbnNpb24iLCJLSFJfTUFURVJJQUxTX0NMRUFSQ09BVCIsIkdMVEZNYXRlcmlhbHNDbGVhcmNvYXRFeHRlbnNpb24iLCJLSFJfTUFURVJJQUxTX1VOTElUIiwiR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uIiwiS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyIsIkdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24iLCJLSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTiIsIkdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbiIsIk1TRlRfVEVYVFVSRV9ERFMiLCJHTFRGVGV4dHVyZUREU0V4dGVuc2lvbiIsIktIUl9URVhUVVJFX1RSQU5TRk9STSIsIkdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uIiwiS0hSX01FU0hfUVVBTlRJWkFUSU9OIiwiR0xURk1lc2hRdWFudGl6YXRpb25FeHRlbnNpb24iLCJ3YXJuIiwiR0xURlBhcnNlciIsImV4dGVuc2lvbiIsImxpZ2h0RGVmcyIsImxpZ2h0cyIsImxvYWRMaWdodCIsImxpZ2h0SW5kZXgiLCJsaWdodE5vZGUiLCJsaWdodERlZiIsIkNvbG9yIiwiZnJvbUFycmF5IiwicmFuZ2UiLCJEaXJlY3Rpb25hbExpZ2h0IiwiUG9pbnRMaWdodCIsImRpc3RhbmNlIiwiU3BvdExpZ2h0Iiwic3BvdCIsImlubmVyQ29uZUFuZ2xlIiwib3V0ZXJDb25lQW5nbGUiLCJhbmdsZSIsInBlbnVtYnJhIiwiZGVjYXkiLCJpbnRlbnNpdHkiLCJnZXRNYXRlcmlhbFR5cGUiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImV4dGVuZFBhcmFtcyIsIm1hdGVyaWFsUGFyYW1zIiwibWF0ZXJpYWxEZWYiLCJwYXJzZXIiLCJwZW5kaW5nIiwibWV0YWxsaWNSb3VnaG5lc3MiLCJwYnJNZXRhbGxpY1JvdWdobmVzcyIsIkFycmF5IiwiaXNBcnJheSIsImJhc2VDb2xvckZhY3RvciIsImFycmF5IiwiYmFzZUNvbG9yVGV4dHVyZSIsInB1c2giLCJhc3NpZ25UZXh0dXJlIiwiYWxsIiwiTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJjbGVhcmNvYXRGYWN0b3IiLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRUZXh0dXJlIiwiY2xlYXJjb2F0Um91Z2huZXNzRmFjdG9yIiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0Um91Z2huZXNzVGV4dHVyZSIsImNsZWFyY29hdE5vcm1hbFRleHR1cmUiLCJjbGVhcmNvYXROb3JtYWxTY2FsZSIsIlZlY3RvcjIiLCJCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEgiLCJCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTIiwiQklOIiwiYm9keSIsImhlYWRlclZpZXciLCJEYXRhVmlldyIsImhlYWRlciIsIm1hZ2ljIiwiZ2V0VWludDMyIiwiY2h1bmtWaWV3IiwiY2h1bmtJbmRleCIsImJ5dGVMZW5ndGgiLCJjaHVua0xlbmd0aCIsImNodW5rVHlwZSIsImNvbnRlbnRBcnJheSIsImJ5dGVPZmZzZXQiLCJwcmVsb2FkIiwiR0xURk1lc2hTdGFuZGFyZFNHTWF0ZXJpYWwiLCJwYXJhbXMiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsImlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsIiwic3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayIsImdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayIsInNwZWN1bGFyTWFwRnJhZ21lbnRDaHVuayIsImdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rIiwibGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmsiLCJ1bmlmb3JtcyIsInNwZWN1bGFyIiwic2V0SGV4IiwiZ2xvc3NpbmVzcyIsInNwZWN1bGFyTWFwIiwiZ2xvc3NpbmVzc01hcCIsIl9leHRyYVVuaWZvcm1zIiwib25CZWZvcmVDb21waWxlIiwic2hhZGVyIiwidW5pZm9ybU5hbWUiLCJmcmFnbWVudFNoYWRlciIsImRlZmluZVByb3BlcnRpZXMiLCJ2IiwiZGVmaW5lcyIsIlVTRV9HTE9TU0lORVNTTUFQIiwiVVNFX1JPVUdITkVTU01BUCIsIm1ldGFsbmVzc01hcCIsInJvdWdobmVzc01hcCIsInNldFZhbHVlcyIsInNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtcyIsInBiclNwZWN1bGFyR2xvc3NpbmVzcyIsImRpZmZ1c2VGYWN0b3IiLCJkaWZmdXNlVGV4dHVyZSIsImdsb3NzaW5lc3NGYWN0b3IiLCJzcGVjdWxhckZhY3RvciIsInNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUiLCJzcGVjR2xvc3NNYXBEZWYiLCJsaWdodE1hcCIsImxpZ2h0TWFwSW50ZW5zaXR5IiwiYW9NYXAiLCJhb01hcEludGVuc2l0eSIsImVtaXNzaXZlSW50ZW5zaXR5IiwiZW1pc3NpdmVNYXAiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwibm9ybWFsTWFwIiwibm9ybWFsTWFwVHlwZSIsIlRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsIm5vcm1hbFNjYWxlIiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwiYWxwaGFNYXAiLCJlbnZNYXAiLCJlbnZNYXBJbnRlbnNpdHkiLCJyZWZyYWN0aW9uUmF0aW8iLCJHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudCIsInBhcmFtZXRlclBvc2l0aW9ucyIsInNhbXBsZVZhbHVlcyIsInNhbXBsZVNpemUiLCJyZXN1bHRCdWZmZXIiLCJJbnRlcnBvbGFudCIsImRlY29kZVByaW1pdGl2ZSIsInByaW1pdGl2ZSIsImJ1ZmZlclZpZXdJbmRleCIsImJ1ZmZlclZpZXciLCJnbHRmQXR0cmlidXRlTWFwIiwidGhyZWVBdHRyaWJ1dGVNYXAiLCJhdHRyaWJ1dGVOb3JtYWxpemVkTWFwIiwiYXR0cmlidXRlVHlwZU1hcCIsImF0dHJpYnV0ZU5hbWUiLCJ0aHJlZUF0dHJpYnV0ZU5hbWUiLCJBVFRSSUJVVEVTIiwidG9Mb3dlckNhc2UiLCJhY2Nlc3NvckRlZiIsImFjY2Vzc29ycyIsImNvbXBvbmVudFR5cGUiLCJXRUJHTF9DT01QT05FTlRfVFlQRVMiLCJub3JtYWxpemVkIiwiZ2V0RGVwZW5kZW5jeSIsInRoZW4iLCJkZWNvZGVEcmFjb0ZpbGUiLCJhdHRyaWJ1dGUiLCJleHRlbmRUZXh0dXJlIiwidGV4dHVyZSIsInRyYW5zZm9ybSIsImNsb25lIiwib2Zmc2V0IiwicmVwZWF0IiwidGV4Q29vcmQiLCJzb3VyY2UiLCJjb3B5U2FtcGxlVmFsdWVfIiwiaW5kZXgiLCJyZXN1bHQiLCJ2YWx1ZXMiLCJ2YWx1ZVNpemUiLCJiZWZvcmVTdGFydF8iLCJhZnRlckVuZF8iLCJpbnRlcnBvbGF0ZV8iLCJpMSIsInQwIiwidCIsInQxIiwic3RyaWRlIiwic3RyaWRlMiIsInN0cmlkZTMiLCJ0ZCIsInAiLCJwcCIsInBwcCIsIm9mZnNldDEiLCJvZmZzZXQwIiwiczIiLCJzMyIsInMwIiwiczEiLCJwMCIsIm0wIiwicDEiLCJtMSIsIldFQkdMX0NPTlNUQU5UUyIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiV0VCR0xfRklMVEVSUyIsIk5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIiwiTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyIiwiV0VCR0xfV1JBUFBJTkdTIiwiQ2xhbXBUb0VkZ2VXcmFwcGluZyIsIk1pcnJvcmVkUmVwZWF0V3JhcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIldFQkdMX1RZUEVfU0laRVMiLCJTQ0FMQVIiLCJWRUMyIiwiVkVDMyIsIlZFQzQiLCJNQVQyIiwiTUFUMyIsIk1BVDQiLCJQT1NJVElPTiIsIk5PUk1BTCIsIlRBTkdFTlQiLCJURVhDT09SRF8wIiwiVEVYQ09PUkRfMSIsIkNPTE9SXzAiLCJXRUlHSFRTXzAiLCJKT0lOVFNfMCIsIlBBVEhfUFJPUEVSVElFUyIsInRyYW5zbGF0aW9uIiwid2VpZ2h0cyIsIklOVEVSUE9MQVRJT04iLCJDVUJJQ1NQTElORSIsIkxJTkVBUiIsIkludGVycG9sYXRlTGluZWFyIiwiU1RFUCIsIkludGVycG9sYXRlRGlzY3JldGUiLCJBTFBIQV9NT0RFUyIsIk1JTUVfVFlQRV9GT1JNQVRTIiwiUkdCQUZvcm1hdCIsIlJHQkZvcm1hdCIsInJlc29sdmVVUkwiLCJ0ZXN0IiwiYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhIiwia25vd25FeHRlbnNpb25zIiwib2JqZWN0RGVmIiwiZ2x0ZkV4dGVuc2lvbnMiLCJhc3NpZ25FeHRyYXNUb1VzZXJEYXRhIiwiZ2x0ZkRlZiIsImV4dHJhcyIsInVwZGF0ZU1vcnBoVGFyZ2V0cyIsIm1lc2hEZWYiLCJpbCIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsInRhcmdldE5hbWVzIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwiY3JlYXRlQXR0cmlidXRlc0tleSIsImF0dHJpYnV0ZXNLZXkiLCJrZXlzIiwic29ydCIsIm9wdGlvbnMiLCJjYWNoZSIsInByaW1pdGl2ZUNhY2hlIiwidGV4dHVyZUxvYWRlciIsIlRleHR1cmVMb2FkZXIiLCJzZXRDcm9zc09yaWdpbiIsImZpbGVMb2FkZXIiLCJhZGRQcmltaXRpdmVBdHRyaWJ1dGVzIiwicHJpbWl0aXZlRGVmIiwiYXNzaWduQXR0cmlidXRlQWNjZXNzb3IiLCJhY2Nlc3NvckluZGV4IiwiYWNjZXNzb3IiLCJnbHRmQXR0cmlidXRlTmFtZSIsImluZGljZXMiLCJzZXRJbmRleCIsImJveCIsIkJveDMiLCJ0YXJnZXRzIiwibWF4RGlzcGxhY2VtZW50IiwidmVjdG9yIiwic2V0WCIsImFicyIsInNldFkiLCJzZXRaIiwiZXhwYW5kQnlWZWN0b3IiLCJib3VuZGluZ0JveCIsInNwaGVyZSIsIlNwaGVyZSIsImdldENlbnRlciIsImNlbnRlciIsImRpc3RhbmNlVG8iLCJib3VuZGluZ1NwaGVyZSIsImNvbXB1dGVCb3VuZHMiLCJoYXNNb3JwaFBvc2l0aW9uIiwiaGFzTW9ycGhOb3JtYWwiLCJwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMiLCJwZW5kaW5nTm9ybWFsQWNjZXNzb3JzIiwicGVuZGluZ0FjY2Vzc29yIiwibW9ycGhQb3NpdGlvbnMiLCJtb3JwaE5vcm1hbHMiLCJtb3JwaEF0dHJpYnV0ZXMiLCJtb3JwaFRhcmdldHNSZWxhdGl2ZSIsImFkZE1vcnBoVGFyZ2V0cyIsInRvVHJpYW5nbGVzRHJhd01vZGUiLCJkcmF3TW9kZSIsImdldEluZGV4IiwiZ2V0QXR0cmlidXRlIiwibnVtYmVyT2ZUcmlhbmdsZXMiLCJuZXdJbmRpY2VzIiwiVHJpYW5nbGVGYW5EcmF3TW9kZSIsIm5ld0dlb21ldHJ5IiwibWFya0RlZnMiLCJnZXREZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmNpZXMiLCJzY2VuZXMiLCJhbmltYXRpb25zIiwiY2FtZXJhcyIsIm5vZGVEZWZzIiwibm9kZXMiLCJza2luRGVmcyIsInNraW5zIiwibWVzaERlZnMiLCJtZXNoZXMiLCJtZXNoUmVmZXJlbmNlcyIsIm1lc2hVc2VzIiwic2tpbkluZGV4Iiwic2tpbkxlbmd0aCIsImpvaW50cyIsImlzQm9uZSIsIm5vZGVJbmRleCIsIm5vZGVMZW5ndGgiLCJub2RlRGVmIiwic2tpbiIsImlzU2tpbm5lZE1lc2giLCJjYWNoZUtleSIsImRlcGVuZGVuY3kiLCJsb2FkU2NlbmUiLCJsb2FkTm9kZSIsImxvYWRNZXNoIiwibG9hZEFjY2Vzc29yIiwibG9hZEJ1ZmZlclZpZXciLCJsb2FkQnVmZmVyIiwibG9hZE1hdGVyaWFsIiwibG9hZFRleHR1cmUiLCJsb2FkU2tpbiIsImxvYWRBbmltYXRpb24iLCJsb2FkQ2FtZXJhIiwiZGVmcyIsImRlZiIsImJ1ZmZlckluZGV4IiwiYnVmZmVyRGVmIiwiYnVmZmVycyIsInVyaSIsImJ1ZmZlclZpZXdEZWYiLCJidWZmZXJWaWV3cyIsImJ1ZmZlciIsInNwYXJzZSIsInBlbmRpbmdCdWZmZXJWaWV3cyIsImJ1ZmZlckF0dHJpYnV0ZSIsIml0ZW1TaXplIiwiVHlwZWRBcnJheSIsImVsZW1lbnRCeXRlcyIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiaXRlbUJ5dGVzIiwiYnl0ZVN0cmlkZSIsImliU2xpY2UiLCJpYkNhY2hlS2V5IiwiaWIiLCJJbnRlcmxlYXZlZEJ1ZmZlciIsIkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwiQnVmZmVyQXR0cmlidXRlIiwiaXRlbVNpemVJbmRpY2VzIiwiVHlwZWRBcnJheUluZGljZXMiLCJieXRlT2Zmc2V0SW5kaWNlcyIsImJ5dGVPZmZzZXRWYWx1ZXMiLCJzcGFyc2VJbmRpY2VzIiwic3BhcnNlVmFsdWVzIiwic2V0VyIsInRleHR1cmVJbmRleCIsIlVSTCIsInNlbGYiLCJ3ZWJraXRVUkwiLCJ0ZXh0dXJlRGVmIiwidGV4dHVyZXMiLCJ0ZXh0dXJlRXh0ZW5zaW9ucyIsInNvdXJjZVVSSSIsImltYWdlcyIsImlzT2JqZWN0VVJMIiwiYmxvYiIsIkJsb2IiLCJtaW1lVHlwZSIsImNyZWF0ZU9iamVjdFVSTCIsImdldEhhbmRsZXIiLCJyZXZva2VPYmplY3RVUkwiLCJmbGlwWSIsImZvcm1hdCIsInNhbXBsZXIiLCJzYW1wbGVycyIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsIndyYXBTIiwid3JhcFQiLCJtYXBOYW1lIiwibWFwRGVmIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImFzc2lnbkZpbmFsTWF0ZXJpYWwiLCJ1c2VWZXJ0ZXhUYW5nZW50cyIsInRhbmdlbnQiLCJ1c2VWZXJ0ZXhDb2xvcnMiLCJ1c2VGbGF0U2hhZGluZyIsInVzZVNraW5uaW5nIiwidXNlTW9ycGhUYXJnZXRzIiwidXNlTW9ycGhOb3JtYWxzIiwiaXNQb2ludHMiLCJ1dWlkIiwicG9pbnRzTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsInNpemVBdHRlbnVhdGlvbiIsImlzTGluZSIsImxpbmVNYXRlcmlhbCIsImNhY2hlZE1hdGVyaWFsIiwic2tpbm5pbmciLCJ2ZXJ0ZXhUYW5nZW50cyIsInZlcnRleENvbG9ycyIsImZsYXRTaGFkaW5nIiwibW9ycGhUYXJnZXRzIiwidXYyIiwidXYiLCJtYXRlcmlhbEluZGV4IiwibWF0ZXJpYWxUeXBlIiwibWF0ZXJpYWxzIiwibWF0ZXJpYWxFeHRlbnNpb25zIiwic2dFeHRlbnNpb24iLCJrbXVFeHRlbnNpb24iLCJtZXRhbGxpY0ZhY3RvciIsInJvdWdobmVzc0ZhY3RvciIsIm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSIsImRvdWJsZVNpZGVkIiwiRG91YmxlU2lkZSIsImFscGhhTW9kZSIsImFscGhhVGVzdCIsImFscGhhQ3V0b2ZmIiwibm9ybWFsVGV4dHVyZSIsIm9jY2x1c2lvblRleHR1cmUiLCJzdHJlbmd0aCIsImVtaXNzaXZlRmFjdG9yIiwiZW1pc3NpdmVUZXh0dXJlIiwiY2xlYXJjb2F0RXh0ZW5zaW9uIiwiZW5jb2RpbmciLCJzUkdCRW5jb2RpbmciLCJsb2FkR2VvbWV0cmllcyIsInByaW1pdGl2ZXMiLCJjcmVhdGVEcmFjb1ByaW1pdGl2ZSIsImRyYWNvRXh0ZW5zaW9uIiwiZ2VvbWV0cnlQcm9taXNlIiwibW9kZSIsImNhY2hlZCIsInByb21pc2UiLCJtZXNoSW5kZXgiLCJGcm9udFNpZGUiLCJyZXN1bHRzIiwiZ2VvbWV0cmllcyIsIlNraW5uZWRNZXNoIiwiTWVzaCIsInNraW5XZWlnaHQiLCJub3JtYWxpemVTa2luV2VpZ2h0cyIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIkxpbmUiLCJMaW5lTG9vcCIsIlBvaW50cyIsImdyb3VwIiwiR3JvdXAiLCJjYW1lcmFJbmRleCIsImNhbWVyYURlZiIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiTWF0aFV0aWxzIiwieWZvdiIsImFzcGVjdFJhdGlvIiwiem5lYXIiLCJ6ZmFyIiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwieG1hZyIsInltYWciLCJza2luRGVmIiwic2tpbkVudHJ5IiwiaW52ZXJzZUJpbmRNYXRyaWNlcyIsImFuaW1hdGlvbkluZGV4IiwiYW5pbWF0aW9uRGVmIiwicGVuZGluZ05vZGVzIiwicGVuZGluZ0lucHV0QWNjZXNzb3JzIiwicGVuZGluZ091dHB1dEFjY2Vzc29ycyIsInBlbmRpbmdTYW1wbGVycyIsInBlbmRpbmdUYXJnZXRzIiwiY2hhbm5lbHMiLCJub2RlIiwiaW5wdXQiLCJwYXJhbWV0ZXJzIiwib3V0cHV0IiwiaW5wdXRBY2Nlc3NvcnMiLCJvdXRwdXRBY2Nlc3NvcnMiLCJ0cmFja3MiLCJpbnB1dEFjY2Vzc29yIiwib3V0cHV0QWNjZXNzb3IiLCJUeXBlZEtleWZyYW1lVHJhY2siLCJ1cGRhdGVNYXRyaXgiLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJWZWN0b3JLZXlmcmFtZVRyYWNrIiwidGFyZ2V0TmFtZSIsImludGVycG9sYXRpb24iLCJ0cmF2ZXJzZSIsImlzTWVzaCIsIm91dHB1dEFycmF5Iiwic2NhbGVkIiwidHJhY2siLCJjcmVhdGVJbnRlcnBvbGFudCIsInRpbWVzIiwiZ2V0VmFsdWVTaXplIiwiaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUiLCJBbmltYXRpb25DbGlwIiwiaW5zdGFuY2VOdW0iLCJvIiwibGlnaHQiLCJCb25lIiwiT2JqZWN0M0QiLCJQcm9wZXJ0eUJpbmRpbmciLCJtYXRyaXgiLCJNYXRyaXg0IiwicXVhdGVybmlvbiIsImJ1aWxkTm9kZUhpZXJhY2h5Iiwibm9kZUlkIiwicGFyZW50T2JqZWN0IiwicGVuZGluZ0pvaW50cyIsImpvaW50Tm9kZXMiLCJib25lcyIsImJvbmVJbnZlcnNlcyIsImpvaW50Tm9kZSIsIm1hdCIsImJpbmQiLCJTa2VsZXRvbiIsImNoaWxkIiwic2NlbmVJbmRleCIsInNjZW5lRGVmIiwibm9kZUlkcyIsIklOVEVSU0VDVEVEIiwic2VsZWN0ZWRMYWJlbCIsInJheWNhc3RlciIsIm1vdXNlIiwiY2xvY2siLCJzZWxlY3RlZFJlYWxpdHkiLCJNUVRUQ2xpZW50IiwiY29udHJvbHMiLCJwbGFjZSIsInN0YXRzIiwiU3RhdHMiLCJkb20iLCJsYWJlbFJlbmRlcmVyIiwibGFiZWwiLCJndWkiLCJEYXRHVUkiLCJUZXh0dXJlIiwiZW52aXJvbm1lbnQiLCJzaG93IiwiaXRlbSIsImxvYWRlZCIsInRvdGFsIiwiSW50ZXJhY3Rpb24iLCJtZXNoSGVscGVyIiwibW9kZWwiLCJlbmFibGUiLCJvbkRvY3VtZW50TW91c2VEb3duIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWVudFgiLCJjbGllbnRZIiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwiY3VycmVudE9wYWNpdHkiLCJsYWJlbHNWaXNpYmlsaXR5IiwiY3VycmVudENvbG9yIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibWFpbiIsImRhdCIsIkdVSSIsInVzZUxvY2FsU3RvcmFnZSIsIm9uQ2hhbmdlIiwic2F2ZUNvbmZpZyIsImxhYmVsc0ZvbGRlciIsImFkZEZvbGRlciIsInRvZ2dsZUxhYmVscyIsInJlYWxpdHlGb2xkZXIiLCJsaXN0ZW4iLCJ0b2dnbGVSZWFsaXR5Iiwib3RoZXJGb2xkZXIiLCJyZWxvYWQiLCJjbG9zZSIsInZhcmlhYmxlIiwiZGVzdHJveSIsInRpbWVvdXQiLCJrZXlib2FyZCIsIktleWJvYXJkIiwiSGVscGVycyIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZU92ZXIiLCJldmVudE1hdGNoZXMiLCJjbGVhclRpbWVvdXQiLCJUT1BJQ19ST0JPVF9DUkVBVEUiLCJUT1BJQ19ST0JPVF9ERUxFVEUiLCJUT1BJQ19ST0JPVF9CUk9BRENBU1QiLCJUT1BJQ19MT0NfSU5GT19GUk9NX1NFUlZFUiIsIlRPUElDX0xPQ19JTkZPX0ZST01fTE9DX1NZU1RFTVMiLCJUT1BJQ19MT0NfUkVRVUVTVCIsIlRPUElDX09CU1RBQ0xFX1JFUVVFU1QiLCJUT1BJQ19PQlNUQUNMRVNfTElTVCIsIlRPUElDX09CU1RBQ0xFU19ERUxFVEUiLCJUT1BJQ19PQlNUQUNMRVNfREVMRVRFX0FMTCIsIlRPUElDX0NIQU5HRV9DT0xPUiIsIlRPUElDX01BTkFHRU1FTlRfVklTVUFMSVpFUiIsIlRPUElDX01BTkFHRU1FTlRfU05BUFNIT1QiLCJ1cGRhdGVDaGFubmVsIiwiY2xpZW50X2lkIiwiY2xpZW50IiwiTVFUVCIsImNvbm5lY3QiLCJ1c2VyTmFtZSIsInJlY29ubmVjdCIsInVzZVNTTCIsImNsZWFuU2Vzc2lvbiIsIm9uU3VjY2VzcyIsInN1YnNjcmliZSIsIm9uTWVzc2FnZUFycml2ZWQiLCJvbkNvbm5lY3Rpb25Mb3N0Iiwib25GYWlsdXJlIiwicmVzcG9uc2VPYmplY3QiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJwYWNrZXQiLCJtc2ciLCJwYXlsb2FkU3RyaW5nIiwidHJpbSIsImRlc3RpbmF0aW9uTmFtZSIsInRvcGljIiwiZXhpc3RzIiwiY3JlYXRlTGlzdCIsImRlbGV0ZUFsbCIsImNoYW5nZUNvbG9yIiwiaW5uZXJIVE1MIiwic25hcHNob3QiLCJzdWJFbGVtZW50IiwidGl0bGVFbGVtZW50IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic3ViVG9waWMiLCJtZXNzYWdlIiwicGF5bG9hZCIsInB1YlRvcGljIiwic2VuZCIsIk1vZGVsIiwicmVmIiwiaXNMaWdodCIsIkJ1ZmZlckdlb21ldHJ5VXRpbHMiLCJVViIsIm1heEFuaXNvdHJvcHkiLCJpbWFnZUZpbGVzIiwicHJvbWlzZUFycmF5IiwiaW1hZ2VGaWxlIiwiaW1hZ2UiLCJhbmlzb3Ryb3B5IiwibW9kZWxPQkoiLCJ4aHIiLCJyZWFzb24iLCJyZXNvbHZlZENvbmZpZyIsImNvbmZpZyIsImFyZW5hIiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsIm1peGVkUmVhbGl0eSIsInJvYm90cyIsInNlbGVjdGVkUmVhbGl0aWVzIiwicmVhbCIsInZpcnR1YWwiLCJoaWRkZW5PcGFjaXR5IiwiaXNEZXYiLCJpc1Nob3dpbmdTdGF0cyIsImlzU2hvd2luZ1JvYm90U25hcHNob3RzIiwiaXNMb2FkZWQiLCJpc1R3ZWVuaW5nIiwiaXNSb3RhdGluZyIsImlzTW91c2VNb3ZpbmciLCJpc01vdXNlT3ZlciIsImRwciIsImVhc2luZyIsImR1cmF0aW9uIiwiZW5hYmxlSGVscGVyIiwidHJhbnNsdWNlbnQiLCJmb3YiLCJwb3NYIiwicG9zWSIsInBvc1oiLCJoZWxwZXJFbmFibGVkIiwibWFwV2lkdGgiLCJtYXBIZWlnaHQiLCJncm91bmRDb2xvciIsInN0b3JlZENvbmZpZyIsImNvbXB1dGVUYW5nZW50cyIsIm5vcm1hbHMiLCJ1dnMiLCJuVmVydGljZXMiLCJ0YW5nZW50cyIsInRhbjEiLCJ0YW4yIiwidkEiLCJ2QiIsInZDIiwidXZBIiwidXZCIiwidXZDIiwic2RpciIsInRkaXIiLCJncm91cHMiLCJoYW5kbGVUcmlhbmdsZSIsInciLCJ0bXAiLCJ0bXAyIiwibiIsIm4yIiwiaGFuZGxlVmVydGV4IiwiYSIsImIiLCJzdWIiLCJpc0Zpbml0ZSIsImFkZFNjYWxlZFZlY3RvciIsImRvdCIsImNyb3NzVmVjdG9ycyIsIm1lcmdlQnVmZmVyR2VvbWV0cmllcyIsInVzZUdyb3VwcyIsImlzSW5kZXhlZCIsImF0dHJpYnV0ZXNVc2VkIiwiU2V0IiwibW9ycGhBdHRyaWJ1dGVzVXNlZCIsIm1lcmdlZEdlb21ldHJ5IiwiYXR0cmlidXRlc0NvdW50IiwiaGFzIiwibWVyZ2VkVXNlckRhdGEiLCJhZGRHcm91cCIsImluZGV4T2Zmc2V0IiwibWVyZ2VkSW5kZXgiLCJtZXJnZWRBdHRyaWJ1dGUiLCJtZXJnZUJ1ZmZlckF0dHJpYnV0ZXMiLCJudW1Nb3JwaFRhcmdldHMiLCJtb3JwaEF0dHJpYnV0ZXNUb01lcmdlIiwibWVyZ2VkTW9ycGhBdHRyaWJ1dGUiLCJhcnJheUxlbmd0aCIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJpbnRlcmxlYXZlQXR0cmlidXRlcyIsImludGVybGVhdmVkQnVmZmVyIiwicmVzIiwiZ2V0dGVycyIsInNldHRlcnMiLCJpYmEiLCJrIiwiZXN0aW1hdGVCeXRlc1VzZWQiLCJtZW0iLCJhdHRyIiwibWVyZ2VWZXJ0aWNlcyIsInRvbGVyYW5jZSIsIk51bWJlciIsIkVQU0lMT04iLCJoYXNoVG9JbmRleCIsInZlcnRleENvdW50IiwibmV4dEluZGV4IiwiYXR0cmlidXRlTmFtZXMiLCJhdHRyQXJyYXlzIiwibW9ycGhBdHRyc0FycmF5cyIsIm1vcnBoQXR0ciIsImZpbGwiLCJkZWNpbWFsU2hpZnQiLCJsb2cxMCIsInNoaWZ0TXVsdGlwbGllciIsImhhc2giLCJuZXdhcnJheSIsIm5ld01vcnBoQXJyYXlzIiwiZ2V0dGVyRnVuYyIsIm1sIiwib2xkQXR0cmlidXRlIiwib2xkTW9ycGhBdHRyaWJ1dGUiLCJtb3JwaEF0dHJpYnV0ZSIsIlRyaWFuZ2xlc0RyYXdNb2RlIiwiY2xlYXJHcm91cHMiLCJjYW52YXMiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJ3ZWJnbCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsImdldENvbnRleHQiLCJ3b3JrZXJzIiwiV29ya2VyIiwiZmlsZWFwaSIsIkZpbGUiLCJGaWxlUmVhZGVyIiwiRmlsZUxpc3QiLCJnZXRXZWJHTEVycm9yTWVzc2FnZSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJiYWNrZ3JvdW5kIiwicGFkZGluZyIsIm1hcmdpbiIsImFkZEdldFdlYkdMTWVzc2FnZSIsInBhcmVudCIsImZuIiwidGhyZXNoaG9sZCIsImxhc3QiLCJkZWZlclRpbWVyIiwiY29udGV4dCIsIm5vdyIsIkRhdGUiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJsZW5ndGhDb21wdXRhYmxlIiwicGVyY2VudENvbXBsZXRlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibm9ybWFsc05lZWRVcGRhdGUiLCJjb2xvcnNOZWVkVXBkYXRlIiwibWF0ZXJpYWxLZXkiLCJBTElBUyIsImRvd24iLCJzcGFjZSIsInRhYiIsImVzY2FwZSIsImtleUNvZGVzIiwib25LZXlDaGFuZ2UiLCJvbkJsdXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJvcCIsImtleUNvZGUiLCJrZXlEZXNjIiwicHJlc3NlZCIsInRvVXBwZXJDYXNlIiwiYWxpYXNlcyIsImFsaWFzS2V5cyIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiXSwic291cmNlUm9vdCI6IiJ9