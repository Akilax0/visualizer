/*! For license information please see main.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkpera_swarm_visualizer=self.webpackChunkpera_swarm_visualizer||[]).push([["main"],{"./src/js/app.js":(e,t,r)=>{r.r(t);var n=r("./src/js/data/config.js"),o=r("./src/js/utils/detector.js"),a=r("./src/js/app/main.js");r("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),n.default.isDev=!0,function(){if(o.default.webgl){var e=document.getElementById("appContainer");new a.default(e)}else o.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.domElement.width,i=t.domElement.height;this.threeCamera=new n.PerspectiveCamera(o.default.camera.fov,a/i,o.default.camera.near,o.default.camera.far),this.threeCamera.position.set(o.default.camera.posX,o.default.camera.posY,o.default.camera.posZ),this.threeCamera.up.set(0,0,1),this.updateSize(t),window.addEventListener("resize",(function(){return r.updateSize(t)}),!1)}var t,r,a;return t=e,(r=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/controls.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/examples/jsm/controls/OrbitControls.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.threeControls=new n.OrbitControls(t,r),this.init()}var t,r,a;return t=e,(r=[{key:"init",value:function(){this.threeControls.target.set(o.default.controls.target.x,o.default.controls.target.y,o.default.controls.target.z),this.threeControls.autoRotate=o.default.controls.autoRotate,this.threeControls.autoRotateSpeed=o.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=o.default.controls.rotateSpeed,this.threeControls.zoomSpeed=o.default.controls.zoomSpeed,this.threeControls.minDistance=o.default.controls.minDistance,this.threeControls.maxDistance=o.default.controls.maxDistance,this.threeControls.minPolarAngle=o.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=o.default.controls.maxPolarAngle,this.threeControls.enableDamping=o.default.controls.enableDamping,this.threeControls.enableZoom=o.default.controls.enableZoom,this.threeControls.dampingFactor=o.default.controls.dampingFactor,this.threeControls.enableRotate=!0,null==o.default.controls.minAzimuthAngle?this.threeControls.minAzimuthAngle=-1/0:this.threeControls.minAzimuthAngle=o.default.controls.minAzimuthAngle,null==o.default.controls.maxAzimuthAngle?this.threeControls.maxAzimuthAngle=1/0:this.threeControls.maxAzimuthAngle=o.default.controls.maxAzimuthAngle}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/environment.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}function s(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var l=s((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),console.log("Environment: Scale: ".concat(scene_scale,", arenaSize:").concat(o.default.arena.size));var t=new n.PlaneBufferGeometry(o.default.arena.size,o.default.arena.size),r=new n.MeshPhongMaterial({color:10066329,depthWrite:!1});r.userData.originalColor=new n.Color(10066329);var a=new n.Mesh(t,r);a.scale.set(scene_scale,scene_scale,scene_scale),a.position.set(0,0,0),a.receiveShadow=!0,scene.add(a);var i=new n.GridHelper(o.default.arena.size,Math.round(o.default.arena.size/10),0,5987163);i.rotation.x=-Math.PI/2,i.scale.set(scene_scale,scene_scale,scene_scale),i.position.set(0,0,0),i.material.opacity=.35,i.material.transparent=!0,scene.add(i)}))},"./src/js/app/components/geometry.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/components/material.js"),a=r("./src/js/data/config.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return l(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,r,i;return t=e,r=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new n.PlaneGeometry(e,r,o,a)}:"sphere"===e?function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new n.SphereGeometry(e,r,o)}:void 0}},{key:"place",value:function(e,t){var r,i,l=new o.default(15658734).standard,u=new n.Mesh(this.geo,l);(r=u.position).set.apply(r,s(e)),(i=u.rotation).set.apply(i,s(t)),a.default.shadow.enabled&&(u.receiveShadow=!0),this.scene.add(u)}}],r&&u(t.prototype,r),i&&u(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/label.js":(e,t,r)=>{r.r(t),r.d(t,{addLabel:()=>i,default:()=>a,removeLabel:()=>s});var n=r("./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js"),o=r("./src/js/data/config.js");function a(){var e=new n.CSS2DRenderer;return e.setSize(window.innerWidth,window.innerHeight),e.domElement.style.position="absolute",e.domElement.style.top="0px",e.isShowingLables=o.default.isShowingLables,e.isShowingObstacleLables=o.default.labelsVisibility.obstacles,e.isShowingRobotLables=o.default.labelsVisibility.robots,e.updateSize=function(){e.setSize(window.innerWidth,window.innerHeight)},document.addEventListener("DOMContentLoaded",(function(){return e.updateSize()}),!1),window.addEventListener("resize",(function(){return e.updateSize()}),!1),e}var i=function(e,t,r,o){if(void 0!==r){var a=document.createElement("div");a.className="label",a.textContent=t.name+" ["+r.reality+"]",a.style.marginTop="-1.2em";var i=new n.CSS2DObject(a);i.name="Label[".concat(t.id,"]"),i.position.set(0,1,0),i.visible=o,r.add(i),r.removeLabel=function(){r.remove(i)}}},s=function(e){void 0!==e&&void 0!==e.removeLabel&&e.removeLabel()}},"./src/js/app/components/light.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,r,a;return t=e,(r=[{key:"init",value:function(){this.ambientLight=new n.AmbientLight(o.default.ambientLight.color),this.ambientLight.visible=o.default.ambientLight.enabled,this.pointLight=new n.PointLight(o.default.pointLight.color,o.default.pointLight.intensity,o.default.pointLight.distance),this.pointLight.position.set(o.default.pointLight.x,o.default.pointLight.y,o.default.pointLight.z),this.pointLight.visible=o.default.pointLight.enabled,this.directionalLight=new n.DirectionalLight(o.default.directionalLight.color,o.default.directionalLight.intensity),this.directionalLight.position.set(o.default.directionalLight.x,o.default.directionalLight.y,o.default.directionalLight.z),this.directionalLight.visible=o.default.directionalLight.enabled,this.directionalLight.castShadow=o.default.shadow.enabled,this.directionalLight.shadow.bias=o.default.shadow.bias,this.directionalLight.shadow.camera.near=o.default.shadow.near,this.directionalLight.shadow.camera.far=o.default.shadow.far,this.directionalLight.shadow.camera.left=o.default.shadow.left,this.directionalLight.shadow.camera.right=o.default.shadow.right,this.directionalLight.shadow.camera.top=o.default.shadow.top,this.directionalLight.shadow.camera.bottom=o.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=o.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=o.default.shadow.mapHeight,this.directionalLightHelper=new n.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=o.default.shadow.helperEnabled,this.hemiLight=new n.HemisphereLight(o.default.hemiLight.color,o.default.hemiLight.groundColor,o.default.hemiLight.intensity),this.hemiLight.position.set(o.default.hemiLight.x,o.default.hemiLight.y,o.default.hemiLight.z),this.hemiLight.visible=o.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/material.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(a=n.key,i=void 0,i=function(e,t){if("object"!==o(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===o(i)?i:String(i)),n)}var a,i}function i(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var s=i((function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new n.MeshBasicMaterial({color:t,side:n.DoubleSide}),this.standard=new n.MeshStandardMaterial({color:t,shading:n.FlatShading,roughness:1,metalness:0,side:n.DoubleSide}),this.wire=new n.MeshBasicMaterial({wireframe:!0})}))},"./src/js/app/components/obstacle.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js"),a=r("./src/js/app/components/label.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var l="Obstacle_",u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,console.log("Obstacle Reality:",o.default.mixedReality.obstacles),void 0!==r&&r()}var t,r,i;return t=e,(r=[{key:"createList",value:function(e){var t=this;Object.entries(e).forEach((function(e){void 0!==e&&t.create(e[1])}))}},{key:"create",value:function(e){var t=this.createGeometry(e.geometry),r=this.createMaterial(e.material);r.userData.originalColor=new n.Color(6710886),r.userData.labelVisibility=o.default.isShowingLables&&o.default.labelsVisibility.obstacles,r.userData.originalEmmisive=r.emissive.getHex(),r.selected=!1,r.transparent=!0;var i=e.id||1e3+Math.floor(900*Math.random()),s=null==e.reality?"V":e.reality,u=new n.Mesh(t,r),c="Obs_"+i.toString().substring(0,8)+"...";if(u.name=l+i,u.reality=s,"V"===u.reality?r.opacity=o.default.selectedRealities.virtual?1:o.default.hiddenOpacity:"R"===u.reality&&(r.opacity=o.default.selectedRealities.real?1:o.default.hiddenOpacity),this.deleteIfExists(i),this.scene.add(u),void 0!==e.position){var d=e.position,f=d.x,p=d.y,m=this.calculateZ(e);u.scale.set(scene_scale,scene_scale,scene_scale),u.position.set(scene_scale*f,scene_scale*p,scene_scale*m)}if(void 0!==e.rotation){var h=e.rotation,y=h.x,g=h.y,v=h.z,b=(90+y)/360*2*Math.PI,w=g/360*2*Math.PI,S=v/360*2*Math.PI;u.rotation.set(b,w,S)}o.default.shadow.enabled&&(u.receiveShadow=!0),(0,a.addLabel)(l,{id:e.id,name:c},u,o.default.labelsVisibility.obstacles),console.log("Created>",u.name)}},{key:"createGeometry",value:function(e){if(null==e.type)throw new TypeError("type unspecified");if("BoxGeometry"==e.type)return this.createBoxGeometry(e.width,e.height,e.depth);if("CylinderGeometry"==e.type)return this.createCylinderGeometry(e.radiusTop,e.radiusBottom,e.height);if("SphereGeometry"==e.type)return this.createSphereGeometry(e.radius);throw new TypeError("unsupported geometry type")}},{key:"createBoxGeometry",value:function(e,t,r){if(null==e)throw new TypeError("width unspecified");if(null==t)throw new TypeError("height unspecified");if(null==r)throw new TypeError("depth unspecified");return new n.BoxGeometry(e,t,r)}},{key:"createCylinderGeometry",value:function(e,t,r){if(null==e)throw new TypeError("radiusTop unspecified");if(null==t)throw new TypeError("radiusBottom unspecified");if(null==r)throw new TypeError("height unspecified");var o=o||2,a=a||16;return new n.CylinderGeometry(e,t,r,a,o)}},{key:"createSphereGeometry",value:function(e){if(null==e)throw new TypeError("radius unspecified");var t=t||16,r=r||16;return new n.SphereGeometry(e,t,r)}},{key:"createMaterial",value:function(e){return"MeshBasicMaterial"==e.type?new n.MeshBasicMaterial(e.properties):"MeshNormalMaterial"==e.type?new n.MeshNormalMaterial(e.properties):"MeshPhongMaterial"==e.type?new n.MeshPhongMaterial(e.properties):"MeshPhysicalMaterial"==e.type?new n.MeshPhysicalMaterial(e.properties):(e.type,new n.MeshStandardMaterial(e.properties))}},{key:"calculateZ",value:function(e){return null==e.position.z?void 0!==e.geometry.height?e.geometry.height/2:void 0!==e.geometry.radius?e.geometry.radius:0:e.position.z}},{key:"deleteIfExists",value:function(e){var t=l+e,r=this.scene.getObjectByName(t);void 0!==r&&(this.scene.remove(r),console.log("Deleted>",t))}},{key:"deleteAll",value:function(){var e=this,t=this.scene.children;Object.entries(t).forEach((function(t){var r=t[1].name;r.startsWith(l)&&(console.log("Deleted>",r),(0,a.removeLabel)(t[1]),e.scene.remove(t[1]))}))}}])&&s(t.prototype,r),i&&s(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/renderer.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/data/config.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=r,this.threeRenderer=new n.WebGLRenderer({antialias:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),r.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=n.PCFSoftShadowMap,o.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return a.updateSize()}),!1),window.addEventListener("resize",(function(){return a.updateSize()}),!1)}var t,r,a;return t=e,(r=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/components/robot.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=r("./src/js/data/config.js"),i=r("./src/js/app/components/label.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==s(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===s(a)?a:String(a)),n)}var o,a}var u=r("./node_modules/three-stl-loader/index.js")(n),c="Robot_",d=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,console.log("Robot Reality:",a.default.mixedReality.robots);var n=this;this.created=!0,setInterval((function(){!0===r.created&&(n.prune(),r.created=!1)}),2500)}var t,r,s;return t=e,r=[{key:"changeColor",value:function(e,t,r,n,o,a){var i=this.scene.getObjectByName(c+e);return null!=i?(i.material.color.setRGB(t/256,r/256,n/265),null!=a&&a("success")):null!=a&&a("undefined"),i}},{key:"create",value:function(e,t,r,o){var s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"V",l=arguments.length>5?arguments[5]:void 0,d=this.scene.getObjectByName(c+e),f=a.default.mixedReality.robots;return null==d?s===f||"M"===f?(t=scene_scale*Math.min(Math.max(t,a.default.arena.minX),a.default.arena.maxX),r=scene_scale*Math.min(Math.max(r,a.default.arena.minY),a.default.arena.maxY),(new u).load("./assets/models/model.stl",(function(u,d){var f=new n.MeshStandardMaterial({color:6710886,opacity:1,transparent:!0});f.userData.originalColor=new n.Color(6710886),f.userData.labelVisibility=a.default.isShowingLables&&a.default.labelsVisibility.robots,f.selected=!1;var p=new n.Mesh(u,f);p.receiveShadow=!0,p.robotId=e,p.name=c+e,p.scale.set(scene_scale,scene_scale,scene_scale),p.position.set(t,r,0),p.rotation.x=90*n.Math.DEG2RAD,p.rotation.y=(o-90)*n.Math.DEG2RAD,p.reality=s,"V"===s?f.opacity=a.default.selectedRealities.virtual?1:a.default.hiddenOpacity:"R"===s&&(f.opacity=a.default.selectedRealities.real?1:a.default.hiddenOpacity),window.scene.add(p),p.clickEvent=function(e){window.robot.alert(e)},(0,i.addLabel)(c,{id:e,name:p.name},p,a.default.labelsVisibility.robots),console.log("Created> Robot: id:".concat(e," | x:").concat(t," y: ").concat(r," heading: ").concat(o," | reality: ").concat(s)),null!=l&&l("success")}))):console.error("Creation Failed> Robot: id:".concat(e,"  reality: ").concat(s,"!=").concat(f)):s===f||"M"===f?(this.setReality(e,s),this.move(e,t,r,o,(function(){null!=l&&l("already defined, so moved")}))):this.delete(e),this.created=!0,d}},{key:"delete",value:function(e,t){if(null!=e){var r=this.scene.getObjectByName(c+e);null!=r?((0,i.removeLabel)(r),scene.remove(r),console.log("Deleted> id:",e),null!=t&&t("success")):null!=t&&t("not found")}else null!=t&&t("id not specified")}},{key:"deleteAll",value:function(){var e=this,t=this.scene.children;Object.entries(t).forEach((function(t){var r=t[1].name;r.startsWith(c)&&(console.log("Deleted>",r),(0,i.removeLabel)(t[1]),e.scene.remove(t[1]))}))}},{key:"setReality",value:function(e,t){var r=this.scene.getObjectByName(c+e);null!=r&&(r.reality=t)}},{key:"exists",value:function(e){return this.scene.getObjectByName(c+e)}},{key:"move",value:function(e,t,r,i,s){var l=this.scene.getObjectByName(c+e);if(null!=l){var u=l.rotation.y,d=(i-90)*n.Math.DEG2RAD,f={x:l.position.x,y:l.position.y,heading:l.rotation.y},p=u*d>=0;return t=scene_scale*Math.min(Math.max(Math.round(10*t)/10,a.default.arena.minX),a.default.arena.maxX),r=scene_scale*Math.min(Math.max(Math.round(10*r)/10,a.default.arena.minY),a.default.arena.maxY),i=Math.round(10*i)/10,0!=Math.sqrt(Math.pow(t-f.x,2)+Math.pow(r-f.y,2))?new o.default.Tween(f).to({x:t,y:r,heading:d},1e3).onUpdate((function(){l.position.x=f.x,l.position.y=f.y,p&&(l.rotation.y=f.heading)})).onComplete((function(){l.rotation.y=f.heading,null!=s&&s("success")})).delay(50).start():l.rotation.y=d,l}null!=s&&s("undefined")}},{key:"get_coordinates",value:function(e){var t=this.scene.getObjectByName(c+e);return null!=t?(console.log("".concat(t.position.x,",").concat(t.position.y,",").concat(t.position.z)),t):null}},{key:"update",value:function(){o.default.update()}},{key:"requestSnapshot",value:function(e){return new Promise((function(t,r){t(!window.mqtt.publish(window.channel+"/mgt/robots/snapshot",JSON.stringify({id:e.robotId})))}))}},{key:"alert",value:function(e){var t,r=document.querySelector("#msg-box"),n=document.getElementById("msg-content"),o=document.createElement("div");o.setAttribute("id","msg-content"),a.default.isShowingRobotSnapshots?(t=document.createTextNode("".concat(e.name," Snapshot Loading...")),this.requestSnapshot(e)):t=document.createTextNode("".concat(e.name)),o.appendChild(t),r.replaceChild(o,n),r.style.display="block",setTimeout((function(){r.style.opacity="1.0",r.style.display="none"}),1e4)}},{key:"prune",value:function(){var e=this,t=this.scene.children,r=[];Object.entries(t).forEach((function(t){var n=t[1].name;n.startsWith(c)&&(void 0===r[n]?r[n]="valid":((0,i.removeLabel)(t[1]),e.scene.remove(t[1]),console.log(n,": duplicate")))}))}}],r&&l(t.prototype,r),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/helpers/vertexNormalsHelper.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,i=void 0,i=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===a(i)?i:String(i)),n)}var o,i}var s=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=r,this.scene=t;var a=new n.WireframeGeometry(this.mesh.geometry);this.wireLine=new n.LineSegments(a),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new n.EdgesGeometry(this.mesh.geometry);this.edgesLine=new n.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new o.VertexNormalsHelper(this.mesh,2),this.boxHelper=new n.BoxHelper(this.mesh)}var t,r,a;return t=e,(r=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&i(t.prototype,r),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/helpers/urlHelper.js":(e,t,r)=>{function n(e,t){var r,n=t;return window.location.href.indexOf(e)>-1&&(n=(r={},window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,(function(e,t,n){r[t]=n})),r)[e]),n}function o(){var e,t,r,o=localStorage.getItem("pera-swarm-credentials"),a=n("key",!1),i=n("username",!1),s=n("password",!1),l=n("channel",!1),u=n("port",!1),c=n("server",!1);if(e=window.location.origin+window.location.pathname,window.history.pushState({},document.title,e),setTimeout((function(){!1!==c&&localStorage.setItem("pera-swarm-server",c),!1!==l&&localStorage.setItem("pera-swarm-channel",l),!1!==u&&localStorage.setItem("pera-swarm-port",u),!1!==a&&localStorage.setItem("pera-swarm-key",a)}),2e3),!1!==a){console.log("Credentails: Loaded from JWT");var d=(t=a.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=decodeURIComponent(atob(t).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join("")),JSON.parse(r)),f=d.user,p=d.pass,m=d.channel;return void 0!==d.host&&localStorage.setItem("pera-swarm-server",d.host),void 0!==d.port&&localStorage.setItem("pera-swarm-port",parseInt(d.port)),void 0!==d.path&&localStorage.setItem("pera-swarm-path",d.path),void 0!==d.channel&&localStorage.setItem("pera-swarm-channel",d.channel),localStorage.setItem("pera-swarm-credentials",JSON.stringify({username:f,password:p,channel:m})),{username:f,password:p,channel:m}}return!1!==i&&!1!==s?(console.log("Credentails: Loaded from URL parameters"),localStorage.setItem("pera-swarm-credentials",JSON.stringify({username:i,password:s,channel:l})),{username:i,password:s,channel:l}):!1===i&&!1===s&&null!==o?(console.log("Credentails: Loaded from local storage"),JSON.parse(o)):-1}r.r(t),r.d(t,{getCredentials:()=>o})},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,r)=>{r.r(t),r.d(t,{VertexNormalsHelper:()=>l});var n=r("./node_modules/three/build/three.module.js"),o=new n.Vector3,a=new n.Vector3,i=new n.Matrix3,s=["a","b","c"];function l(e,t,r){this.object=e,this.size=void 0!==t?t:.1;var o=void 0!==r?r:16711680,a=0,i=this.object.geometry;i&&i.isGeometry?a=3*i.faces.length:i&&i.isBufferGeometry&&(a=i.attributes.normal.count);var s=new n.BufferGeometry,l=new n.Float32BufferAttribute(2*a*3,3);s.setAttribute("position",l),n.LineSegments.call(this,s,new n.LineBasicMaterial({color:o,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(n.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,r=this.geometry.attributes.position,n=this.object.geometry;if(n&&n.isGeometry){var l=n.vertices,u=n.faces;e=0;for(var c=0,d=u.length;c<d;c++)for(var f=u[c],p=0,m=f.vertexNormals.length;p<m;p++){var h=l[f[s[p]]],y=f.vertexNormals[p];o.copy(h).applyMatrix4(t),a.copy(y).applyMatrix3(i).normalize().multiplyScalar(this.size).add(o),r.setXYZ(e,o.x,o.y,o.z),e+=1,r.setXYZ(e,a.x,a.y,a.z),e+=1}}else if(n&&n.isBufferGeometry){var g=n.attributes.position,v=n.attributes.normal;e=0;for(var b=0,w=g.count;b<w;b++)o.set(g.getX(b),g.getY(b),g.getZ(b)).applyMatrix4(t),a.set(v.getX(b),v.getY(b),v.getZ(b)),a.applyMatrix3(i).normalize().multiplyScalar(this.size).add(o),r.setXYZ(e,o.x,o.y,o.z),e+=1,r.setXYZ(e,a.x,a.y,a.z),e+=1}r.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,r)=>{r.r(t),r.d(t,{GLTFLoader:()=>a});var n=r("./node_modules/three/build/three.module.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}var a=function(){function e(e){n.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(n.Loader.prototype),{constructor:e,load:function(e,t,r,o){var a,i=this;a=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:n.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){o?o(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new n.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(r){try{i.parse(r,a,(function(r){t(r),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),r,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,o,c){var d,h={};if("string"==typeof e)d=e;else if(n.LoaderUtils.decodeText(new Uint8Array(e,0,4))===u){try{h[r.KHR_BINARY_GLTF]=new f(e)}catch(e){return void(c&&c(e))}d=h[r.KHR_BINARY_GLTF].content}else d=n.LoaderUtils.decodeText(new Uint8Array(e));var v=JSON.parse(d);if(void 0===v.asset||v.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(v.extensionsUsed)for(var b=0;b<v.extensionsUsed.length;++b){var w=v.extensionsUsed[b],S=v.extensionsRequired||[];switch(w){case r.KHR_LIGHTS_PUNCTUAL:h[w]=new i(v);break;case r.KHR_MATERIALS_CLEARCOAT:h[w]=new l;break;case r.KHR_MATERIALS_UNLIT:h[w]=new s;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:h[w]=new y;break;case r.KHR_DRACO_MESH_COMPRESSION:h[w]=new p(v,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:h[w]=new a(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:h[w]=new m;break;case r.KHR_MESH_QUANTIZATION:h[w]=new g;break;default:S.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new F(v,h,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(o,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function a(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=r.KHR_MATERIALS_UNLIT}function l(){this.name=r.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],o=new n.Color(16777215);void 0!==r.color&&o.fromArray(r.color);var a=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new n.DirectionalLight(o)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new n.PointLight(o)).distance=a;break;case"spot":(t=new n.SpotLight(o)).distance=a,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:Math.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return n.MeshBasicMaterial},s.prototype.extendParams=function(e,t,r){var o=[];e.color=new n.Color(1,1,1),e.opacity=1;var a=t.pbrMetallicRoughness;if(a){if(Array.isArray(a.baseColorFactor)){var i=a.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==a.baseColorTexture&&o.push(r.assignTexture(e,"map",a.baseColorTexture))}return Promise.all(o)},l.prototype.getMaterialType=function(){return n.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,r){var o=[],a=t.extensions[this.name];if(void 0!==a.clearcoatFactor&&(e.clearcoat=a.clearcoatFactor),void 0!==a.clearcoatTexture&&o.push(r.assignTexture(e,"clearcoatMap",a.clearcoatTexture)),void 0!==a.clearcoatRoughnessFactor&&(e.clearcoatRoughness=a.clearcoatRoughnessFactor),void 0!==a.clearcoatRoughnessTexture&&o.push(r.assignTexture(e,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),void 0!==a.clearcoatNormalTexture&&(o.push(r.assignTexture(e,"clearcoatNormalMap",a.clearcoatNormalTexture)),void 0!==a.clearcoatNormalTexture.scale)){var i=a.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new n.Vector2(i,i)}return Promise.all(o)};var u="glTF",c=12,d={JSON:1313821514,BIN:5130562};function f(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,c);if(this.header={magic:n.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var o=new DataView(e,c),a=0;a<o.byteLength;){var i=o.getUint32(a,!0);a+=4;var s=o.getUint32(a,!0);if(a+=4,s===d.JSON){var l=new Uint8Array(e,c+a,i);this.content=n.LoaderUtils.decodeText(l)}else if(s===d.BIN){var f=c+a;this.body=e.slice(f,f+i)}a+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=r.KHR_TEXTURE_TRANSFORM}function h(e){n.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),r=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),o=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),a=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new n.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var n in s)e.uniforms[n]=s[n];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function y(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return h},extendParams:function(e,t,r){var o=t.extensions[this.name];e.color=new n.Color(1,1,1),e.opacity=1;var a=[];if(Array.isArray(o.diffuseFactor)){var i=o.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==o.diffuseTexture&&a.push(r.assignTexture(e,"map",o.diffuseTexture)),e.emissive=new n.Color(0,0,0),e.glossiness=void 0!==o.glossinessFactor?o.glossinessFactor:1,e.specular=new n.Color(1,1,1),Array.isArray(o.specularFactor)&&e.specular.fromArray(o.specularFactor),void 0!==o.specularGlossinessTexture){var s=o.specularGlossinessTexture;a.push(r.assignTexture(e,"glossinessMap",s)),a.push(r.assignTexture(e,"specularMap",s))}return Promise.all(a)},createMaterial:function(e){var t=new h(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=n.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function g(){this.name=r.KHR_MESH_QUANTIZATION}function v(e,t,r,o){n.Interpolant.call(this,e,t,r,o)}p.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,o=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,i={},s={},l={};for(var u in a){var c=C[u]||u.toLowerCase();i[c]=a[u]}for(u in e.attributes){c=C[u]||u.toLowerCase();if(void 0!==a[u]){var d=r.accessors[e.attributes[u]],f=L[d.componentType];l[c]=f,s[c]=!0===d.normalized}}return t.getDependency("bufferView",o).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],o=s[r];void 0!==o&&(n.normalized=o)}t(e)}),i,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},h.prototype=Object.create(n.MeshStandardMaterial.prototype),h.prototype.constructor=h,h.prototype.copy=function(e){return n.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},v.prototype=Object.create(n.Interpolant.prototype),v.prototype.constructor=v,v.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,o=e*n*3+n,a=0;a!==n;a++)t[a]=r[o+a];return t},v.prototype.beforeStart_=v.prototype.copySampleValue_,v.prototype.afterEnd_=v.prototype.copySampleValue_,v.prototype.interpolate_=function(e,t,r,n){for(var o=this.resultBuffer,a=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,u=n-t,c=(r-t)/u,d=c*c,f=d*c,p=e*l,m=p-l,h=-2*f+3*d,y=f-d,g=1-h,v=y-d+c,b=0;b!==i;b++){var w=a[m+b+i],S=a[m+b+s]*u,T=a[p+b+i],M=a[p+b]*u;o[b]=g*w+v*S+h*T+y*M}return o};var b=0,w=1,S=2,T=3,M=4,x=5,j=6,L={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},E={9728:n.NearestFilter,9729:n.LinearFilter,9984:n.NearestMipmapNearestFilter,9985:n.LinearMipmapNearestFilter,9986:n.NearestMipmapLinearFilter,9987:n.LinearMipmapLinearFilter},R={33071:n.ClampToEdgeWrapping,33648:n.MirroredRepeatWrapping,10497:n.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},C={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},O={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},_={CUBICSPLINE:void 0,LINEAR:n.InterpolateLinear,STEP:n.InterpolateDiscrete},P="OPAQUE",k="MASK",I="BLEND",N={"image/png":n.RGBAFormat,"image/jpeg":n.RGBFormat};function G(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function D(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function U(e,t){void 0!==t.extras&&("object"===o(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function H(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var o=t.extras.targetNames;if(e.morphTargetInfluences.length===o.length){e.morphTargetDictionary={};for(r=0,n=o.length;r<n;r++)e.morphTargetDictionary[o[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function B(e){for(var t="",r=Object.keys(e).sort(),n=0,o=r.length;n<o;n++)t+=r[n]+":"+e[r[n]]+";";return t}function F(e,r,o){this.json=e||{},this.extensions=r||{},this.options=o||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new n.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new n.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,r){var o=t.attributes,a=[];function i(t,n){return r.getDependency("accessor",t).then((function(t){e.setAttribute(n,t)}))}for(var s in o){var l=C[s]||s.toLowerCase();l in e.attributes||a.push(i(o[s],l))}if(void 0!==t.indices&&!e.index){var u=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));a.push(u)}return U(e,t),function(e,t,r){var o=t.attributes,a=new n.Box3;if(void 0!==o.POSITION){var i=(p=r.json.accessors[o.POSITION]).min,s=p.max;if(void 0!==i&&void 0!==s){a.set(new n.Vector3(i[0],i[1],i[2]),new n.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var u=new n.Vector3,c=new n.Vector3,d=0,f=l.length;d<f;d++){var p,m=l[d];if(void 0!==m.POSITION)i=(p=r.json.accessors[m.POSITION]).min,s=p.max,void 0!==i&&void 0!==s?(c.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),c.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),c.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),u.max(c)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}a.expandByVector(u)}e.boundingBox=a;var h=new n.Sphere;a.getCenter(h.center),h.radius=a.min.distanceTo(a.max)/2,e.boundingSphere=h}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,r),Promise.all(a).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,o=!1,a=0,i=t.length;a<i&&(void 0!==(u=t[a]).POSITION&&(n=!0),void 0!==u.NORMAL&&(o=!0),!n||!o);a++);if(!n&&!o)return Promise.resolve(e);var s=[],l=[];for(a=0,i=t.length;a<i;a++){var u=t[a];if(n){var c=void 0!==u.POSITION?r.getDependency("accessor",u.POSITION):e.attributes.position;s.push(c)}o&&(c=void 0!==u.NORMAL?r.getDependency("accessor",u.NORMAL):e.attributes.normal,l.push(c))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var r=t[0],a=t[1];return n&&(e.morphAttributes.position=r),o&&(e.morphAttributes.normal=a),e.morphTargetsRelative=!0,e}))}(e,t.targets,r):e}))}function V(e,t){var r=e.getIndex();if(null===r){var o=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)o.push(i);e.setIndex(o),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u}return F.prototype.parse=function(e,t){var r=this,n=this.json,o=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var a={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};D(o,a,n),U(a,n),e(a)})).catch(t)},F.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},o={},a=0,i=t.length;a<i;a++)for(var s=t[a].joints,l=0,u=s.length;l<u;l++)e[s[l]].isBone=!0;for(var c=0,d=e.length;c<d;c++){var f=e[c];void 0!==f.mesh&&(void 0===n[f.mesh]&&(n[f.mesh]=o[f.mesh]=0),n[f.mesh]++,void 0!==f.skin&&(r[f.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=o},F.prototype.getDependency=function(e,t){var n=e+":"+t,o=this.cache.get(n);if(!o){switch(e){case"scene":o=this.loadScene(t);break;case"node":o=this.loadNode(t);break;case"mesh":o=this.loadMesh(t);break;case"accessor":o=this.loadAccessor(t);break;case"bufferView":o=this.loadBufferView(t);break;case"buffer":o=this.loadBuffer(t);break;case"material":o=this.loadMaterial(t);break;case"texture":o=this.loadTexture(t);break;case"skin":o=this.loadSkin(t);break;case"animation":o=this.loadAnimation(t);break;case"camera":o=this.loadCamera(t);break;case"light":o=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,o)}return o},F.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},F.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var o=this.options;return new Promise((function(e,r){n.load(G(t.uri,o.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},F.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},F.prototype.loadAccessor=function(e){var t=this,r=this.json,o=this.json.accessors[e];if(void 0===o.bufferView&&void 0===o.sparse)return Promise.resolve(null);var a=[];return void 0!==o.bufferView?a.push(this.getDependency("bufferView",o.bufferView)):a.push(null),void 0!==o.sparse&&(a.push(this.getDependency("bufferView",o.sparse.indices.bufferView)),a.push(this.getDependency("bufferView",o.sparse.values.bufferView))),Promise.all(a).then((function(e){var a,i,s=e[0],l=A[o.type],u=L[o.componentType],c=u.BYTES_PER_ELEMENT,d=c*l,f=o.byteOffset||0,p=void 0!==o.bufferView?r.bufferViews[o.bufferView].byteStride:void 0,m=!0===o.normalized;if(p&&p!==d){var h=Math.floor(f/p),y="InterleavedBuffer:"+o.bufferView+":"+o.componentType+":"+h+":"+o.count,g=t.cache.get(y);g||(a=new u(s,h*p,o.count*p/c),g=new n.InterleavedBuffer(a,p/c),t.cache.add(y,g)),i=new n.InterleavedBufferAttribute(g,l,f%p/c,m)}else a=null===s?new u(o.count*l):new u(s,f,o.count*l),i=new n.BufferAttribute(a,l,m);if(void 0!==o.sparse){var v=A.SCALAR,b=L[o.sparse.indices.componentType],w=o.sparse.indices.byteOffset||0,S=o.sparse.values.byteOffset||0,T=new b(e[1],w,o.sparse.count*v),M=new u(e[2],S,o.sparse.count*l);null!==s&&(i=new n.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var x=0,j=T.length;x<j;x++){var E=T[x];if(i.setX(E,M[x*l]),l>=2&&i.setY(E,M[x*l+1]),l>=3&&i.setZ(E,M[x*l+2]),l>=4&&i.setW(E,M[x*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},F.prototype.loadTexture=function(e){var t,o=this,a=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,u=a.textures[e],c=u.extensions||{},d=(t=c[r.MSFT_TEXTURE_DDS]?a.images[c[r.MSFT_TEXTURE_DDS].source]:a.images[u.source]).uri,f=!1;return void 0!==t.bufferView&&(d=o.getDependency("bufferView",t.bufferView).then((function(e){f=!0;var r=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(r)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=c[r.MSFT_TEXTURE_DDS]?o.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(r,n){t.load(G(e,i.path),r,void 0,n)}))})).then((function(e){!0===f&&l.revokeObjectURL(d),e.flipY=!1,u.name&&(e.name=u.name),t.mimeType in N&&(e.format=N[t.mimeType]);var r=(a.samplers||{})[u.sampler]||{};return e.magFilter=E[r.magFilter]||n.LinearFilter,e.minFilter=E[r.minFilter]||n.LinearMipmapLinearFilter,e.wrapS=R[r.wrapS]||n.RepeatWrapping,e.wrapT=R[r.wrapT]||n.RepeatWrapping,e}))},F.prototype.assignTexture=function(e,t,o){var a=this;return this.getDependency("texture",o.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=n.RGBFormat}if(void 0===o.texCoord||0==o.texCoord||"aoMap"===t&&1==o.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+o.texCoord+" for texture "+t+" not yet supported."),a.extensions[r.KHR_TEXTURE_TRANSFORM]){var s=void 0!==o.extensions?o.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=a.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},F.prototype.assignFinalMaterial=function(e){var t=e.geometry,r=e.material,o=void 0!==t.attributes.tangent,a=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var c="PointsMaterial:"+r.uuid,d=this.cache.get(c);d||(d=new n.PointsMaterial,n.Material.prototype.copy.call(d,r),d.color.copy(r.color),d.map=r.map,d.sizeAttenuation=!1,this.cache.add(c,d)),r=d}else if(e.isLine){c="LineBasicMaterial:"+r.uuid;var f=this.cache.get(c);f||(f=new n.LineBasicMaterial,n.Material.prototype.copy.call(f,r),f.color.copy(r.color),this.cache.add(c,f)),r=f}if(o||a||i||s||l){c="ClonedMaterial:"+r.uuid+":";r.isGLTFSpecularGlossinessMaterial&&(c+="specular-glossiness:"),s&&(c+="skinning:"),o&&(c+="vertex-tangents:"),a&&(c+="vertex-colors:"),i&&(c+="flat-shading:"),l&&(c+="morph-targets:"),u&&(c+="morph-normals:");var p=this.cache.get(c);p||(p=r.clone(),s&&(p.skinning=!0),o&&(p.vertexTangents=!0),a&&(p.vertexColors=!0),i&&(p.flatShading=!0),l&&(p.morphTargets=!0),u&&(p.morphNormals=!0),this.cache.add(c,p)),r=p}r.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),r.normalScale&&!o&&(r.normalScale.y=-r.normalScale.y),r.clearcoatNormalScale&&!o&&(r.clearcoatNormalScale.y=-r.clearcoatNormalScale.y),e.material=r},F.prototype.loadMaterial=function(e){var t,o=this,a=this.json,i=this.extensions,s=a.materials[e],l={},u=s.extensions||{},c=[];if(u[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),c.push(d.extendParams(l,s,o))}else if(u[r.KHR_MATERIALS_UNLIT]){var f=i[r.KHR_MATERIALS_UNLIT];t=f.getMaterialType(),c.push(f.extendParams(l,s,o))}else{t=n.MeshStandardMaterial;var p=s.pbrMetallicRoughness||{};if(l.color=new n.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var m=p.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==p.baseColorTexture&&c.push(o.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(c.push(o.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),c.push(o.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=n.DoubleSide);var y=s.alphaMode||P;if(y===I?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,y===k&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==n.MeshBasicMaterial&&(c.push(o.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new n.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==n.MeshBasicMaterial&&(c.push(o.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==n.MeshBasicMaterial&&(l.emissive=(new n.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==n.MeshBasicMaterial&&c.push(o.assignTexture(l,"emissiveMap",s.emissiveTexture)),u[r.KHR_MATERIALS_CLEARCOAT]){var g=i[r.KHR_MATERIALS_CLEARCOAT];t=g.getMaterialType(),c.push(g.extendParams(l,{extensions:u},o))}return Promise.all(c).then((function(){var e;return e=t===h?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=n.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=n.sRGBEncoding),U(e,s),s.extensions&&D(i,e,s),e}))},F.prototype.loadGeometries=function(e){var t=this,o=this.extensions,a=this.primitiveCache;function i(e){return o[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return z(r,e,t)}))}for(var s,l,u=[],c=0,d=e.length;c<d;c++){var f,p=e[c],m=(l=void 0,(l=(s=p).extensions&&s.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+B(l.attributes):s.indices+":"+B(s.attributes)+":"+s.mode),h=a[m];if(h)u.push(h.promise);else f=p.extensions&&p.extensions[r.KHR_DRACO_MESH_COMPRESSION]?i(p):z(new n.BufferGeometry,p,t),a[m]={primitive:p,promise:f},u.push(f)}return Promise.all(u)},F.prototype.loadMesh=function(e){for(var t,r=this,o=this.json.meshes[e],a=o.primitives,i=[],s=0,l=a.length;s<l;s++){var u=void 0===a[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new n.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:n.FrontSide})),t.DefaultMaterial):this.getDependency("material",a[s].material);i.push(u)}return i.push(r.loadGeometries(a)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],u=0,c=s.length;u<c;u++){var d,f=s[u],p=a[u],m=i[u];if(p.mode===M||p.mode===x||p.mode===j||void 0===p.mode)!0!==(d=!0===o.isSkinnedMesh?new n.SkinnedMesh(f,m):new n.Mesh(f,m)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),p.mode===x?d.geometry=V(d.geometry,n.TriangleStripDrawMode):p.mode===j&&(d.geometry=V(d.geometry,n.TriangleFanDrawMode));else if(p.mode===w)d=new n.LineSegments(f,m);else if(p.mode===T)d=new n.Line(f,m);else if(p.mode===S)d=new n.LineLoop(f,m);else{if(p.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);d=new n.Points(f,m)}Object.keys(d.geometry.morphAttributes).length>0&&H(d,o),d.name=o.name||"mesh_"+e,s.length>1&&(d.name+="_"+u),U(d,o),r.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var h=new n.Group;for(u=0,c=l.length;u<c;u++)h.add(l[u]);return h}))},F.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],o=r[r.type];if(o)return"perspective"===r.type?t=new n.PerspectiveCamera(n.MathUtils.radToDeg(o.yfov),o.aspectRatio||1,o.znear||1,o.zfar||2e6):"orthographic"===r.type&&(t=new n.OrthographicCamera(-o.xmag,o.xmag,o.ymag,-o.ymag,o.znear,o.zfar)),r.name&&(t.name=r.name),U(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},F.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},F.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],o=[],a=[],i=[],s=[],l=0,u=t.channels.length;l<u;l++){var c=t.channels[l],d=t.samplers[c.sampler],f=c.target,p=void 0!==f.node?f.node:f.id,m=void 0!==t.parameters?t.parameters[d.input]:d.input,h=void 0!==t.parameters?t.parameters[d.output]:d.output;r.push(this.getDependency("node",p)),o.push(this.getDependency("accessor",m)),a.push(this.getDependency("accessor",h)),i.push(d),s.push(f)}return Promise.all([Promise.all(r),Promise.all(o),Promise.all(a),Promise.all(i),Promise.all(s)]).then((function(r){for(var o=r[0],a=r[1],i=r[2],s=r[3],l=r[4],u=[],c=0,d=o.length;c<d;c++){var f=o[c],p=a[c],m=i[c],h=s[c],y=l[c];if(void 0!==f){var g;switch(f.updateMatrix(),f.matrixAutoUpdate=!0,O[y.path]){case O.weights:g=n.NumberKeyframeTrack;break;case O.rotation:g=n.QuaternionKeyframeTrack;break;default:g=n.VectorKeyframeTrack}var b=f.name?f.name:f.uuid,w=void 0!==h.interpolation?_[h.interpolation]:n.InterpolateLinear,S=[];O[y.path]===O.weights?f.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&S.push(e.name?e.name:e.uuid)})):S.push(b);var T=m.array;if(m.normalized){var M;if(T.constructor===Int8Array)M=1/127;else if(T.constructor===Uint8Array)M=1/255;else if(T.constructor==Int16Array)M=1/32767;else{if(T.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");M=1/65535}for(var x=new Float32Array(T.length),j=0,L=T.length;j<L;j++)x[j]=T[j]*M;T=x}for(j=0,L=S.length;j<L;j++){var E=new g(S[j]+"."+O[y.path],p.array,T,w);"CUBICSPLINE"===h.interpolation&&(E.createInterpolant=function(e){return new v(this.times,this.values,this.getValueSize()/3,e)},E.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),u.push(E)}}}var R=t.name?t.name:"animation_"+e;return new n.AnimationClip(R,void 0,u)}))},F.prototype.loadNode=function(e){var t,o=this.json,a=this.extensions,i=this,s=o.meshReferences,l=o.meshUses,u=o.nodes[e];return(t=[],void 0!==u.mesh&&t.push(i.getDependency("mesh",u.mesh).then((function(e){var t;if(s[u.mesh]>1){var r=l[u.mesh]++;(t=e.clone()).name+="_instance_"+r}else t=e;return void 0!==u.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=u.weights.length;t<r;t++)e.morphTargetInfluences[t]=u.weights[t]})),t}))),void 0!==u.camera&&t.push(i.getDependency("camera",u.camera)),u.extensions&&u.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==u.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",u.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===u.isBone?new n.Bone:e.length>1?new n.Group:1===e.length?e[0]:new n.Object3D)!==e[0])for(var r=0,o=e.length;r<o;r++)t.add(e[r]);if(u.name&&(t.userData.name=u.name,t.name=n.PropertyBinding.sanitizeNodeName(u.name)),U(t,u),u.extensions&&D(a,t,u),void 0!==u.matrix){var i=new n.Matrix4;i.fromArray(u.matrix),t.applyMatrix4(i)}else void 0!==u.translation&&t.position.fromArray(u.translation),void 0!==u.rotation&&t.quaternion.fromArray(u.rotation),void 0!==u.scale&&t.scale.fromArray(u.scale);return t}))},F.prototype.loadScene=function(){function e(t,r,o,a){var i=o.nodes[t];return a.getDependency("node",t).then((function(e){return void 0===i.skin?e:a.getDependency("skin",i.skin).then((function(e){for(var r=[],n=0,o=(t=e).joints.length;n<o;n++)r.push(a.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var o=[],a=[],i=0,s=r.length;i<s;i++){var l=r[i];if(l){o.push(l);var u=new n.Matrix4;void 0!==t.inverseBindMatrices&&u.fromArray(t.inverseBindMatrices.array,16*i),a.push(u)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new n.Skeleton(o,a),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var n=[];if(i.children)for(var s=i.children,l=0,u=s.length;l<u;l++){var c=s[l];n.push(e(c,t,o,a))}return Promise.all(n)}))}return function(t){var r=this.json,o=this.extensions,a=this.json.scenes[t],i=new n.Group;a.name&&(i.name=a.name),U(i,a),a.extensions&&D(o,i,a);for(var s=a.nodes||[],l=[],u=0,c=s.length;u<c;u++)l.push(e(s[u],i,r,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>x});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=r("./src/js/app/components/renderer.js"),i=r("./src/js/app/components/label.js"),s=r("./src/js/app/components/camera.js"),l=r("./src/js/app/components/light.js"),u=r("./src/js/app/components/controls.js"),c=(r("./src/js/app/components/geometry.js"),r("./src/js/app/components/environment.js")),d=r("./src/js/app/helpers/meshHelper.js"),f=r("./src/js/app/model/texture.js"),p=(r("./src/js/app/model/model.js"),r("./src/js/app/managers/interaction.js")),m=r("./src/js/app/managers/datGUI.js"),h=r("./src/js/app/managers/mqttClient.js"),y=r("./src/js/data/config.js");function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==g(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===g(a)?a:String(a)),n)}var o,a}r("./node_modules/three-stl-loader/index.js")(n);var b,w,S,T=new n.Raycaster,M=new n.Vector2,x=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new n.Clock,this.scene=new n.Scene,window.scene=this.scene,window.scene_scale=y.default.scale,window.selectedReality=y.default.selectedReality,this.scene.fog=new n.FogExp2(y.default.fog.color,y.default.fog.near),this.mqtt=new h.default(this.scene),window.devicePixelRatio&&(y.default.dpr=window.devicePixelRatio),this.renderer=new a.default(this.scene,t),b=new s.default(this.renderer.threeRenderer),this.controls=new u.default(b.threeCamera,t),this.light=new l.default(this.scene),this.camera=b;["ambient","directional","point","hemi"].forEach((function(e){return r.light.place(e)})),y.default.isDev&&y.default.isShowingStats&&(this.stats=new Stats,this.container.appendChild(this.stats.dom)),y.default.isShowingLables&&(this.labelRenderer=(0,i.default)(),this.container.appendChild(this.labelRenderer.domElement)),y.default.isDev&&(this.gui=new m.default(this)),this.texture=new f.default,this.texture.load().then((function(){r.manager=new n.LoadingManager,r.environment=new c.default,y.default.isDev&&(r.gui.load(r),r.gui.show()),r.manager.onProgress=function(e,t,r){console.log("".concat(e,": ").concat(t," ").concat(r))},r.manager.onLoad=function(){console.log("Loading complete!"),new p.default(r.renderer.threeRenderer,r.scene,b.threeCamera,r.controls.threeControls),y.default.isDev&&(r.meshHelper=new d.default(r.scene,r.model.obj),y.default.mesh.enableHelper&&r.meshHelper.enable()),y.default.isLoaded=!0,r.container.querySelector("#loading").style.display="none"}})),this.render(),this.container.querySelector("#loading").style.display="none",window.addEventListener("click",this.onDocumentMouseDown,!1)}var t,r,g;return t=e,(r=[{key:"onDocumentMouseDown",value:function(e){e.preventDefault(),M.x=e.clientX/window.innerWidth*2-1,M.y=-e.clientY/window.innerHeight*2+1,T.setFromCamera(M,b.threeCamera);var t=T.intersectObjects(scene.children);if(t.length>0){var r=t[0].object;w&&w.material.setValues({opacity:w.currentOpacity}),S=(w=r).children[0],w.currentOpacity=w.material.opacity,w.labelsVisibility=w.material.labelVisibility,void 0!==S&&void 0!==S.visible&&y.default.isShowingLables&&(S.visible=!S.visible),w.material.selected=!w.material.selected,w.name.startsWith("Obstacle")||w.name.startsWith("Robot")&&(w.material.selected?w.material.setValues({opacity:.5}):w.material.setValues({opacity:1}),void 0!==w.clickEvent&&w.clickEvent(w))}else w&&w.material.setValues({opacity:w.currentOpacity}),w=null}},{key:"onDocumentMouseMove",value:function(e){e.preventDefault(),M.x=e.clientX/window.innerWidth*2-1,M.y=-e.clientY/window.innerHeight*2+1,T.setFromCamera(M,b.threeCamera);var t=T.intersectObjects(scene.children,!0);if(t.length>0){var r=t[0].object;w!==r&&(w&&w.material.setValues({opacity:w.currentOpacity}),S=(w=r).children[0],w.currentOpacity=w.material.opacity,w.currentColor=w.material.opacity,w.material.setValues({color:253948,opacity:.75}))}else w&&w.material.setValues({opacity:1,color:w.material.userData.originalColor}),w=null}},{key:"render",value:function(){this.renderer.render(this.scene,b.threeCamera),y.default.isShowingLables?this.labelRenderer.domElement.hidden=!1:this.labelRenderer.domElement.hidden=!0,this.labelRenderer.render(this.scene,b.threeCamera),o.default.update(),this.controls.threeControls.update(),b.threeCamera.updateMatrixWorld(),y.default.isDev&&y.default.isShowingStats&&this.stats.update(),requestAnimationFrame(this.render.bind(this))}}])&&v(t.prototype,r),g&&v(t,g),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/datGUI.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./src/js/data/config.js");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function a(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==r.return||r.return()}finally{if(l)throw a}}}}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(a=n.key,i=void 0,i=function(e,t){if("object"!==o(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===o(i)?i:String(i)),n)}var a,i}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.gui.useLocalStorage=!0,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,r,o;return t=e,(r=[{key:"load",value:function(e,t){var r=this;this.gui.add(n.default,"isShowingRobotSnapshots").name("Robot Snapshots").onChange((function(e){n.default.isShowingRobotSnapshots=e,(0,n.saveConfig)(n.default)}));var o=this.gui.addFolder("Labels");o.add(n.default.labelsVisibility,"obstacles").name("Obstacle Labels").onChange((function(e){r.toggleLabels(r.scene.children,"Obstacle",e)})),o.add(n.default.labelsVisibility,"robots").name("Robot Labels").onChange((function(e){r.toggleLabels(r.scene.children,"Robot",e)}));var a=this.gui.addFolder("Reality");a.add(n.default.selectedRealities,"real").name("Physical Reality").listen().onChange((function(e){r.toggleReality("real","R")})),a.add(n.default.selectedRealities,"virtual").name("Virtual Reality").listen().onChange((function(e){r.toggleReality("virtual","V")}));var i=this.gui.addFolder("Other");i.add(n.default.controls,"autoRotate").name("Auto Rotate").listen().onChange((function(e){n.default.controls.autoRotate=e,(0,n.saveConfig)(n.default),location.reload()})),i.add(n.default.controls,"autoRotateSpeed").min(-5).max(5).name("Auto Rotate Speed").listen().onChange((function(e){n.default.controls.autoRotateSpeed=e,(0,n.saveConfig)(n.default)})),this.gui.close()}},{key:"toggleLabels",value:function(e,t,r){if((0,n.saveConfig)(n.default),Array.isArray(e)&&void 0!==t&&""!==t){var o,i=a(e);try{for(i.s();!(o=i.n()).done;){var s=o.value;s.name.startsWith(t)&&(s.children[0].visible=r)}}catch(e){i.e(e)}finally{i.f()}}}},{key:"toggleReality",value:function(e,t){var r=scene.children;(0,n.saveConfig)(n.default),Object.entries(r).forEach((function(e){e[1].name;var t=e[1].reality;void 0!==t&&"R"===t?e[1].material.opacity=n.default.selectedRealities.real?1:n.default.hiddenOpacity:void 0!==t&&"V"===t&&(e[1].material.opacity=n.default.selectedRealities.virtual?1:n.default.hiddenOpacity)}))}},{key:"show",value:function(){this.gui.show()}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&s(t.prototype,r),o&&s(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/interaction.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var n=r("./src/js/utils/keyboard.js"),o=r("./src/js/utils/helpers.js"),a=r("./src/js/data/config.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===i(a)?a:String(a)),n)}var o,a}var l=function(){function e(t,r,a,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=r,this.camera=a,this.controls=i,this.timeout=null,this.keyboard=new n.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return o.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,r,i;return t=e,(r=[{key:"onMouseOver",value:function(e){e.preventDefault(),a.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),a.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){a.default.isMouseMoving=!1}),200),a.default.isMouseMoving=!0}}])&&s(t.prototype,r),i&&s(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/mqttClient.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>L});r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js");var n=r("./node_modules/paho-mqtt/paho-mqtt.js"),o=r.n(n),a=r("./src/js/data/config.js"),i=r("./src/js/app/components/obstacle.js"),s=r("./src/js/app/components/robot.js"),l=r("./src/js/app/helpers/urlHelper.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,a,i,s=[],l=!0,u=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=a.call(r)).done)&&(s.push(n.value),s.length!==t);l=!0);}catch(e){u=!0,o=e}finally{try{if(!l&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(u)throw o}}return s}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==u(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===u(a)?a:String(a)),n)}var o,a}var p="robot/create",m="robot/delete",h="robot/msg/broadcast",y="localization/data",g="localization/update",v="localization/data/?",b="obstacles/?",w="obstacles",S="obstacles/delete",T="obstacles/delete/all",M="output/neopixel",x="mgt/visualizer",j="mgt/robots/?",L=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.robot=new s.default(t),this.obstacles=new i.default(t);var n=(0,l.getCredentials)();if(this.updateChannel(),-1===n)alert("Unauthorized access! The Visualizer will not work properly.");else{var u=n.username,c=n.password,d="client_"+Math.random().toString(36).substring(2,15);this.client=new(o().Client)(a.default.mqtt.server,a.default.mqtt.port,a.default.mqtt.path,d),window.mqtt=this.client,window.channel=void 0===n.channel?"v1":n.channel,this.client.connect({userName:u,password:c,reconnect:!0,useSSL:!0,cleanSession:!1,onSuccess:function(){console.log("MQTT: connected"),r.subscribe(y),r.subscribe(g),r.subscribe(p),r.subscribe(m),r.subscribe(h),r.subscribe(M),r.subscribe(w),r.subscribe(S),r.subscribe(T),r.subscribe(x),r.subscribe(j),r.publish(b,"M"),r.publish(v,a.default.mixedReality.robots),window.robot=r.robot,window.obstacles=r.obstacles,r.client.onMessageArrived=r.onMessageArrived,r.client.onConnectionLost=r.onConnectionLost},onFailure:function(){console.log("MQTT: connection failed"),alert("MQTT: connection failed!")}})}}var t,r,n;return t=e,(r=[{key:"updateChannel",value:function(){}},{key:"onConnectionLost",value:function(e){0!==e.errorCode&&(console.log("MQTT: onConnectionLost:"+e.errorMessage),console.log("MQTT: reconnecting"))}},{key:"onMessageArrived",value:function(e){var t=e.payloadString.trim(),r=e.destinationName,n=r.substring(r.indexOf("/")+1);if(n==p)try{var o=JSON.parse(t);window.robot.create(o.id,o.x,o.y,o.heading,o.reality)}catch(e){console.error(e)}else if(n==m)try{var i=JSON.parse(t);window.robot.delete(i.id)}catch(e){console.error(e)}else if(n==g||n==y)try{var s=JSON.parse(t),l=a.default.mixedReality.robots;if(null!=s)for(var u in s){var d=s[u],f=d.id,v=d.x,b=d.y,L=d.heading,E=null==s[u].reality?"V":s[u].reality;E===l||"M"===l?null==window.robot.exists(f)?window.robot.create(f,v,b,L,E):(window.robot.move(f,v,b,L),window.robot.setReality(f,E)):robot.delete(f)}}catch(e){console.error(e)}else if(n==w)try{var R=JSON.parse(t);window.obstacles.createList(R)}catch(e){console.error(e)}else if(n==S){var A=JSON.parse(t);console.log(A),window.obstacles.deleteIfExists(A.id)}else if(n==T)window.obstacles.deleteAll();else if(n==M)try{var C=JSON.parse(t);window.robot.changeColor(C.id,C.R,C.G,C.B,C.ambient)}catch(e){console.error(e)}else if(n==h){if("ID? -1"!=t){var O="Broadcast Message: "+t.split(" ")[0],_=1e3+95*t.length,P=document.querySelector("#msg-box");P.innerHTML=O,P.style.display="block",setTimeout((function(){document.querySelector("#msg-box").style.display="none"}),_)}}else if(n==x)if("REFRESH"===t)console.log("page refresh request"),location.reload();else if(t.startsWith("MSG")){var k="Notice: "+t.substring(4),I=2e3+95*k.length,N=document.querySelector("#msg-box");N.innerHTML=k,N.style.display="block",setTimeout((function(){document.querySelector("#msg-box").style.display="none"}),I)}else console.log(">Management:",t);else if(n==j){var G=JSON.parse(t);if(console.log("Robot:Snapshot",G),-1!==G){var D,U=0,H=document.querySelector("#msg-box"),B=document.getElementById("msg-content"),F=document.createElement("div");F.setAttribute("id","msg-content");var z=document.createElement("h3");for(var V in z.textContent="Robot [".concat(G.id,"] Snapshot"),F.appendChild(z),G)if(Object.prototype.hasOwnProperty.call(G,V)){if(D=0===U?document.createElement("h4"):document.createElement("p"),"data"===V)for(var K=0,X=Object.entries(G.data);K<X.length;K++){var W=c(X[K],2),Y=W[0],q=W[1];D.textContent="".concat(Y,": ").concat(q)}else D.textContent="".concat(V,": ").concat(JSON.stringify(G[V]));F.appendChild(D),U+=1}H.replaceChild(F,B),H.style.display="block",H.style.opacity="0.5",setTimeout((function(){H.style.opacity="1.0",H.style.display="none"}),6e3)}}}},{key:"subscribe",value:function(e,t){var r=window.channel+"/"+e;this.client.subscribe(r),console.log("MQTT: subscribed",r),null!=t&&t()}},{key:"publish",value:function(e,t,r){var n=new(o().Message)(t),a=window.channel+"/"+e;n.destinationName=a,this.client.send(n),console.log("MQTT: published",a),null!=r&&r()}}])&&f(t.prototype,r),n&&f(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/model/model.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>d});var n=r("./node_modules/three/build/three.module.js"),o=r("./src/js/app/components/material.js"),a=r("./src/js/utils/helpers.js"),i=r("./src/js/utils/bufferGeometryUtils.js"),s=r("./src/js/app/loaders/GLTFLoader.js"),l=r("./src/js/data/config.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==u(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===u(a)?a:String(a)),n)}var o,a}var d=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=n,this.manager=r,this.obj=null,this.ref=null}var t,r,u;return t=e,(r=[{key:"load",value:function(e){var t=this;switch(e){case"gltf":new s.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){var r,o=e.scene;l.default.shadow.enabled&&o.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,r=e)})),t.obj=r,i.BufferGeometryUtils.computeTangents(r.geometry);var a=new n.Group;a.scale.multiplyScalar(.25),t.scene.add(a),t.ref=a,a.updateMatrixWorld(!0),a.add(r),t.scene.add(o)}),a.default.logProgress(),a.default.logError());break;case"object":new n.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){e.traverse((function(e){if(e instanceof n.Mesh){var r=new o.default(16777215).standard;r.map=t.textures.UV,e.material=r,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),t.obj=e,t.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),t.scene.add(e)}),a.default.logProgress(),a.default.logError())}}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&c(t.prototype,r),u&&c(t,u),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/model/texture.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/three/build/three.module.js"),o=r("./node_modules/es6-promise/dist/es6-promise.js"),a=r("./src/js/utils/helpers.js"),i=r("./src/js/data/config.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(o=n.key,a=void 0,a=function(e,t){if("object"!==s(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(o,"string"),"symbol"===s(a)?a:String(a)),n)}var o,a}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,r,s;return t=e,(r=[{key:"load",value:function(){var e=this,t=new n.TextureLoader,r=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new o.Promise((function(o,i){t.load(e.image,(function(t){t.anisotropy=r;var a={};a[e.name]=t,a[e.name]instanceof n.Texture&&o(a)}),a.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),o.Promise.all(l).then((function(t){for(var r=0;r<t.length;r++)e.textures[Object.keys(t[r])[0]]=t[r][Object.keys(t[r])[0]]}),(function(e){return console.log(e)}))}}])&&l(t.prototype,r),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/data/config.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>f,saveConfig:()=>d});var n,o=r("./node_modules/@tweenjs/tween.js/dist/tween.esm.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==a(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===a(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var u={scale:1,arena:{size:180,minX:-85,maxX:85,minY:-85,maxY:85},mqtt:{server:localStorage.getItem("pera-swarm-server")||"webservices.ceykod.com",port:parseInt(localStorage.getItem("pera-swarm-port"))||8883,path:localStorage.getItem("pera-swarm-path")||"/mqtt",channel:localStorage.getItem("pera-swarm-channel")||"v1"},mixedReality:{obstacles:"M",robots:"M"},selectedReality:"M",selectedRealities:{real:!0,virtual:!0},hiddenOpacity:.3,isDev:!0,isShowingStats:!0,isShowingLables:!0,labelsVisibility:{obstacles:!1,robots:!1},isShowingRobotSnapshots:!0,isLoaded:!1,isTweening:!1,isRotating:!1,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:o.default.Easing.Quadratic.InOut,duration:500,texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!1,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:50,near:50,far:1e3,aspect:1,posX:0,posY:0,posZ:0},controls:{autoRotate:!1,autoRotateSpeed:-1.5,rotateSpeed:1.5,zoomSpeed:.8,minDistance:100,maxDistance:800,minPolarAngle:0,maxPolarAngle:7/16*Math.PI,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!1,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}},c=localStorage.getItem(document.location.href+".config");n=null!=c?JSON.parse(c):u;var d=function(e){localStorage.setItem(document.location.href+".config",JSON.stringify(s(s({},u),e)))};const f=n},"./src/js/utils/bufferGeometryUtils.js":(e,t,r)=>{r.r(t),r.d(t,{BufferGeometryUtils:()=>o});var n=r("./node_modules/three/build/three.module.js"),o={computeTangents:function(e){var t=e.index,r=e.attributes;if(null!==t&&void 0!==r.position&&void 0!==r.normal&&void 0!==r.uv){var o=t.array,a=r.position.array,i=r.normal.array,s=r.uv.array,l=a.length/3;void 0===r.tangent&&e.setAttribute("tangent",new n.BufferAttribute(new Float32Array(4*l),4));for(var u=r.tangent.array,c=[],d=[],f=0;f<l;f++)c[f]=new n.Vector3,d[f]=new n.Vector3;var p=new n.Vector3,m=new n.Vector3,h=new n.Vector3,y=new n.Vector2,g=new n.Vector2,v=new n.Vector2,b=new n.Vector3,w=new n.Vector3,S=e.groups;0===S.length&&(S=[{start:0,count:o.length}]);f=0;for(var T=S.length;f<T;++f)for(var M=P=(_=S[f]).start,x=P+_.count;M<x;M+=3)k(o[M+0],o[M+1],o[M+2]);var j,L,E,R=new n.Vector3,A=new n.Vector3,C=new n.Vector3,O=new n.Vector3;for(f=0,T=S.length;f<T;++f){var _,P;for(M=P=(_=S[f]).start,x=P+_.count;M<x;M+=3)I(o[M+0]),I(o[M+1]),I(o[M+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function k(e,t,r){p.fromArray(a,3*e),m.fromArray(a,3*t),h.fromArray(a,3*r),y.fromArray(s,2*e),g.fromArray(s,2*t),v.fromArray(s,2*r),m.sub(p),h.sub(p),g.sub(y),v.sub(y);var n=1/(g.x*v.y-v.x*g.y);isFinite(n)&&(b.copy(m).multiplyScalar(v.y).addScaledVector(h,-g.y).multiplyScalar(n),w.copy(h).multiplyScalar(g.x).addScaledVector(m,-v.x).multiplyScalar(n),c[e].add(b),c[t].add(b),c[r].add(b),d[e].add(w),d[t].add(w),d[r].add(w))}function I(e){C.fromArray(i,3*e),O.copy(C),L=c[e],R.copy(L),R.sub(C.multiplyScalar(C.dot(L))).normalize(),A.crossVectors(O,L),E=A.dot(d[e]),j=E<0?-1:1,u[4*e]=R.x,u[4*e+1]=R.y,u[4*e+2]=R.z,u[4*e+3]=j}},mergeBufferGeometries:function(e,t){for(var r=null!==e[0].index,o=new Set(Object.keys(e[0].attributes)),a=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,u=new n.BufferGeometry,c=0,d=0;d<e.length;++d){var f=e[d],p=0;if(r!==(null!==f.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var m in f.attributes){if(!o.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+m+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[m]&&(i[m]=[]),i[m].push(f.attributes[m]),p++}if(p!==o.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==f.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var m in f.morphAttributes){if(!a.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[m]&&(s[m]=[]),s[m].push(f.morphAttributes[m])}if(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(f.userData),t){var h;if(r)h=f.index.count;else{if(void 0===f.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;h=f.attributes.position.count}u.addGroup(c,h,d),c+=h}}if(r){var y=0,g=[];for(d=0;d<e.length;++d){for(var v=e[d].index,b=0;b<v.count;++b)g.push(v.getX(b)+y);y+=e[d].attributes.position.count}u.setIndex(g)}for(var m in i){var w=this.mergeBufferAttributes(i[m]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" attribute."),null;u.setAttribute(m,w)}for(var m in s){var S=s[m][0].length;if(0===S)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[m]=[];for(d=0;d<S;++d){var T=[];for(b=0;b<s[m].length;++b)T.push(s[m][b][d]);var M=this.mergeBufferAttributes(T);if(!M)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" morphAttribute."),null;u.morphAttributes[m].push(M)}}return u},mergeBufferAttributes:function(e){for(var t,r,o,a=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=s.itemSize),r!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===o&&(o=s.normalized),o!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;a+=s.array.length}var l=new t(a),u=0;for(i=0;i<e.length;++i)l.set(e[i].array,u),u+=e[i].array.length;return new n.BufferAttribute(l,r,o)},interleaveAttributes:function(e){for(var t,r=0,o=0,a=0,i=e.length;a<i;++a){var s=e[a];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;r+=s.array.length,o+=s.itemSize}var l=new n.InterleavedBuffer(new t(r),o),u=0,c=[],d=["getX","getY","getZ","getW"],f=["setX","setY","setZ","setW"],p=0;for(i=e.length;p<i;p++){var m=(s=e[p]).itemSize,h=s.count,y=new n.InterleavedBufferAttribute(l,m,u,s.normalized);c.push(y),u+=m;for(var g=0;g<h;g++)for(var v=0;v<m;v++)y[f[v]](g,s[d[v]](g))}return c},estimateBytesUsed:function(e){var t=0;for(var r in e.attributes){var n=e.getAttribute(r);t+=n.count*n.itemSize*n.array.BYTES_PER_ELEMENT}var o=e.getIndex();return t+=o?o.count*o.itemSize*o.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var r={},o=e.getIndex(),a=e.getAttribute("position"),i=o?o.count:a.count,s=0,l=Object.keys(e.attributes),u={},c={},d=[],f=["getX","getY","getZ","getW"],p=0,m=l.length;p<m;p++){u[w=l[p]]=[],(x=e.morphAttributes[w])&&(c[w]=new Array(x.length).fill().map((function(){return[]})))}var h=Math.log10(1/t),y=Math.pow(10,h);for(p=0;p<i;p++){var g=o?o.getX(p):p,v="",b=0;for(m=l.length;b<m;b++)for(var w=l[b],S=(M=e.getAttribute(w)).itemSize,T=0;T<S;T++)v+="".concat(~~(M[f[T]](g)*y),",");if(v in r)d.push(r[v]);else{for(b=0,m=l.length;b<m;b++){w=l[b];var M=e.getAttribute(w),x=e.morphAttributes[w],j=(S=M.itemSize,u[w]),L=c[w];for(T=0;T<S;T++){var E=f[T];if(j.push(M[E](g)),x)for(var R=0,A=x.length;R<A;R++)L[R].push(x[R][E](g))}}r[v]=s,d.push(s),s++}}var C=e.clone();for(p=0,m=l.length;p<m;p++){w=l[p];var O=e.getAttribute(w),_=new O.array.constructor(u[w]);M=new n.BufferAttribute(_,O.itemSize,O.normalized);if(C.setAttribute(w,M),w in c)for(b=0;b<c[w].length;b++){var P=e.morphAttributes[w][b],k=(_=new P.array.constructor(c[w][b]),new n.BufferAttribute(_,P.itemSize,P.normalized));C.morphAttributes[w][b]=k}}return C.setIndex(d),C},toTrianglesDrawMode:function(e,t){if(t===n.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===n.TriangleFanDrawMode||t===n.TriangleStripDrawMode){var r=e.getIndex();if(null===r){var o=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)o.push(i);e.setIndex(o),r=e.getIndex()}var s=r.count-2,l=[];if(t===n.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(r.getX(0)),l.push(r.getX(i)),l.push(r.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(r.getX(i)),l.push(r.getX(i+1)),l.push(r.getX(i+2))):(l.push(r.getX(i+2)),l.push(r.getX(i+1)),l.push(r.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var u=e.clone();return u.setIndex(l),u.clearGroups(),u}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});const n={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,r,n;t=void 0!==(e=e||{}).parent?e.parent:document.body,r=void 0!==e.id?e.id:"oldie",(n=this.getWebGLErrorMessage()).id=r,t.appendChild(n)}}},"./src/js/utils/helpers.js":(e,t,r)=>{function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(a=o.key,i=void 0,i=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===n(i)?i:String(i)),o)}var a,i}r.r(t),r.d(t,{default:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,n=[{key:"throttle",value:function(e,t,r){var n,o;return t||(t=250),function(){var a=r||this,i=+new Date,s=arguments;n&&i<n+t?(clearTimeout(o),o=setTimeout((function(){n=i,e.apply(a,s)}),t)):(n=i,e.apply(a,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,r){return function(n){e[t]=r[n],e.needsUpdate=!0}}}],(r=null)&&o(t.prototype,r),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/utils/keyboard.js":(e,t,r)=>{function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(a=o.key,i=void 0,i=function(e,t){if("object"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(a,"string"),"symbol"===n(i)?i:String(i)),o)}var a,i}r.r(t),r.d(t,{default:()=>i});var a={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},i=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return r.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return r.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return r.onBlur}),!1)}var t,r,n;return t=e,(r=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),r=0;r<t.length;r++){var n=t[r],o=!1;if(o=-1!=Object.keys(a).indexOf(n)?this.keyCodes[a[n]]:this.keyCodes[n.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var r=a,n=Object.keys(r),o=t.split("+"),i=0;i<o.length;i++){var s=o[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==n.indexOf(s)?l=e.keyCode===r[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&o(t.prototype,r),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/css/app.scss":(e,t,r)=>{r.r(t)}},e=>{e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,